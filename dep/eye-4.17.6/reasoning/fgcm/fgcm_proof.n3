@prefix skolem: <http://eyereasoner.github.io/.well-known/genid/8b98b360-9a70-4845-b52c-c675af60ad01#>.
@prefix r: <http://www.w3.org/2000/10/swap/reason#>.
@prefix : <http://www.example.org/patientdescriptions/>.
@prefix dco: <http://www.debugit.eu/ontology/1.0/dco.owl#>.
@prefix fl: <http://eulersharp.sourceforge.net/2003/03swap/fl-rules#>.
@prefix n3: <http://www.w3.org/2004/06/rei#>.
@prefix var: <http://eyereasoner.github.io/var#>.
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>.
@prefix fgcm: <http://eulersharp.sourceforge.net/2006/02swap/fgcm-plugin#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.

skolem:proof a r:Proof, r:Conjunction;
    r:component skolem:lemma1;
    r:component skolem:lemma2;
    r:component skolem:lemma3;
    r:component skolem:lemma4;
    r:component skolem:lemma5;
    r:component skolem:lemma6;
    r:component skolem:lemma7;
    r:component skolem:lemma8;
    r:component skolem:lemma9;
    r:component skolem:lemma10;
    r:component skolem:lemma11;
    r:component skolem:lemma12;
    r:component skolem:lemma13;
    r:component skolem:lemma14;
    r:component skolem:lemma15;
    r:component skolem:lemma16;
    r:component skolem:lemma17;
    r:component skolem:lemma18;
    r:gives {
        (:patient008 dco:SimpleUrinaryTractInfection false) fl:gpi (0.15609492798580316 0.24989839953254675).
        (:patient008 dco:SimpleAcuteCystitis false) fl:gpi (0.5 0.6818062399896525).
        (:patient008 dco:ComplicatedUrinaryTractInfection false) fl:gpi (0.9962884114614465 0.9975150883686373).
        (:patient008 dco:SimpleAcutePyelonephritis false) fl:gpi (0.9352648821737795 0.9575078825964835).
        (:patient008 dco:ComplicatedAcutePyelonephritis false) fl:gpi (0.3181937600103475 0.5).
        (:patient008 dco:PregnancyUrinaryTractInfection false) fl:gpi (0.6968116667552052 0.7501016004674532).
        (:patient008 dco:ObstructiveUropathy false) fl:gpi (0.3181937600103475 0.3181937600103475).
        (:patient008 dco:PregnancyObstructiveUropathy false) fl:gpi (0.6497482370328734 0.6818062399896525).
        (:patient008 dco:ComplicatedAcutePregnancyPyelonephritis false) fl:gpi (0.5968726072149699 0.7501016004674533).
        (:patient008 dco:AcuteProstatis false) fl:gpi (0.9950831899235624 0.9954629272837167).
        (:patient008 dco:Fever false) fl:gpi (0.8 1).
        (:patient008 dco:UrineDipstickTest false) fl:gpi (1 1).
        (:patient008 dco:Chills false) fl:gpi (1 1).
        (:patient008 dco:DiabetesMellitus false) fl:gpi (0 0).
        (:patient008 dco:Male false) fl:gpi (1 1).
        (:patient008 dco:Old false) fl:gpi (1 1).
        (:patient008 dco:Dysuria false) fl:gpi (1 1).
        (:patient008 dco:DigitalRectalExamination false) fl:gpi (1 1).
    }.

skolem:lemma1 a r:Inference;
    r:gives {
        (:patient008 dco:SimpleUrinaryTractInfection false) fl:gpi (0.15609492798580316 0.24989839953254675).
    };
    r:evidence (
        skolem:lemma19
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo (0.15609492798580316 0.24989839953254675)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ n3:uri "http://www.example.org/patientdescriptions/patient008"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://www.debugit.eu/ontology/1.0/dco.owl#SimpleUrinaryTractInfection"]];
    r:rule skolem:lemma20.

skolem:lemma2 a r:Inference;
    r:gives {
        (:patient008 dco:SimpleAcuteCystitis false) fl:gpi (0.5 0.6818062399896525).
    };
    r:evidence (
        skolem:lemma21
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo (0.5 0.6818062399896525)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ n3:uri "http://www.example.org/patientdescriptions/patient008"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://www.debugit.eu/ontology/1.0/dco.owl#SimpleAcuteCystitis"]];
    r:rule skolem:lemma20.

skolem:lemma3 a r:Inference;
    r:gives {
        (:patient008 dco:ComplicatedUrinaryTractInfection false) fl:gpi (0.9962884114614465 0.9975150883686373).
    };
    r:evidence (
        skolem:lemma22
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo (0.9962884114614465 0.9975150883686373)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ n3:uri "http://www.example.org/patientdescriptions/patient008"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://www.debugit.eu/ontology/1.0/dco.owl#ComplicatedUrinaryTractInfection"]];
    r:rule skolem:lemma20.

skolem:lemma4 a r:Inference;
    r:gives {
        (:patient008 dco:SimpleAcutePyelonephritis false) fl:gpi (0.9352648821737795 0.9575078825964835).
    };
    r:evidence (
        skolem:lemma23
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo (0.9352648821737795 0.9575078825964835)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ n3:uri "http://www.example.org/patientdescriptions/patient008"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://www.debugit.eu/ontology/1.0/dco.owl#SimpleAcutePyelonephritis"]];
    r:rule skolem:lemma20.

skolem:lemma5 a r:Inference;
    r:gives {
        (:patient008 dco:ComplicatedAcutePyelonephritis false) fl:gpi (0.3181937600103475 0.5).
    };
    r:evidence (
        skolem:lemma24
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo (0.3181937600103475 0.5)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ n3:uri "http://www.example.org/patientdescriptions/patient008"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://www.debugit.eu/ontology/1.0/dco.owl#ComplicatedAcutePyelonephritis"]];
    r:rule skolem:lemma20.

skolem:lemma6 a r:Inference;
    r:gives {
        (:patient008 dco:PregnancyUrinaryTractInfection false) fl:gpi (0.6968116667552052 0.7501016004674532).
    };
    r:evidence (
        skolem:lemma25
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo (0.6968116667552052 0.7501016004674532)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ n3:uri "http://www.example.org/patientdescriptions/patient008"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://www.debugit.eu/ontology/1.0/dco.owl#PregnancyUrinaryTractInfection"]];
    r:rule skolem:lemma20.

skolem:lemma7 a r:Inference;
    r:gives {
        (:patient008 dco:ObstructiveUropathy false) fl:gpi (0.3181937600103475 0.3181937600103475).
    };
    r:evidence (
        skolem:lemma26
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo (0.3181937600103475 0.3181937600103475)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ n3:uri "http://www.example.org/patientdescriptions/patient008"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://www.debugit.eu/ontology/1.0/dco.owl#ObstructiveUropathy"]];
    r:rule skolem:lemma20.

skolem:lemma8 a r:Inference;
    r:gives {
        (:patient008 dco:PregnancyObstructiveUropathy false) fl:gpi (0.6497482370328734 0.6818062399896525).
    };
    r:evidence (
        skolem:lemma27
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo (0.6497482370328734 0.6818062399896525)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ n3:uri "http://www.example.org/patientdescriptions/patient008"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://www.debugit.eu/ontology/1.0/dco.owl#PregnancyObstructiveUropathy"]];
    r:rule skolem:lemma20.

skolem:lemma9 a r:Inference;
    r:gives {
        (:patient008 dco:ComplicatedAcutePregnancyPyelonephritis false) fl:gpi (0.5968726072149699 0.7501016004674533).
    };
    r:evidence (
        skolem:lemma28
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo (0.5968726072149699 0.7501016004674533)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ n3:uri "http://www.example.org/patientdescriptions/patient008"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://www.debugit.eu/ontology/1.0/dco.owl#ComplicatedAcutePregnancyPyelonephritis"]];
    r:rule skolem:lemma20.

skolem:lemma10 a r:Inference;
    r:gives {
        (:patient008 dco:AcuteProstatis false) fl:gpi (0.9950831899235624 0.9954629272837167).
    };
    r:evidence (
        skolem:lemma29
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo (0.9950831899235624 0.9954629272837167)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ n3:uri "http://www.example.org/patientdescriptions/patient008"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://www.debugit.eu/ontology/1.0/dco.owl#AcuteProstatis"]];
    r:rule skolem:lemma20.

skolem:lemma11 a r:Inference;
    r:gives {
        (:patient008 dco:Fever false) fl:gpi (0.8 1).
    };
    r:evidence (
        skolem:lemma30
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo (0.8 1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ n3:uri "http://www.example.org/patientdescriptions/patient008"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://www.debugit.eu/ontology/1.0/dco.owl#Fever"]];
    r:rule skolem:lemma20.

skolem:lemma12 a r:Inference;
    r:gives {
        (:patient008 dco:UrineDipstickTest false) fl:gpi (1 1).
    };
    r:evidence (
        skolem:lemma31
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo (1 1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ n3:uri "http://www.example.org/patientdescriptions/patient008"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://www.debugit.eu/ontology/1.0/dco.owl#UrineDipstickTest"]];
    r:rule skolem:lemma20.

skolem:lemma13 a r:Inference;
    r:gives {
        (:patient008 dco:Chills false) fl:gpi (1 1).
    };
    r:evidence (
        skolem:lemma32
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo (1 1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ n3:uri "http://www.example.org/patientdescriptions/patient008"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://www.debugit.eu/ontology/1.0/dco.owl#Chills"]];
    r:rule skolem:lemma20.

skolem:lemma14 a r:Inference;
    r:gives {
        (:patient008 dco:DiabetesMellitus false) fl:gpi (0 0).
    };
    r:evidence (
        skolem:lemma33
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo (0 0)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ n3:uri "http://www.example.org/patientdescriptions/patient008"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://www.debugit.eu/ontology/1.0/dco.owl#DiabetesMellitus"]];
    r:rule skolem:lemma20.

skolem:lemma15 a r:Inference;
    r:gives {
        (:patient008 dco:Male false) fl:gpi (1 1).
    };
    r:evidence (
        skolem:lemma34
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo (1 1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ n3:uri "http://www.example.org/patientdescriptions/patient008"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://www.debugit.eu/ontology/1.0/dco.owl#Male"]];
    r:rule skolem:lemma20.

skolem:lemma16 a r:Inference;
    r:gives {
        (:patient008 dco:Old false) fl:gpi (1 1).
    };
    r:evidence (
        skolem:lemma35
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo (1 1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ n3:uri "http://www.example.org/patientdescriptions/patient008"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://www.debugit.eu/ontology/1.0/dco.owl#Old"]];
    r:rule skolem:lemma20.

skolem:lemma17 a r:Inference;
    r:gives {
        (:patient008 dco:Dysuria false) fl:gpi (1 1).
    };
    r:evidence (
        skolem:lemma36
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo (1 1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ n3:uri "http://www.example.org/patientdescriptions/patient008"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://www.debugit.eu/ontology/1.0/dco.owl#Dysuria"]];
    r:rule skolem:lemma20.

skolem:lemma18 a r:Inference;
    r:gives {
        (:patient008 dco:DigitalRectalExamination false) fl:gpi (1 1).
    };
    r:evidence (
        skolem:lemma37
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo (1 1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ n3:uri "http://www.example.org/patientdescriptions/patient008"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://www.debugit.eu/ontology/1.0/dco.owl#DigitalRectalExamination"]];
    r:rule skolem:lemma20.

skolem:lemma19 a r:Inference;
    r:gives {
        (:patient008 dco:SimpleUrinaryTractInfection false) fl:gpi (0.15609492798580316 0.24989839953254675).
    };
    r:evidence (
        skolem:lemma38
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo false];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_3"]; r:boundTo 7];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo [ n3:uri "http://www.example.org/patientdescriptions/patient008"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_4"]; r:boundTo [ n3:uri "http://www.debugit.eu/ontology/1.0/dco.owl#SimpleUrinaryTractInfection"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_5"]; r:boundTo 0.15609492798580316];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_6"]; r:boundTo 0.24989839953254675];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_7"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_8"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_9"]; r:boundTo 0.15609492798580316];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_10"]; r:boundTo 0.24989839953254675];
    r:rule skolem:lemma39.

skolem:lemma20 a r:Extraction;
    r:gives {
        @forAll var:x_0, var:x_1, var:x_2. {
            (var:x_0 var:x_1 false) fl:gpi var:x_2.
        } => {
            (var:x_0 var:x_1 false) fl:gpi var:x_2.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-query.n3>].

skolem:lemma21 a r:Inference;
    r:gives {
        (:patient008 dco:SimpleAcuteCystitis false) fl:gpi (0.5 0.6818062399896525).
    };
    r:evidence (
        skolem:lemma40
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo false];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_3"]; r:boundTo 7];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo [ n3:uri "http://www.example.org/patientdescriptions/patient008"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_4"]; r:boundTo [ n3:uri "http://www.debugit.eu/ontology/1.0/dco.owl#SimpleAcuteCystitis"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_5"]; r:boundTo 0.5];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_6"]; r:boundTo 0.6818062399896525];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_7"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_8"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_9"]; r:boundTo 0.5];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_10"]; r:boundTo 0.6818062399896525];
    r:rule skolem:lemma39.

skolem:lemma22 a r:Inference;
    r:gives {
        (:patient008 dco:ComplicatedUrinaryTractInfection false) fl:gpi (0.9962884114614465 0.9975150883686373).
    };
    r:evidence (
        skolem:lemma41
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo false];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_3"]; r:boundTo 7];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo [ n3:uri "http://www.example.org/patientdescriptions/patient008"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_4"]; r:boundTo [ n3:uri "http://www.debugit.eu/ontology/1.0/dco.owl#ComplicatedUrinaryTractInfection"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_5"]; r:boundTo 0.9962884114614465];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_6"]; r:boundTo 0.9975150883686373];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_7"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_8"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_9"]; r:boundTo 0.9962884114614465];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_10"]; r:boundTo 0.9975150883686373];
    r:rule skolem:lemma39.

skolem:lemma23 a r:Inference;
    r:gives {
        (:patient008 dco:SimpleAcutePyelonephritis false) fl:gpi (0.9352648821737795 0.9575078825964835).
    };
    r:evidence (
        skolem:lemma42
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo false];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_3"]; r:boundTo 7];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo [ n3:uri "http://www.example.org/patientdescriptions/patient008"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_4"]; r:boundTo [ n3:uri "http://www.debugit.eu/ontology/1.0/dco.owl#SimpleAcutePyelonephritis"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_5"]; r:boundTo 0.9352648821737795];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_6"]; r:boundTo 0.9575078825964835];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_7"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_8"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_9"]; r:boundTo 0.9352648821737795];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_10"]; r:boundTo 0.9575078825964835];
    r:rule skolem:lemma39.

skolem:lemma24 a r:Inference;
    r:gives {
        (:patient008 dco:ComplicatedAcutePyelonephritis false) fl:gpi (0.3181937600103475 0.5).
    };
    r:evidence (
        skolem:lemma43
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo false];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_3"]; r:boundTo 7];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo [ n3:uri "http://www.example.org/patientdescriptions/patient008"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_4"]; r:boundTo [ n3:uri "http://www.debugit.eu/ontology/1.0/dco.owl#ComplicatedAcutePyelonephritis"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_5"]; r:boundTo 0.3181937600103475];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_6"]; r:boundTo 0.5];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_7"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_8"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_9"]; r:boundTo 0.3181937600103475];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_10"]; r:boundTo 0.5];
    r:rule skolem:lemma39.

skolem:lemma25 a r:Inference;
    r:gives {
        (:patient008 dco:PregnancyUrinaryTractInfection false) fl:gpi (0.6968116667552052 0.7501016004674532).
    };
    r:evidence (
        skolem:lemma44
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo false];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_3"]; r:boundTo 7];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo [ n3:uri "http://www.example.org/patientdescriptions/patient008"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_4"]; r:boundTo [ n3:uri "http://www.debugit.eu/ontology/1.0/dco.owl#PregnancyUrinaryTractInfection"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_5"]; r:boundTo 0.6968116667552052];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_6"]; r:boundTo 0.7501016004674532];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_7"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_8"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_9"]; r:boundTo 0.6968116667552052];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_10"]; r:boundTo 0.7501016004674532];
    r:rule skolem:lemma39.

skolem:lemma26 a r:Inference;
    r:gives {
        (:patient008 dco:ObstructiveUropathy false) fl:gpi (0.3181937600103475 0.3181937600103475).
    };
    r:evidence (
        skolem:lemma45
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo false];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_3"]; r:boundTo 7];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo [ n3:uri "http://www.example.org/patientdescriptions/patient008"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_4"]; r:boundTo [ n3:uri "http://www.debugit.eu/ontology/1.0/dco.owl#ObstructiveUropathy"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_5"]; r:boundTo 0.3181937600103475];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_6"]; r:boundTo 0.3181937600103475];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_7"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_8"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_9"]; r:boundTo 0.3181937600103475];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_10"]; r:boundTo 0.3181937600103475];
    r:rule skolem:lemma39.

skolem:lemma27 a r:Inference;
    r:gives {
        (:patient008 dco:PregnancyObstructiveUropathy false) fl:gpi (0.6497482370328734 0.6818062399896525).
    };
    r:evidence (
        skolem:lemma46
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo false];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_3"]; r:boundTo 7];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo [ n3:uri "http://www.example.org/patientdescriptions/patient008"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_4"]; r:boundTo [ n3:uri "http://www.debugit.eu/ontology/1.0/dco.owl#PregnancyObstructiveUropathy"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_5"]; r:boundTo 0.6497482370328734];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_6"]; r:boundTo 0.6818062399896525];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_7"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_8"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_9"]; r:boundTo 0.6497482370328734];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_10"]; r:boundTo 0.6818062399896525];
    r:rule skolem:lemma39.

skolem:lemma28 a r:Inference;
    r:gives {
        (:patient008 dco:ComplicatedAcutePregnancyPyelonephritis false) fl:gpi (0.5968726072149699 0.7501016004674533).
    };
    r:evidence (
        skolem:lemma47
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo false];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_3"]; r:boundTo 7];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo [ n3:uri "http://www.example.org/patientdescriptions/patient008"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_4"]; r:boundTo [ n3:uri "http://www.debugit.eu/ontology/1.0/dco.owl#ComplicatedAcutePregnancyPyelonephritis"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_5"]; r:boundTo 0.5968726072149699];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_6"]; r:boundTo 0.7501016004674533];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_7"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_8"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_9"]; r:boundTo 0.5968726072149699];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_10"]; r:boundTo 0.7501016004674533];
    r:rule skolem:lemma39.

skolem:lemma29 a r:Inference;
    r:gives {
        (:patient008 dco:AcuteProstatis false) fl:gpi (0.9950831899235624 0.9954629272837167).
    };
    r:evidence (
        skolem:lemma48
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo false];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_3"]; r:boundTo 7];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo [ n3:uri "http://www.example.org/patientdescriptions/patient008"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_4"]; r:boundTo [ n3:uri "http://www.debugit.eu/ontology/1.0/dco.owl#AcuteProstatis"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_5"]; r:boundTo 0.9950831899235624];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_6"]; r:boundTo 0.9954629272837167];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_7"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_8"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_9"]; r:boundTo 0.9950831899235624];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_10"]; r:boundTo 0.9954629272837167];
    r:rule skolem:lemma39.

skolem:lemma30 a r:Inference;
    r:gives {
        (:patient008 dco:Fever false) fl:gpi (0.8 1).
    };
    r:evidence (
        skolem:lemma49
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo false];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_3"]; r:boundTo 7];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo [ n3:uri "http://www.example.org/patientdescriptions/patient008"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_4"]; r:boundTo [ n3:uri "http://www.debugit.eu/ontology/1.0/dco.owl#Fever"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_5"]; r:boundTo 0.8];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_6"]; r:boundTo 1];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_7"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_8"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_9"]; r:boundTo 0.8];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_10"]; r:boundTo 1];
    r:rule skolem:lemma39.

skolem:lemma31 a r:Inference;
    r:gives {
        (:patient008 dco:UrineDipstickTest false) fl:gpi (1 1).
    };
    r:evidence (
        skolem:lemma50
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo false];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_3"]; r:boundTo 7];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo [ n3:uri "http://www.example.org/patientdescriptions/patient008"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_4"]; r:boundTo [ n3:uri "http://www.debugit.eu/ontology/1.0/dco.owl#UrineDipstickTest"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_5"]; r:boundTo 1];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_6"]; r:boundTo 1];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_7"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_8"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_9"]; r:boundTo 1];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_10"]; r:boundTo 1];
    r:rule skolem:lemma39.

skolem:lemma32 a r:Inference;
    r:gives {
        (:patient008 dco:Chills false) fl:gpi (1 1).
    };
    r:evidence (
        skolem:lemma51
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo false];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_3"]; r:boundTo 7];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo [ n3:uri "http://www.example.org/patientdescriptions/patient008"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_4"]; r:boundTo [ n3:uri "http://www.debugit.eu/ontology/1.0/dco.owl#Chills"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_5"]; r:boundTo 1];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_6"]; r:boundTo 1];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_7"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_8"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_9"]; r:boundTo 1];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_10"]; r:boundTo 1];
    r:rule skolem:lemma39.

skolem:lemma33 a r:Inference;
    r:gives {
        (:patient008 dco:DiabetesMellitus false) fl:gpi (0 0).
    };
    r:evidence (
        skolem:lemma52
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo false];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_3"]; r:boundTo 7];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo [ n3:uri "http://www.example.org/patientdescriptions/patient008"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_4"]; r:boundTo [ n3:uri "http://www.debugit.eu/ontology/1.0/dco.owl#DiabetesMellitus"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_5"]; r:boundTo 0];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_6"]; r:boundTo 0];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_7"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_8"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_9"]; r:boundTo 0];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_10"]; r:boundTo 0];
    r:rule skolem:lemma39.

skolem:lemma34 a r:Inference;
    r:gives {
        (:patient008 dco:Male false) fl:gpi (1 1).
    };
    r:evidence (
        skolem:lemma53
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo false];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_3"]; r:boundTo 7];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo [ n3:uri "http://www.example.org/patientdescriptions/patient008"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_4"]; r:boundTo [ n3:uri "http://www.debugit.eu/ontology/1.0/dco.owl#Male"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_5"]; r:boundTo 1];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_6"]; r:boundTo 1];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_7"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_8"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_9"]; r:boundTo 1];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_10"]; r:boundTo 1];
    r:rule skolem:lemma39.

skolem:lemma35 a r:Inference;
    r:gives {
        (:patient008 dco:Old false) fl:gpi (1 1).
    };
    r:evidence (
        skolem:lemma54
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo false];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_3"]; r:boundTo 7];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo [ n3:uri "http://www.example.org/patientdescriptions/patient008"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_4"]; r:boundTo [ n3:uri "http://www.debugit.eu/ontology/1.0/dco.owl#Old"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_5"]; r:boundTo 1];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_6"]; r:boundTo 1];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_7"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_8"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_9"]; r:boundTo 1];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_10"]; r:boundTo 1];
    r:rule skolem:lemma39.

skolem:lemma36 a r:Inference;
    r:gives {
        (:patient008 dco:Dysuria false) fl:gpi (1 1).
    };
    r:evidence (
        skolem:lemma55
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo false];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_3"]; r:boundTo 7];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo [ n3:uri "http://www.example.org/patientdescriptions/patient008"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_4"]; r:boundTo [ n3:uri "http://www.debugit.eu/ontology/1.0/dco.owl#Dysuria"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_5"]; r:boundTo 1];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_6"]; r:boundTo 1];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_7"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_8"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_9"]; r:boundTo 1];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_10"]; r:boundTo 1];
    r:rule skolem:lemma39.

skolem:lemma37 a r:Inference;
    r:gives {
        (:patient008 dco:DigitalRectalExamination false) fl:gpi (1 1).
    };
    r:evidence (
        skolem:lemma56
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo false];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_3"]; r:boundTo 7];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo [ n3:uri "http://www.example.org/patientdescriptions/patient008"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_4"]; r:boundTo [ n3:uri "http://www.debugit.eu/ontology/1.0/dco.owl#DigitalRectalExamination"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_5"]; r:boundTo 1];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_6"]; r:boundTo 1];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_7"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_8"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_9"]; r:boundTo 1];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_10"]; r:boundTo 1];
    r:rule skolem:lemma39.

skolem:lemma38 a r:Inference;
    r:gives {
        ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:call {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    () fgcm:expandClosureGmu true.
                    () fgcm:expandClosureGsigma true.
                    (false) fgcm:handleUnknownVariables true.
                    (:patient008 1) fgcm:iterate 7 .
                    ("nb_setval" "IterationsNeeded" 7) e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            ("nb_getval" "IterationsNeeded" 7) e:derive true.
            :patient008 fgcm:gpi (dco:SimpleUrinaryTractInfection 0.15609492798580316 0.24989839953254675 7).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                    (:patient008 dco:SimpleUrinaryTractInfection) fl:gpi (_:sk_0 _:sk_1).
                }.
            } {
                0.15609492798580316 log:equalTo _:sk_0.
                0.24989839953254675 log:equalTo _:sk_1.
            } {
                0.15609492798580316 log:equalTo 0.15609492798580316 .
                0.24989839953254675 log:equalTo 0.24989839953254675.
            }) e:derive true.
        }.
    };
    r:evidence (
        [ a r:Fact; r:gives {("if_then_else" {
            ("nb_getval" "fnet" "done") e:derive true.
        } true {
            (";" {
                () fgcm:expandClosureGmu true.
                () fgcm:expandClosureGsigma true.
                (false) fgcm:handleUnknownVariables true.
                (:patient008 1) fgcm:iterate 7 .
                ("nb_setval" "IterationsNeeded" 7) e:derive true.
            } {
                ("nb_setval" "fnet" "done") e:derive true.
            }) e:derive true.
        }) e:derive true}]
        [ a r:Fact; r:gives {("nb_getval" "IterationsNeeded" 7) e:derive true}]
        [ a r:Fact; r:gives {:patient008 fgcm:gpi (dco:SimpleUrinaryTractInfection 0.15609492798580316 0.24989839953254675 7)}]
        [ a r:Fact; r:gives {("if_then_else" {
            ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                (:patient008 dco:SimpleUrinaryTractInfection) fl:gpi (_:sk_0 _:sk_1).
            }.
        } {
            0.15609492798580316 log:equalTo _:sk_0.
            0.24989839953254675 log:equalTo _:sk_1.
        } {
            0.15609492798580316 log:equalTo 0.15609492798580316 .
            0.24989839953254675 log:equalTo 0.24989839953254675.
        }) e:derive true}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:rule [ a r:DerivedRule; r:gives {
        {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    () fgcm:expandClosureGmu true.
                    () fgcm:expandClosureGsigma true.
                    (false) fgcm:handleUnknownVariables true.
                    (:patient008 1) fgcm:iterate 7 .
                    ("nb_setval" "IterationsNeeded" 7) e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            ("nb_getval" "IterationsNeeded" 7) e:derive true.
            :patient008 fgcm:gpi (dco:SimpleUrinaryTractInfection 0.15609492798580316 0.24989839953254675 7).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                    (:patient008 dco:SimpleUrinaryTractInfection) fl:gpi (var:x_0 var:x_1).
                }.
            } {
                0.15609492798580316 log:equalTo var:x_0.
                0.24989839953254675 log:equalTo var:x_1.
            } {
                0.15609492798580316 log:equalTo 0.15609492798580316 .
                0.24989839953254675 log:equalTo 0.24989839953254675.
            }) e:derive true.
        } => {
            ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:call {
                ("if_then_else" {
                    ("nb_getval" "fnet" "done") e:derive true.
                } true {
                    (";" {
                        () fgcm:expandClosureGmu true.
                        () fgcm:expandClosureGsigma true.
                        (false) fgcm:handleUnknownVariables true.
                        (:patient008 1) fgcm:iterate 7 .
                        ("nb_setval" "IterationsNeeded" 7) e:derive true.
                    } {
                        ("nb_setval" "fnet" "done") e:derive true.
                    }) e:derive true.
                }) e:derive true.
                ("nb_getval" "IterationsNeeded" 7) e:derive true.
                :patient008 fgcm:gpi (dco:SimpleUrinaryTractInfection 0.15609492798580316 0.24989839953254675 7).
                ("if_then_else" {
                    ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                        (:patient008 dco:SimpleUrinaryTractInfection) fl:gpi (var:x_0 var:x_1).
                    }.
                } {
                    0.15609492798580316 log:equalTo var:x_0.
                    0.24989839953254675 log:equalTo var:x_1.
                } {
                    0.15609492798580316 log:equalTo 0.15609492798580316 .
                    0.24989839953254675 log:equalTo 0.24989839953254675.
                }) e:derive true.
            }.
        }.
    }].

skolem:lemma39 a r:Extraction;
    r:gives {
        @forAll var:x_0, var:x_1, var:x_2, var:x_3, var:x_4, var:x_5, var:x_6, var:x_7, var:x_8, var:x_9, var:x_10. {
            (var:x_2 var:x_4 var:x_1) fl:gpi (var:x_9 var:x_10).
        } <= {
            var:x_0 e:call {
                ("if_then_else" {
                    ("nb_getval" "fnet" "done") e:derive true.
                } true {
                    (";" {
                        () fgcm:expandClosureGmu true.
                        () fgcm:expandClosureGsigma true.
                        (var:x_1) fgcm:handleUnknownVariables true.
                        (var:x_2 1) fgcm:iterate var:x_3.
                        ("nb_setval" "IterationsNeeded" var:x_3) e:derive true.
                    } {
                        ("nb_setval" "fnet" "done") e:derive true.
                    }) e:derive true.
                }) e:derive true.
                ("nb_getval" "IterationsNeeded" var:x_3) e:derive true.
                var:x_2 fgcm:gpi (var:x_4 var:x_5 var:x_6 var:x_3).
                ("if_then_else" {
                    var:x_0 e:closure {
                        (var:x_2 var:x_4) fl:gpi (var:x_7 var:x_8).
                    }.
                } {
                    var:x_9 log:equalTo var:x_7.
                    var:x_10 log:equalTo var:x_8.
                } {
                    var:x_9 log:equalTo var:x_5.
                    var:x_10 log:equalTo var:x_6.
                }) e:derive true.
            }.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3>].

skolem:lemma40 a r:Inference;
    r:gives {
        ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:call {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    () fgcm:expandClosureGmu true.
                    () fgcm:expandClosureGsigma true.
                    (false) fgcm:handleUnknownVariables true.
                    (:patient008 1) fgcm:iterate 7 .
                    ("nb_setval" "IterationsNeeded" 7) e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            ("nb_getval" "IterationsNeeded" 7) e:derive true.
            :patient008 fgcm:gpi (dco:SimpleAcuteCystitis 0.5 0.6818062399896525 7).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                    (:patient008 dco:SimpleAcuteCystitis) fl:gpi (_:sk_0 _:sk_1).
                }.
            } {
                0.5 log:equalTo _:sk_0.
                0.6818062399896525 log:equalTo _:sk_1.
            } {
                0.5 log:equalTo 0.5 .
                0.6818062399896525 log:equalTo 0.6818062399896525.
            }) e:derive true.
        }.
    };
    r:evidence (
        [ a r:Fact; r:gives {("if_then_else" {
            ("nb_getval" "fnet" "done") e:derive true.
        } true {
            (";" {
                () fgcm:expandClosureGmu true.
                () fgcm:expandClosureGsigma true.
                (false) fgcm:handleUnknownVariables true.
                (:patient008 1) fgcm:iterate 7 .
                ("nb_setval" "IterationsNeeded" 7) e:derive true.
            } {
                ("nb_setval" "fnet" "done") e:derive true.
            }) e:derive true.
        }) e:derive true}]
        [ a r:Fact; r:gives {("nb_getval" "IterationsNeeded" 7) e:derive true}]
        [ a r:Fact; r:gives {:patient008 fgcm:gpi (dco:SimpleAcuteCystitis 0.5 0.6818062399896525 7)}]
        [ a r:Fact; r:gives {("if_then_else" {
            ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                (:patient008 dco:SimpleAcuteCystitis) fl:gpi (_:sk_0 _:sk_1).
            }.
        } {
            0.5 log:equalTo _:sk_0.
            0.6818062399896525 log:equalTo _:sk_1.
        } {
            0.5 log:equalTo 0.5 .
            0.6818062399896525 log:equalTo 0.6818062399896525.
        }) e:derive true}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:rule [ a r:DerivedRule; r:gives {
        {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    () fgcm:expandClosureGmu true.
                    () fgcm:expandClosureGsigma true.
                    (false) fgcm:handleUnknownVariables true.
                    (:patient008 1) fgcm:iterate 7 .
                    ("nb_setval" "IterationsNeeded" 7) e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            ("nb_getval" "IterationsNeeded" 7) e:derive true.
            :patient008 fgcm:gpi (dco:SimpleAcuteCystitis 0.5 0.6818062399896525 7).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                    (:patient008 dco:SimpleAcuteCystitis) fl:gpi (var:x_0 var:x_1).
                }.
            } {
                0.5 log:equalTo var:x_0.
                0.6818062399896525 log:equalTo var:x_1.
            } {
                0.5 log:equalTo 0.5 .
                0.6818062399896525 log:equalTo 0.6818062399896525.
            }) e:derive true.
        } => {
            ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:call {
                ("if_then_else" {
                    ("nb_getval" "fnet" "done") e:derive true.
                } true {
                    (";" {
                        () fgcm:expandClosureGmu true.
                        () fgcm:expandClosureGsigma true.
                        (false) fgcm:handleUnknownVariables true.
                        (:patient008 1) fgcm:iterate 7 .
                        ("nb_setval" "IterationsNeeded" 7) e:derive true.
                    } {
                        ("nb_setval" "fnet" "done") e:derive true.
                    }) e:derive true.
                }) e:derive true.
                ("nb_getval" "IterationsNeeded" 7) e:derive true.
                :patient008 fgcm:gpi (dco:SimpleAcuteCystitis 0.5 0.6818062399896525 7).
                ("if_then_else" {
                    ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                        (:patient008 dco:SimpleAcuteCystitis) fl:gpi (var:x_0 var:x_1).
                    }.
                } {
                    0.5 log:equalTo var:x_0.
                    0.6818062399896525 log:equalTo var:x_1.
                } {
                    0.5 log:equalTo 0.5 .
                    0.6818062399896525 log:equalTo 0.6818062399896525.
                }) e:derive true.
            }.
        }.
    }].

skolem:lemma41 a r:Inference;
    r:gives {
        ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:call {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    () fgcm:expandClosureGmu true.
                    () fgcm:expandClosureGsigma true.
                    (false) fgcm:handleUnknownVariables true.
                    (:patient008 1) fgcm:iterate 7 .
                    ("nb_setval" "IterationsNeeded" 7) e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            ("nb_getval" "IterationsNeeded" 7) e:derive true.
            :patient008 fgcm:gpi (dco:ComplicatedUrinaryTractInfection 0.9962884114614465 0.9975150883686373 7).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                    (:patient008 dco:ComplicatedUrinaryTractInfection) fl:gpi (_:sk_0 _:sk_1).
                }.
            } {
                0.9962884114614465 log:equalTo _:sk_0.
                0.9975150883686373 log:equalTo _:sk_1.
            } {
                0.9962884114614465 log:equalTo 0.9962884114614465 .
                0.9975150883686373 log:equalTo 0.9975150883686373.
            }) e:derive true.
        }.
    };
    r:evidence (
        [ a r:Fact; r:gives {("if_then_else" {
            ("nb_getval" "fnet" "done") e:derive true.
        } true {
            (";" {
                () fgcm:expandClosureGmu true.
                () fgcm:expandClosureGsigma true.
                (false) fgcm:handleUnknownVariables true.
                (:patient008 1) fgcm:iterate 7 .
                ("nb_setval" "IterationsNeeded" 7) e:derive true.
            } {
                ("nb_setval" "fnet" "done") e:derive true.
            }) e:derive true.
        }) e:derive true}]
        [ a r:Fact; r:gives {("nb_getval" "IterationsNeeded" 7) e:derive true}]
        [ a r:Fact; r:gives {:patient008 fgcm:gpi (dco:ComplicatedUrinaryTractInfection 0.9962884114614465 0.9975150883686373 7)}]
        [ a r:Fact; r:gives {("if_then_else" {
            ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                (:patient008 dco:ComplicatedUrinaryTractInfection) fl:gpi (_:sk_0 _:sk_1).
            }.
        } {
            0.9962884114614465 log:equalTo _:sk_0.
            0.9975150883686373 log:equalTo _:sk_1.
        } {
            0.9962884114614465 log:equalTo 0.9962884114614465 .
            0.9975150883686373 log:equalTo 0.9975150883686373.
        }) e:derive true}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:rule [ a r:DerivedRule; r:gives {
        {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    () fgcm:expandClosureGmu true.
                    () fgcm:expandClosureGsigma true.
                    (false) fgcm:handleUnknownVariables true.
                    (:patient008 1) fgcm:iterate 7 .
                    ("nb_setval" "IterationsNeeded" 7) e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            ("nb_getval" "IterationsNeeded" 7) e:derive true.
            :patient008 fgcm:gpi (dco:ComplicatedUrinaryTractInfection 0.9962884114614465 0.9975150883686373 7).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                    (:patient008 dco:ComplicatedUrinaryTractInfection) fl:gpi (var:x_0 var:x_1).
                }.
            } {
                0.9962884114614465 log:equalTo var:x_0.
                0.9975150883686373 log:equalTo var:x_1.
            } {
                0.9962884114614465 log:equalTo 0.9962884114614465 .
                0.9975150883686373 log:equalTo 0.9975150883686373.
            }) e:derive true.
        } => {
            ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:call {
                ("if_then_else" {
                    ("nb_getval" "fnet" "done") e:derive true.
                } true {
                    (";" {
                        () fgcm:expandClosureGmu true.
                        () fgcm:expandClosureGsigma true.
                        (false) fgcm:handleUnknownVariables true.
                        (:patient008 1) fgcm:iterate 7 .
                        ("nb_setval" "IterationsNeeded" 7) e:derive true.
                    } {
                        ("nb_setval" "fnet" "done") e:derive true.
                    }) e:derive true.
                }) e:derive true.
                ("nb_getval" "IterationsNeeded" 7) e:derive true.
                :patient008 fgcm:gpi (dco:ComplicatedUrinaryTractInfection 0.9962884114614465 0.9975150883686373 7).
                ("if_then_else" {
                    ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                        (:patient008 dco:ComplicatedUrinaryTractInfection) fl:gpi (var:x_0 var:x_1).
                    }.
                } {
                    0.9962884114614465 log:equalTo var:x_0.
                    0.9975150883686373 log:equalTo var:x_1.
                } {
                    0.9962884114614465 log:equalTo 0.9962884114614465 .
                    0.9975150883686373 log:equalTo 0.9975150883686373.
                }) e:derive true.
            }.
        }.
    }].

skolem:lemma42 a r:Inference;
    r:gives {
        ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:call {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    () fgcm:expandClosureGmu true.
                    () fgcm:expandClosureGsigma true.
                    (false) fgcm:handleUnknownVariables true.
                    (:patient008 1) fgcm:iterate 7 .
                    ("nb_setval" "IterationsNeeded" 7) e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            ("nb_getval" "IterationsNeeded" 7) e:derive true.
            :patient008 fgcm:gpi (dco:SimpleAcutePyelonephritis 0.9352648821737795 0.9575078825964835 7).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                    (:patient008 dco:SimpleAcutePyelonephritis) fl:gpi (_:sk_0 _:sk_1).
                }.
            } {
                0.9352648821737795 log:equalTo _:sk_0.
                0.9575078825964835 log:equalTo _:sk_1.
            } {
                0.9352648821737795 log:equalTo 0.9352648821737795 .
                0.9575078825964835 log:equalTo 0.9575078825964835.
            }) e:derive true.
        }.
    };
    r:evidence (
        [ a r:Fact; r:gives {("if_then_else" {
            ("nb_getval" "fnet" "done") e:derive true.
        } true {
            (";" {
                () fgcm:expandClosureGmu true.
                () fgcm:expandClosureGsigma true.
                (false) fgcm:handleUnknownVariables true.
                (:patient008 1) fgcm:iterate 7 .
                ("nb_setval" "IterationsNeeded" 7) e:derive true.
            } {
                ("nb_setval" "fnet" "done") e:derive true.
            }) e:derive true.
        }) e:derive true}]
        [ a r:Fact; r:gives {("nb_getval" "IterationsNeeded" 7) e:derive true}]
        [ a r:Fact; r:gives {:patient008 fgcm:gpi (dco:SimpleAcutePyelonephritis 0.9352648821737795 0.9575078825964835 7)}]
        [ a r:Fact; r:gives {("if_then_else" {
            ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                (:patient008 dco:SimpleAcutePyelonephritis) fl:gpi (_:sk_0 _:sk_1).
            }.
        } {
            0.9352648821737795 log:equalTo _:sk_0.
            0.9575078825964835 log:equalTo _:sk_1.
        } {
            0.9352648821737795 log:equalTo 0.9352648821737795 .
            0.9575078825964835 log:equalTo 0.9575078825964835.
        }) e:derive true}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:rule [ a r:DerivedRule; r:gives {
        {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    () fgcm:expandClosureGmu true.
                    () fgcm:expandClosureGsigma true.
                    (false) fgcm:handleUnknownVariables true.
                    (:patient008 1) fgcm:iterate 7 .
                    ("nb_setval" "IterationsNeeded" 7) e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            ("nb_getval" "IterationsNeeded" 7) e:derive true.
            :patient008 fgcm:gpi (dco:SimpleAcutePyelonephritis 0.9352648821737795 0.9575078825964835 7).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                    (:patient008 dco:SimpleAcutePyelonephritis) fl:gpi (var:x_0 var:x_1).
                }.
            } {
                0.9352648821737795 log:equalTo var:x_0.
                0.9575078825964835 log:equalTo var:x_1.
            } {
                0.9352648821737795 log:equalTo 0.9352648821737795 .
                0.9575078825964835 log:equalTo 0.9575078825964835.
            }) e:derive true.
        } => {
            ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:call {
                ("if_then_else" {
                    ("nb_getval" "fnet" "done") e:derive true.
                } true {
                    (";" {
                        () fgcm:expandClosureGmu true.
                        () fgcm:expandClosureGsigma true.
                        (false) fgcm:handleUnknownVariables true.
                        (:patient008 1) fgcm:iterate 7 .
                        ("nb_setval" "IterationsNeeded" 7) e:derive true.
                    } {
                        ("nb_setval" "fnet" "done") e:derive true.
                    }) e:derive true.
                }) e:derive true.
                ("nb_getval" "IterationsNeeded" 7) e:derive true.
                :patient008 fgcm:gpi (dco:SimpleAcutePyelonephritis 0.9352648821737795 0.9575078825964835 7).
                ("if_then_else" {
                    ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                        (:patient008 dco:SimpleAcutePyelonephritis) fl:gpi (var:x_0 var:x_1).
                    }.
                } {
                    0.9352648821737795 log:equalTo var:x_0.
                    0.9575078825964835 log:equalTo var:x_1.
                } {
                    0.9352648821737795 log:equalTo 0.9352648821737795 .
                    0.9575078825964835 log:equalTo 0.9575078825964835.
                }) e:derive true.
            }.
        }.
    }].

skolem:lemma43 a r:Inference;
    r:gives {
        ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:call {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    () fgcm:expandClosureGmu true.
                    () fgcm:expandClosureGsigma true.
                    (false) fgcm:handleUnknownVariables true.
                    (:patient008 1) fgcm:iterate 7 .
                    ("nb_setval" "IterationsNeeded" 7) e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            ("nb_getval" "IterationsNeeded" 7) e:derive true.
            :patient008 fgcm:gpi (dco:ComplicatedAcutePyelonephritis 0.3181937600103475 0.5 7).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                    (:patient008 dco:ComplicatedAcutePyelonephritis) fl:gpi (_:sk_0 _:sk_1).
                }.
            } {
                0.3181937600103475 log:equalTo _:sk_0.
                0.5 log:equalTo _:sk_1.
            } {
                0.3181937600103475 log:equalTo 0.3181937600103475 .
                0.5 log:equalTo 0.5.
            }) e:derive true.
        }.
    };
    r:evidence (
        [ a r:Fact; r:gives {("if_then_else" {
            ("nb_getval" "fnet" "done") e:derive true.
        } true {
            (";" {
                () fgcm:expandClosureGmu true.
                () fgcm:expandClosureGsigma true.
                (false) fgcm:handleUnknownVariables true.
                (:patient008 1) fgcm:iterate 7 .
                ("nb_setval" "IterationsNeeded" 7) e:derive true.
            } {
                ("nb_setval" "fnet" "done") e:derive true.
            }) e:derive true.
        }) e:derive true}]
        [ a r:Fact; r:gives {("nb_getval" "IterationsNeeded" 7) e:derive true}]
        [ a r:Fact; r:gives {:patient008 fgcm:gpi (dco:ComplicatedAcutePyelonephritis 0.3181937600103475 0.5 7)}]
        [ a r:Fact; r:gives {("if_then_else" {
            ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                (:patient008 dco:ComplicatedAcutePyelonephritis) fl:gpi (_:sk_0 _:sk_1).
            }.
        } {
            0.3181937600103475 log:equalTo _:sk_0.
            0.5 log:equalTo _:sk_1.
        } {
            0.3181937600103475 log:equalTo 0.3181937600103475 .
            0.5 log:equalTo 0.5.
        }) e:derive true}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:rule [ a r:DerivedRule; r:gives {
        {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    () fgcm:expandClosureGmu true.
                    () fgcm:expandClosureGsigma true.
                    (false) fgcm:handleUnknownVariables true.
                    (:patient008 1) fgcm:iterate 7 .
                    ("nb_setval" "IterationsNeeded" 7) e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            ("nb_getval" "IterationsNeeded" 7) e:derive true.
            :patient008 fgcm:gpi (dco:ComplicatedAcutePyelonephritis 0.3181937600103475 0.5 7).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                    (:patient008 dco:ComplicatedAcutePyelonephritis) fl:gpi (var:x_0 var:x_1).
                }.
            } {
                0.3181937600103475 log:equalTo var:x_0.
                0.5 log:equalTo var:x_1.
            } {
                0.3181937600103475 log:equalTo 0.3181937600103475 .
                0.5 log:equalTo 0.5.
            }) e:derive true.
        } => {
            ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:call {
                ("if_then_else" {
                    ("nb_getval" "fnet" "done") e:derive true.
                } true {
                    (";" {
                        () fgcm:expandClosureGmu true.
                        () fgcm:expandClosureGsigma true.
                        (false) fgcm:handleUnknownVariables true.
                        (:patient008 1) fgcm:iterate 7 .
                        ("nb_setval" "IterationsNeeded" 7) e:derive true.
                    } {
                        ("nb_setval" "fnet" "done") e:derive true.
                    }) e:derive true.
                }) e:derive true.
                ("nb_getval" "IterationsNeeded" 7) e:derive true.
                :patient008 fgcm:gpi (dco:ComplicatedAcutePyelonephritis 0.3181937600103475 0.5 7).
                ("if_then_else" {
                    ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                        (:patient008 dco:ComplicatedAcutePyelonephritis) fl:gpi (var:x_0 var:x_1).
                    }.
                } {
                    0.3181937600103475 log:equalTo var:x_0.
                    0.5 log:equalTo var:x_1.
                } {
                    0.3181937600103475 log:equalTo 0.3181937600103475 .
                    0.5 log:equalTo 0.5.
                }) e:derive true.
            }.
        }.
    }].

skolem:lemma44 a r:Inference;
    r:gives {
        ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:call {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    () fgcm:expandClosureGmu true.
                    () fgcm:expandClosureGsigma true.
                    (false) fgcm:handleUnknownVariables true.
                    (:patient008 1) fgcm:iterate 7 .
                    ("nb_setval" "IterationsNeeded" 7) e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            ("nb_getval" "IterationsNeeded" 7) e:derive true.
            :patient008 fgcm:gpi (dco:PregnancyUrinaryTractInfection 0.6968116667552052 0.7501016004674532 7).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                    (:patient008 dco:PregnancyUrinaryTractInfection) fl:gpi (_:sk_0 _:sk_1).
                }.
            } {
                0.6968116667552052 log:equalTo _:sk_0.
                0.7501016004674532 log:equalTo _:sk_1.
            } {
                0.6968116667552052 log:equalTo 0.6968116667552052 .
                0.7501016004674532 log:equalTo 0.7501016004674532.
            }) e:derive true.
        }.
    };
    r:evidence (
        [ a r:Fact; r:gives {("if_then_else" {
            ("nb_getval" "fnet" "done") e:derive true.
        } true {
            (";" {
                () fgcm:expandClosureGmu true.
                () fgcm:expandClosureGsigma true.
                (false) fgcm:handleUnknownVariables true.
                (:patient008 1) fgcm:iterate 7 .
                ("nb_setval" "IterationsNeeded" 7) e:derive true.
            } {
                ("nb_setval" "fnet" "done") e:derive true.
            }) e:derive true.
        }) e:derive true}]
        [ a r:Fact; r:gives {("nb_getval" "IterationsNeeded" 7) e:derive true}]
        [ a r:Fact; r:gives {:patient008 fgcm:gpi (dco:PregnancyUrinaryTractInfection 0.6968116667552052 0.7501016004674532 7)}]
        [ a r:Fact; r:gives {("if_then_else" {
            ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                (:patient008 dco:PregnancyUrinaryTractInfection) fl:gpi (_:sk_0 _:sk_1).
            }.
        } {
            0.6968116667552052 log:equalTo _:sk_0.
            0.7501016004674532 log:equalTo _:sk_1.
        } {
            0.6968116667552052 log:equalTo 0.6968116667552052 .
            0.7501016004674532 log:equalTo 0.7501016004674532.
        }) e:derive true}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:rule [ a r:DerivedRule; r:gives {
        {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    () fgcm:expandClosureGmu true.
                    () fgcm:expandClosureGsigma true.
                    (false) fgcm:handleUnknownVariables true.
                    (:patient008 1) fgcm:iterate 7 .
                    ("nb_setval" "IterationsNeeded" 7) e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            ("nb_getval" "IterationsNeeded" 7) e:derive true.
            :patient008 fgcm:gpi (dco:PregnancyUrinaryTractInfection 0.6968116667552052 0.7501016004674532 7).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                    (:patient008 dco:PregnancyUrinaryTractInfection) fl:gpi (var:x_0 var:x_1).
                }.
            } {
                0.6968116667552052 log:equalTo var:x_0.
                0.7501016004674532 log:equalTo var:x_1.
            } {
                0.6968116667552052 log:equalTo 0.6968116667552052 .
                0.7501016004674532 log:equalTo 0.7501016004674532.
            }) e:derive true.
        } => {
            ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:call {
                ("if_then_else" {
                    ("nb_getval" "fnet" "done") e:derive true.
                } true {
                    (";" {
                        () fgcm:expandClosureGmu true.
                        () fgcm:expandClosureGsigma true.
                        (false) fgcm:handleUnknownVariables true.
                        (:patient008 1) fgcm:iterate 7 .
                        ("nb_setval" "IterationsNeeded" 7) e:derive true.
                    } {
                        ("nb_setval" "fnet" "done") e:derive true.
                    }) e:derive true.
                }) e:derive true.
                ("nb_getval" "IterationsNeeded" 7) e:derive true.
                :patient008 fgcm:gpi (dco:PregnancyUrinaryTractInfection 0.6968116667552052 0.7501016004674532 7).
                ("if_then_else" {
                    ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                        (:patient008 dco:PregnancyUrinaryTractInfection) fl:gpi (var:x_0 var:x_1).
                    }.
                } {
                    0.6968116667552052 log:equalTo var:x_0.
                    0.7501016004674532 log:equalTo var:x_1.
                } {
                    0.6968116667552052 log:equalTo 0.6968116667552052 .
                    0.7501016004674532 log:equalTo 0.7501016004674532.
                }) e:derive true.
            }.
        }.
    }].

skolem:lemma45 a r:Inference;
    r:gives {
        ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:call {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    () fgcm:expandClosureGmu true.
                    () fgcm:expandClosureGsigma true.
                    (false) fgcm:handleUnknownVariables true.
                    (:patient008 1) fgcm:iterate 7 .
                    ("nb_setval" "IterationsNeeded" 7) e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            ("nb_getval" "IterationsNeeded" 7) e:derive true.
            :patient008 fgcm:gpi (dco:ObstructiveUropathy 0.3181937600103475 0.3181937600103475 7).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                    (:patient008 dco:ObstructiveUropathy) fl:gpi (_:sk_0 _:sk_1).
                }.
            } {
                0.3181937600103475 log:equalTo _:sk_0.
                0.3181937600103475 log:equalTo _:sk_1.
            } {
                0.3181937600103475 log:equalTo 0.3181937600103475 .
                0.3181937600103475 log:equalTo 0.3181937600103475.
            }) e:derive true.
        }.
    };
    r:evidence (
        [ a r:Fact; r:gives {("if_then_else" {
            ("nb_getval" "fnet" "done") e:derive true.
        } true {
            (";" {
                () fgcm:expandClosureGmu true.
                () fgcm:expandClosureGsigma true.
                (false) fgcm:handleUnknownVariables true.
                (:patient008 1) fgcm:iterate 7 .
                ("nb_setval" "IterationsNeeded" 7) e:derive true.
            } {
                ("nb_setval" "fnet" "done") e:derive true.
            }) e:derive true.
        }) e:derive true}]
        [ a r:Fact; r:gives {("nb_getval" "IterationsNeeded" 7) e:derive true}]
        [ a r:Fact; r:gives {:patient008 fgcm:gpi (dco:ObstructiveUropathy 0.3181937600103475 0.3181937600103475 7)}]
        [ a r:Fact; r:gives {("if_then_else" {
            ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                (:patient008 dco:ObstructiveUropathy) fl:gpi (_:sk_0 _:sk_1).
            }.
        } {
            0.3181937600103475 log:equalTo _:sk_0.
            0.3181937600103475 log:equalTo _:sk_1.
        } {
            0.3181937600103475 log:equalTo 0.3181937600103475 .
            0.3181937600103475 log:equalTo 0.3181937600103475.
        }) e:derive true}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:rule [ a r:DerivedRule; r:gives {
        {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    () fgcm:expandClosureGmu true.
                    () fgcm:expandClosureGsigma true.
                    (false) fgcm:handleUnknownVariables true.
                    (:patient008 1) fgcm:iterate 7 .
                    ("nb_setval" "IterationsNeeded" 7) e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            ("nb_getval" "IterationsNeeded" 7) e:derive true.
            :patient008 fgcm:gpi (dco:ObstructiveUropathy 0.3181937600103475 0.3181937600103475 7).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                    (:patient008 dco:ObstructiveUropathy) fl:gpi (var:x_0 var:x_1).
                }.
            } {
                0.3181937600103475 log:equalTo var:x_0.
                0.3181937600103475 log:equalTo var:x_1.
            } {
                0.3181937600103475 log:equalTo 0.3181937600103475 .
                0.3181937600103475 log:equalTo 0.3181937600103475.
            }) e:derive true.
        } => {
            ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:call {
                ("if_then_else" {
                    ("nb_getval" "fnet" "done") e:derive true.
                } true {
                    (";" {
                        () fgcm:expandClosureGmu true.
                        () fgcm:expandClosureGsigma true.
                        (false) fgcm:handleUnknownVariables true.
                        (:patient008 1) fgcm:iterate 7 .
                        ("nb_setval" "IterationsNeeded" 7) e:derive true.
                    } {
                        ("nb_setval" "fnet" "done") e:derive true.
                    }) e:derive true.
                }) e:derive true.
                ("nb_getval" "IterationsNeeded" 7) e:derive true.
                :patient008 fgcm:gpi (dco:ObstructiveUropathy 0.3181937600103475 0.3181937600103475 7).
                ("if_then_else" {
                    ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                        (:patient008 dco:ObstructiveUropathy) fl:gpi (var:x_0 var:x_1).
                    }.
                } {
                    0.3181937600103475 log:equalTo var:x_0.
                    0.3181937600103475 log:equalTo var:x_1.
                } {
                    0.3181937600103475 log:equalTo 0.3181937600103475 .
                    0.3181937600103475 log:equalTo 0.3181937600103475.
                }) e:derive true.
            }.
        }.
    }].

skolem:lemma46 a r:Inference;
    r:gives {
        ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:call {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    () fgcm:expandClosureGmu true.
                    () fgcm:expandClosureGsigma true.
                    (false) fgcm:handleUnknownVariables true.
                    (:patient008 1) fgcm:iterate 7 .
                    ("nb_setval" "IterationsNeeded" 7) e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            ("nb_getval" "IterationsNeeded" 7) e:derive true.
            :patient008 fgcm:gpi (dco:PregnancyObstructiveUropathy 0.6497482370328734 0.6818062399896525 7).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                    (:patient008 dco:PregnancyObstructiveUropathy) fl:gpi (_:sk_0 _:sk_1).
                }.
            } {
                0.6497482370328734 log:equalTo _:sk_0.
                0.6818062399896525 log:equalTo _:sk_1.
            } {
                0.6497482370328734 log:equalTo 0.6497482370328734 .
                0.6818062399896525 log:equalTo 0.6818062399896525.
            }) e:derive true.
        }.
    };
    r:evidence (
        [ a r:Fact; r:gives {("if_then_else" {
            ("nb_getval" "fnet" "done") e:derive true.
        } true {
            (";" {
                () fgcm:expandClosureGmu true.
                () fgcm:expandClosureGsigma true.
                (false) fgcm:handleUnknownVariables true.
                (:patient008 1) fgcm:iterate 7 .
                ("nb_setval" "IterationsNeeded" 7) e:derive true.
            } {
                ("nb_setval" "fnet" "done") e:derive true.
            }) e:derive true.
        }) e:derive true}]
        [ a r:Fact; r:gives {("nb_getval" "IterationsNeeded" 7) e:derive true}]
        [ a r:Fact; r:gives {:patient008 fgcm:gpi (dco:PregnancyObstructiveUropathy 0.6497482370328734 0.6818062399896525 7)}]
        [ a r:Fact; r:gives {("if_then_else" {
            ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                (:patient008 dco:PregnancyObstructiveUropathy) fl:gpi (_:sk_0 _:sk_1).
            }.
        } {
            0.6497482370328734 log:equalTo _:sk_0.
            0.6818062399896525 log:equalTo _:sk_1.
        } {
            0.6497482370328734 log:equalTo 0.6497482370328734 .
            0.6818062399896525 log:equalTo 0.6818062399896525.
        }) e:derive true}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:rule [ a r:DerivedRule; r:gives {
        {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    () fgcm:expandClosureGmu true.
                    () fgcm:expandClosureGsigma true.
                    (false) fgcm:handleUnknownVariables true.
                    (:patient008 1) fgcm:iterate 7 .
                    ("nb_setval" "IterationsNeeded" 7) e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            ("nb_getval" "IterationsNeeded" 7) e:derive true.
            :patient008 fgcm:gpi (dco:PregnancyObstructiveUropathy 0.6497482370328734 0.6818062399896525 7).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                    (:patient008 dco:PregnancyObstructiveUropathy) fl:gpi (var:x_0 var:x_1).
                }.
            } {
                0.6497482370328734 log:equalTo var:x_0.
                0.6818062399896525 log:equalTo var:x_1.
            } {
                0.6497482370328734 log:equalTo 0.6497482370328734 .
                0.6818062399896525 log:equalTo 0.6818062399896525.
            }) e:derive true.
        } => {
            ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:call {
                ("if_then_else" {
                    ("nb_getval" "fnet" "done") e:derive true.
                } true {
                    (";" {
                        () fgcm:expandClosureGmu true.
                        () fgcm:expandClosureGsigma true.
                        (false) fgcm:handleUnknownVariables true.
                        (:patient008 1) fgcm:iterate 7 .
                        ("nb_setval" "IterationsNeeded" 7) e:derive true.
                    } {
                        ("nb_setval" "fnet" "done") e:derive true.
                    }) e:derive true.
                }) e:derive true.
                ("nb_getval" "IterationsNeeded" 7) e:derive true.
                :patient008 fgcm:gpi (dco:PregnancyObstructiveUropathy 0.6497482370328734 0.6818062399896525 7).
                ("if_then_else" {
                    ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                        (:patient008 dco:PregnancyObstructiveUropathy) fl:gpi (var:x_0 var:x_1).
                    }.
                } {
                    0.6497482370328734 log:equalTo var:x_0.
                    0.6818062399896525 log:equalTo var:x_1.
                } {
                    0.6497482370328734 log:equalTo 0.6497482370328734 .
                    0.6818062399896525 log:equalTo 0.6818062399896525.
                }) e:derive true.
            }.
        }.
    }].

skolem:lemma47 a r:Inference;
    r:gives {
        ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:call {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    () fgcm:expandClosureGmu true.
                    () fgcm:expandClosureGsigma true.
                    (false) fgcm:handleUnknownVariables true.
                    (:patient008 1) fgcm:iterate 7 .
                    ("nb_setval" "IterationsNeeded" 7) e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            ("nb_getval" "IterationsNeeded" 7) e:derive true.
            :patient008 fgcm:gpi (dco:ComplicatedAcutePregnancyPyelonephritis 0.5968726072149699 0.7501016004674533 7).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                    (:patient008 dco:ComplicatedAcutePregnancyPyelonephritis) fl:gpi (_:sk_0 _:sk_1).
                }.
            } {
                0.5968726072149699 log:equalTo _:sk_0.
                0.7501016004674533 log:equalTo _:sk_1.
            } {
                0.5968726072149699 log:equalTo 0.5968726072149699 .
                0.7501016004674533 log:equalTo 0.7501016004674533.
            }) e:derive true.
        }.
    };
    r:evidence (
        [ a r:Fact; r:gives {("if_then_else" {
            ("nb_getval" "fnet" "done") e:derive true.
        } true {
            (";" {
                () fgcm:expandClosureGmu true.
                () fgcm:expandClosureGsigma true.
                (false) fgcm:handleUnknownVariables true.
                (:patient008 1) fgcm:iterate 7 .
                ("nb_setval" "IterationsNeeded" 7) e:derive true.
            } {
                ("nb_setval" "fnet" "done") e:derive true.
            }) e:derive true.
        }) e:derive true}]
        [ a r:Fact; r:gives {("nb_getval" "IterationsNeeded" 7) e:derive true}]
        [ a r:Fact; r:gives {:patient008 fgcm:gpi (dco:ComplicatedAcutePregnancyPyelonephritis 0.5968726072149699 0.7501016004674533 7)}]
        [ a r:Fact; r:gives {("if_then_else" {
            ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                (:patient008 dco:ComplicatedAcutePregnancyPyelonephritis) fl:gpi (_:sk_0 _:sk_1).
            }.
        } {
            0.5968726072149699 log:equalTo _:sk_0.
            0.7501016004674533 log:equalTo _:sk_1.
        } {
            0.5968726072149699 log:equalTo 0.5968726072149699 .
            0.7501016004674533 log:equalTo 0.7501016004674533.
        }) e:derive true}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:rule [ a r:DerivedRule; r:gives {
        {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    () fgcm:expandClosureGmu true.
                    () fgcm:expandClosureGsigma true.
                    (false) fgcm:handleUnknownVariables true.
                    (:patient008 1) fgcm:iterate 7 .
                    ("nb_setval" "IterationsNeeded" 7) e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            ("nb_getval" "IterationsNeeded" 7) e:derive true.
            :patient008 fgcm:gpi (dco:ComplicatedAcutePregnancyPyelonephritis 0.5968726072149699 0.7501016004674533 7).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                    (:patient008 dco:ComplicatedAcutePregnancyPyelonephritis) fl:gpi (var:x_0 var:x_1).
                }.
            } {
                0.5968726072149699 log:equalTo var:x_0.
                0.7501016004674533 log:equalTo var:x_1.
            } {
                0.5968726072149699 log:equalTo 0.5968726072149699 .
                0.7501016004674533 log:equalTo 0.7501016004674533.
            }) e:derive true.
        } => {
            ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:call {
                ("if_then_else" {
                    ("nb_getval" "fnet" "done") e:derive true.
                } true {
                    (";" {
                        () fgcm:expandClosureGmu true.
                        () fgcm:expandClosureGsigma true.
                        (false) fgcm:handleUnknownVariables true.
                        (:patient008 1) fgcm:iterate 7 .
                        ("nb_setval" "IterationsNeeded" 7) e:derive true.
                    } {
                        ("nb_setval" "fnet" "done") e:derive true.
                    }) e:derive true.
                }) e:derive true.
                ("nb_getval" "IterationsNeeded" 7) e:derive true.
                :patient008 fgcm:gpi (dco:ComplicatedAcutePregnancyPyelonephritis 0.5968726072149699 0.7501016004674533 7).
                ("if_then_else" {
                    ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                        (:patient008 dco:ComplicatedAcutePregnancyPyelonephritis) fl:gpi (var:x_0 var:x_1).
                    }.
                } {
                    0.5968726072149699 log:equalTo var:x_0.
                    0.7501016004674533 log:equalTo var:x_1.
                } {
                    0.5968726072149699 log:equalTo 0.5968726072149699 .
                    0.7501016004674533 log:equalTo 0.7501016004674533.
                }) e:derive true.
            }.
        }.
    }].

skolem:lemma48 a r:Inference;
    r:gives {
        ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:call {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    () fgcm:expandClosureGmu true.
                    () fgcm:expandClosureGsigma true.
                    (false) fgcm:handleUnknownVariables true.
                    (:patient008 1) fgcm:iterate 7 .
                    ("nb_setval" "IterationsNeeded" 7) e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            ("nb_getval" "IterationsNeeded" 7) e:derive true.
            :patient008 fgcm:gpi (dco:AcuteProstatis 0.9950831899235624 0.9954629272837167 7).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                    (:patient008 dco:AcuteProstatis) fl:gpi (_:sk_0 _:sk_1).
                }.
            } {
                0.9950831899235624 log:equalTo _:sk_0.
                0.9954629272837167 log:equalTo _:sk_1.
            } {
                0.9950831899235624 log:equalTo 0.9950831899235624 .
                0.9954629272837167 log:equalTo 0.9954629272837167.
            }) e:derive true.
        }.
    };
    r:evidence (
        [ a r:Fact; r:gives {("if_then_else" {
            ("nb_getval" "fnet" "done") e:derive true.
        } true {
            (";" {
                () fgcm:expandClosureGmu true.
                () fgcm:expandClosureGsigma true.
                (false) fgcm:handleUnknownVariables true.
                (:patient008 1) fgcm:iterate 7 .
                ("nb_setval" "IterationsNeeded" 7) e:derive true.
            } {
                ("nb_setval" "fnet" "done") e:derive true.
            }) e:derive true.
        }) e:derive true}]
        [ a r:Fact; r:gives {("nb_getval" "IterationsNeeded" 7) e:derive true}]
        [ a r:Fact; r:gives {:patient008 fgcm:gpi (dco:AcuteProstatis 0.9950831899235624 0.9954629272837167 7)}]
        [ a r:Fact; r:gives {("if_then_else" {
            ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                (:patient008 dco:AcuteProstatis) fl:gpi (_:sk_0 _:sk_1).
            }.
        } {
            0.9950831899235624 log:equalTo _:sk_0.
            0.9954629272837167 log:equalTo _:sk_1.
        } {
            0.9950831899235624 log:equalTo 0.9950831899235624 .
            0.9954629272837167 log:equalTo 0.9954629272837167.
        }) e:derive true}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:rule [ a r:DerivedRule; r:gives {
        {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    () fgcm:expandClosureGmu true.
                    () fgcm:expandClosureGsigma true.
                    (false) fgcm:handleUnknownVariables true.
                    (:patient008 1) fgcm:iterate 7 .
                    ("nb_setval" "IterationsNeeded" 7) e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            ("nb_getval" "IterationsNeeded" 7) e:derive true.
            :patient008 fgcm:gpi (dco:AcuteProstatis 0.9950831899235624 0.9954629272837167 7).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                    (:patient008 dco:AcuteProstatis) fl:gpi (var:x_0 var:x_1).
                }.
            } {
                0.9950831899235624 log:equalTo var:x_0.
                0.9954629272837167 log:equalTo var:x_1.
            } {
                0.9950831899235624 log:equalTo 0.9950831899235624 .
                0.9954629272837167 log:equalTo 0.9954629272837167.
            }) e:derive true.
        } => {
            ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:call {
                ("if_then_else" {
                    ("nb_getval" "fnet" "done") e:derive true.
                } true {
                    (";" {
                        () fgcm:expandClosureGmu true.
                        () fgcm:expandClosureGsigma true.
                        (false) fgcm:handleUnknownVariables true.
                        (:patient008 1) fgcm:iterate 7 .
                        ("nb_setval" "IterationsNeeded" 7) e:derive true.
                    } {
                        ("nb_setval" "fnet" "done") e:derive true.
                    }) e:derive true.
                }) e:derive true.
                ("nb_getval" "IterationsNeeded" 7) e:derive true.
                :patient008 fgcm:gpi (dco:AcuteProstatis 0.9950831899235624 0.9954629272837167 7).
                ("if_then_else" {
                    ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                        (:patient008 dco:AcuteProstatis) fl:gpi (var:x_0 var:x_1).
                    }.
                } {
                    0.9950831899235624 log:equalTo var:x_0.
                    0.9954629272837167 log:equalTo var:x_1.
                } {
                    0.9950831899235624 log:equalTo 0.9950831899235624 .
                    0.9954629272837167 log:equalTo 0.9954629272837167.
                }) e:derive true.
            }.
        }.
    }].

skolem:lemma49 a r:Inference;
    r:gives {
        ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:call {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    () fgcm:expandClosureGmu true.
                    () fgcm:expandClosureGsigma true.
                    (false) fgcm:handleUnknownVariables true.
                    (:patient008 1) fgcm:iterate 7 .
                    ("nb_setval" "IterationsNeeded" 7) e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            ("nb_getval" "IterationsNeeded" 7) e:derive true.
            :patient008 fgcm:gpi (dco:Fever 0.8 1 7).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                    (:patient008 dco:Fever) fl:gpi (_:sk_0 _:sk_1).
                }.
            } {
                0.8 log:equalTo _:sk_0.
                1 log:equalTo _:sk_1.
            } {
                0.8 log:equalTo 0.8 .
                1 log:equalTo 1.
            }) e:derive true.
        }.
    };
    r:evidence (
        [ a r:Fact; r:gives {("if_then_else" {
            ("nb_getval" "fnet" "done") e:derive true.
        } true {
            (";" {
                () fgcm:expandClosureGmu true.
                () fgcm:expandClosureGsigma true.
                (false) fgcm:handleUnknownVariables true.
                (:patient008 1) fgcm:iterate 7 .
                ("nb_setval" "IterationsNeeded" 7) e:derive true.
            } {
                ("nb_setval" "fnet" "done") e:derive true.
            }) e:derive true.
        }) e:derive true}]
        [ a r:Fact; r:gives {("nb_getval" "IterationsNeeded" 7) e:derive true}]
        [ a r:Fact; r:gives {:patient008 fgcm:gpi (dco:Fever 0.8 1 7)}]
        [ a r:Fact; r:gives {("if_then_else" {
            ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                (:patient008 dco:Fever) fl:gpi (_:sk_0 _:sk_1).
            }.
        } {
            0.8 log:equalTo _:sk_0.
            1 log:equalTo _:sk_1.
        } {
            0.8 log:equalTo 0.8 .
            1 log:equalTo 1.
        }) e:derive true}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:rule [ a r:DerivedRule; r:gives {
        {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    () fgcm:expandClosureGmu true.
                    () fgcm:expandClosureGsigma true.
                    (false) fgcm:handleUnknownVariables true.
                    (:patient008 1) fgcm:iterate 7 .
                    ("nb_setval" "IterationsNeeded" 7) e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            ("nb_getval" "IterationsNeeded" 7) e:derive true.
            :patient008 fgcm:gpi (dco:Fever 0.8 1 7).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                    (:patient008 dco:Fever) fl:gpi (var:x_0 var:x_1).
                }.
            } {
                0.8 log:equalTo var:x_0.
                1 log:equalTo var:x_1.
            } {
                0.8 log:equalTo 0.8 .
                1 log:equalTo 1.
            }) e:derive true.
        } => {
            ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:call {
                ("if_then_else" {
                    ("nb_getval" "fnet" "done") e:derive true.
                } true {
                    (";" {
                        () fgcm:expandClosureGmu true.
                        () fgcm:expandClosureGsigma true.
                        (false) fgcm:handleUnknownVariables true.
                        (:patient008 1) fgcm:iterate 7 .
                        ("nb_setval" "IterationsNeeded" 7) e:derive true.
                    } {
                        ("nb_setval" "fnet" "done") e:derive true.
                    }) e:derive true.
                }) e:derive true.
                ("nb_getval" "IterationsNeeded" 7) e:derive true.
                :patient008 fgcm:gpi (dco:Fever 0.8 1 7).
                ("if_then_else" {
                    ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                        (:patient008 dco:Fever) fl:gpi (var:x_0 var:x_1).
                    }.
                } {
                    0.8 log:equalTo var:x_0.
                    1 log:equalTo var:x_1.
                } {
                    0.8 log:equalTo 0.8 .
                    1 log:equalTo 1.
                }) e:derive true.
            }.
        }.
    }].

skolem:lemma50 a r:Inference;
    r:gives {
        ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:call {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    () fgcm:expandClosureGmu true.
                    () fgcm:expandClosureGsigma true.
                    (false) fgcm:handleUnknownVariables true.
                    (:patient008 1) fgcm:iterate 7 .
                    ("nb_setval" "IterationsNeeded" 7) e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            ("nb_getval" "IterationsNeeded" 7) e:derive true.
            :patient008 fgcm:gpi (dco:UrineDipstickTest 1 1 7).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                    (:patient008 dco:UrineDipstickTest) fl:gpi (_:sk_0 _:sk_1).
                }.
            } {
                1 log:equalTo _:sk_0.
                1 log:equalTo _:sk_1.
            } {
                1 log:equalTo 1 .
                1 log:equalTo 1.
            }) e:derive true.
        }.
    };
    r:evidence (
        [ a r:Fact; r:gives {("if_then_else" {
            ("nb_getval" "fnet" "done") e:derive true.
        } true {
            (";" {
                () fgcm:expandClosureGmu true.
                () fgcm:expandClosureGsigma true.
                (false) fgcm:handleUnknownVariables true.
                (:patient008 1) fgcm:iterate 7 .
                ("nb_setval" "IterationsNeeded" 7) e:derive true.
            } {
                ("nb_setval" "fnet" "done") e:derive true.
            }) e:derive true.
        }) e:derive true}]
        [ a r:Fact; r:gives {("nb_getval" "IterationsNeeded" 7) e:derive true}]
        [ a r:Fact; r:gives {:patient008 fgcm:gpi (dco:UrineDipstickTest 1 1 7)}]
        [ a r:Fact; r:gives {("if_then_else" {
            ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                (:patient008 dco:UrineDipstickTest) fl:gpi (_:sk_0 _:sk_1).
            }.
        } {
            1 log:equalTo _:sk_0.
            1 log:equalTo _:sk_1.
        } {
            1 log:equalTo 1 .
            1 log:equalTo 1.
        }) e:derive true}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:rule [ a r:DerivedRule; r:gives {
        {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    () fgcm:expandClosureGmu true.
                    () fgcm:expandClosureGsigma true.
                    (false) fgcm:handleUnknownVariables true.
                    (:patient008 1) fgcm:iterate 7 .
                    ("nb_setval" "IterationsNeeded" 7) e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            ("nb_getval" "IterationsNeeded" 7) e:derive true.
            :patient008 fgcm:gpi (dco:UrineDipstickTest 1 1 7).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                    (:patient008 dco:UrineDipstickTest) fl:gpi (var:x_0 var:x_1).
                }.
            } {
                1 log:equalTo var:x_0.
                1 log:equalTo var:x_1.
            } {
                1 log:equalTo 1 .
                1 log:equalTo 1.
            }) e:derive true.
        } => {
            ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:call {
                ("if_then_else" {
                    ("nb_getval" "fnet" "done") e:derive true.
                } true {
                    (";" {
                        () fgcm:expandClosureGmu true.
                        () fgcm:expandClosureGsigma true.
                        (false) fgcm:handleUnknownVariables true.
                        (:patient008 1) fgcm:iterate 7 .
                        ("nb_setval" "IterationsNeeded" 7) e:derive true.
                    } {
                        ("nb_setval" "fnet" "done") e:derive true.
                    }) e:derive true.
                }) e:derive true.
                ("nb_getval" "IterationsNeeded" 7) e:derive true.
                :patient008 fgcm:gpi (dco:UrineDipstickTest 1 1 7).
                ("if_then_else" {
                    ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                        (:patient008 dco:UrineDipstickTest) fl:gpi (var:x_0 var:x_1).
                    }.
                } {
                    1 log:equalTo var:x_0.
                    1 log:equalTo var:x_1.
                } {
                    1 log:equalTo 1 .
                    1 log:equalTo 1.
                }) e:derive true.
            }.
        }.
    }].

skolem:lemma51 a r:Inference;
    r:gives {
        ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:call {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    () fgcm:expandClosureGmu true.
                    () fgcm:expandClosureGsigma true.
                    (false) fgcm:handleUnknownVariables true.
                    (:patient008 1) fgcm:iterate 7 .
                    ("nb_setval" "IterationsNeeded" 7) e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            ("nb_getval" "IterationsNeeded" 7) e:derive true.
            :patient008 fgcm:gpi (dco:Chills 1 1 7).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                    (:patient008 dco:Chills) fl:gpi (_:sk_0 _:sk_1).
                }.
            } {
                1 log:equalTo _:sk_0.
                1 log:equalTo _:sk_1.
            } {
                1 log:equalTo 1 .
                1 log:equalTo 1.
            }) e:derive true.
        }.
    };
    r:evidence (
        [ a r:Fact; r:gives {("if_then_else" {
            ("nb_getval" "fnet" "done") e:derive true.
        } true {
            (";" {
                () fgcm:expandClosureGmu true.
                () fgcm:expandClosureGsigma true.
                (false) fgcm:handleUnknownVariables true.
                (:patient008 1) fgcm:iterate 7 .
                ("nb_setval" "IterationsNeeded" 7) e:derive true.
            } {
                ("nb_setval" "fnet" "done") e:derive true.
            }) e:derive true.
        }) e:derive true}]
        [ a r:Fact; r:gives {("nb_getval" "IterationsNeeded" 7) e:derive true}]
        [ a r:Fact; r:gives {:patient008 fgcm:gpi (dco:Chills 1 1 7)}]
        [ a r:Fact; r:gives {("if_then_else" {
            ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                (:patient008 dco:Chills) fl:gpi (_:sk_0 _:sk_1).
            }.
        } {
            1 log:equalTo _:sk_0.
            1 log:equalTo _:sk_1.
        } {
            1 log:equalTo 1 .
            1 log:equalTo 1.
        }) e:derive true}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:rule [ a r:DerivedRule; r:gives {
        {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    () fgcm:expandClosureGmu true.
                    () fgcm:expandClosureGsigma true.
                    (false) fgcm:handleUnknownVariables true.
                    (:patient008 1) fgcm:iterate 7 .
                    ("nb_setval" "IterationsNeeded" 7) e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            ("nb_getval" "IterationsNeeded" 7) e:derive true.
            :patient008 fgcm:gpi (dco:Chills 1 1 7).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                    (:patient008 dco:Chills) fl:gpi (var:x_0 var:x_1).
                }.
            } {
                1 log:equalTo var:x_0.
                1 log:equalTo var:x_1.
            } {
                1 log:equalTo 1 .
                1 log:equalTo 1.
            }) e:derive true.
        } => {
            ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:call {
                ("if_then_else" {
                    ("nb_getval" "fnet" "done") e:derive true.
                } true {
                    (";" {
                        () fgcm:expandClosureGmu true.
                        () fgcm:expandClosureGsigma true.
                        (false) fgcm:handleUnknownVariables true.
                        (:patient008 1) fgcm:iterate 7 .
                        ("nb_setval" "IterationsNeeded" 7) e:derive true.
                    } {
                        ("nb_setval" "fnet" "done") e:derive true.
                    }) e:derive true.
                }) e:derive true.
                ("nb_getval" "IterationsNeeded" 7) e:derive true.
                :patient008 fgcm:gpi (dco:Chills 1 1 7).
                ("if_then_else" {
                    ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                        (:patient008 dco:Chills) fl:gpi (var:x_0 var:x_1).
                    }.
                } {
                    1 log:equalTo var:x_0.
                    1 log:equalTo var:x_1.
                } {
                    1 log:equalTo 1 .
                    1 log:equalTo 1.
                }) e:derive true.
            }.
        }.
    }].

skolem:lemma52 a r:Inference;
    r:gives {
        ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:call {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    () fgcm:expandClosureGmu true.
                    () fgcm:expandClosureGsigma true.
                    (false) fgcm:handleUnknownVariables true.
                    (:patient008 1) fgcm:iterate 7 .
                    ("nb_setval" "IterationsNeeded" 7) e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            ("nb_getval" "IterationsNeeded" 7) e:derive true.
            :patient008 fgcm:gpi (dco:DiabetesMellitus 0 0 7).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                    (:patient008 dco:DiabetesMellitus) fl:gpi (_:sk_0 _:sk_1).
                }.
            } {
                0 log:equalTo _:sk_0.
                0 log:equalTo _:sk_1.
            } {
                0 log:equalTo 0 .
                0 log:equalTo 0.
            }) e:derive true.
        }.
    };
    r:evidence (
        [ a r:Fact; r:gives {("if_then_else" {
            ("nb_getval" "fnet" "done") e:derive true.
        } true {
            (";" {
                () fgcm:expandClosureGmu true.
                () fgcm:expandClosureGsigma true.
                (false) fgcm:handleUnknownVariables true.
                (:patient008 1) fgcm:iterate 7 .
                ("nb_setval" "IterationsNeeded" 7) e:derive true.
            } {
                ("nb_setval" "fnet" "done") e:derive true.
            }) e:derive true.
        }) e:derive true}]
        [ a r:Fact; r:gives {("nb_getval" "IterationsNeeded" 7) e:derive true}]
        [ a r:Fact; r:gives {:patient008 fgcm:gpi (dco:DiabetesMellitus 0 0 7)}]
        [ a r:Fact; r:gives {("if_then_else" {
            ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                (:patient008 dco:DiabetesMellitus) fl:gpi (_:sk_0 _:sk_1).
            }.
        } {
            0 log:equalTo _:sk_0.
            0 log:equalTo _:sk_1.
        } {
            0 log:equalTo 0 .
            0 log:equalTo 0.
        }) e:derive true}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:rule [ a r:DerivedRule; r:gives {
        {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    () fgcm:expandClosureGmu true.
                    () fgcm:expandClosureGsigma true.
                    (false) fgcm:handleUnknownVariables true.
                    (:patient008 1) fgcm:iterate 7 .
                    ("nb_setval" "IterationsNeeded" 7) e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            ("nb_getval" "IterationsNeeded" 7) e:derive true.
            :patient008 fgcm:gpi (dco:DiabetesMellitus 0 0 7).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                    (:patient008 dco:DiabetesMellitus) fl:gpi (var:x_0 var:x_1).
                }.
            } {
                0 log:equalTo var:x_0.
                0 log:equalTo var:x_1.
            } {
                0 log:equalTo 0 .
                0 log:equalTo 0.
            }) e:derive true.
        } => {
            ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:call {
                ("if_then_else" {
                    ("nb_getval" "fnet" "done") e:derive true.
                } true {
                    (";" {
                        () fgcm:expandClosureGmu true.
                        () fgcm:expandClosureGsigma true.
                        (false) fgcm:handleUnknownVariables true.
                        (:patient008 1) fgcm:iterate 7 .
                        ("nb_setval" "IterationsNeeded" 7) e:derive true.
                    } {
                        ("nb_setval" "fnet" "done") e:derive true.
                    }) e:derive true.
                }) e:derive true.
                ("nb_getval" "IterationsNeeded" 7) e:derive true.
                :patient008 fgcm:gpi (dco:DiabetesMellitus 0 0 7).
                ("if_then_else" {
                    ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                        (:patient008 dco:DiabetesMellitus) fl:gpi (var:x_0 var:x_1).
                    }.
                } {
                    0 log:equalTo var:x_0.
                    0 log:equalTo var:x_1.
                } {
                    0 log:equalTo 0 .
                    0 log:equalTo 0.
                }) e:derive true.
            }.
        }.
    }].

skolem:lemma53 a r:Inference;
    r:gives {
        ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:call {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    () fgcm:expandClosureGmu true.
                    () fgcm:expandClosureGsigma true.
                    (false) fgcm:handleUnknownVariables true.
                    (:patient008 1) fgcm:iterate 7 .
                    ("nb_setval" "IterationsNeeded" 7) e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            ("nb_getval" "IterationsNeeded" 7) e:derive true.
            :patient008 fgcm:gpi (dco:Male 1 1 7).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                    (:patient008 dco:Male) fl:gpi (_:sk_0 _:sk_1).
                }.
            } {
                1 log:equalTo _:sk_0.
                1 log:equalTo _:sk_1.
            } {
                1 log:equalTo 1 .
                1 log:equalTo 1.
            }) e:derive true.
        }.
    };
    r:evidence (
        [ a r:Fact; r:gives {("if_then_else" {
            ("nb_getval" "fnet" "done") e:derive true.
        } true {
            (";" {
                () fgcm:expandClosureGmu true.
                () fgcm:expandClosureGsigma true.
                (false) fgcm:handleUnknownVariables true.
                (:patient008 1) fgcm:iterate 7 .
                ("nb_setval" "IterationsNeeded" 7) e:derive true.
            } {
                ("nb_setval" "fnet" "done") e:derive true.
            }) e:derive true.
        }) e:derive true}]
        [ a r:Fact; r:gives {("nb_getval" "IterationsNeeded" 7) e:derive true}]
        [ a r:Fact; r:gives {:patient008 fgcm:gpi (dco:Male 1 1 7)}]
        [ a r:Fact; r:gives {("if_then_else" {
            ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                (:patient008 dco:Male) fl:gpi (_:sk_0 _:sk_1).
            }.
        } {
            1 log:equalTo _:sk_0.
            1 log:equalTo _:sk_1.
        } {
            1 log:equalTo 1 .
            1 log:equalTo 1.
        }) e:derive true}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:rule [ a r:DerivedRule; r:gives {
        {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    () fgcm:expandClosureGmu true.
                    () fgcm:expandClosureGsigma true.
                    (false) fgcm:handleUnknownVariables true.
                    (:patient008 1) fgcm:iterate 7 .
                    ("nb_setval" "IterationsNeeded" 7) e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            ("nb_getval" "IterationsNeeded" 7) e:derive true.
            :patient008 fgcm:gpi (dco:Male 1 1 7).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                    (:patient008 dco:Male) fl:gpi (var:x_0 var:x_1).
                }.
            } {
                1 log:equalTo var:x_0.
                1 log:equalTo var:x_1.
            } {
                1 log:equalTo 1 .
                1 log:equalTo 1.
            }) e:derive true.
        } => {
            ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:call {
                ("if_then_else" {
                    ("nb_getval" "fnet" "done") e:derive true.
                } true {
                    (";" {
                        () fgcm:expandClosureGmu true.
                        () fgcm:expandClosureGsigma true.
                        (false) fgcm:handleUnknownVariables true.
                        (:patient008 1) fgcm:iterate 7 .
                        ("nb_setval" "IterationsNeeded" 7) e:derive true.
                    } {
                        ("nb_setval" "fnet" "done") e:derive true.
                    }) e:derive true.
                }) e:derive true.
                ("nb_getval" "IterationsNeeded" 7) e:derive true.
                :patient008 fgcm:gpi (dco:Male 1 1 7).
                ("if_then_else" {
                    ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                        (:patient008 dco:Male) fl:gpi (var:x_0 var:x_1).
                    }.
                } {
                    1 log:equalTo var:x_0.
                    1 log:equalTo var:x_1.
                } {
                    1 log:equalTo 1 .
                    1 log:equalTo 1.
                }) e:derive true.
            }.
        }.
    }].

skolem:lemma54 a r:Inference;
    r:gives {
        ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:call {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    () fgcm:expandClosureGmu true.
                    () fgcm:expandClosureGsigma true.
                    (false) fgcm:handleUnknownVariables true.
                    (:patient008 1) fgcm:iterate 7 .
                    ("nb_setval" "IterationsNeeded" 7) e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            ("nb_getval" "IterationsNeeded" 7) e:derive true.
            :patient008 fgcm:gpi (dco:Old 1 1 7).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                    (:patient008 dco:Old) fl:gpi (_:sk_0 _:sk_1).
                }.
            } {
                1 log:equalTo _:sk_0.
                1 log:equalTo _:sk_1.
            } {
                1 log:equalTo 1 .
                1 log:equalTo 1.
            }) e:derive true.
        }.
    };
    r:evidence (
        [ a r:Fact; r:gives {("if_then_else" {
            ("nb_getval" "fnet" "done") e:derive true.
        } true {
            (";" {
                () fgcm:expandClosureGmu true.
                () fgcm:expandClosureGsigma true.
                (false) fgcm:handleUnknownVariables true.
                (:patient008 1) fgcm:iterate 7 .
                ("nb_setval" "IterationsNeeded" 7) e:derive true.
            } {
                ("nb_setval" "fnet" "done") e:derive true.
            }) e:derive true.
        }) e:derive true}]
        [ a r:Fact; r:gives {("nb_getval" "IterationsNeeded" 7) e:derive true}]
        [ a r:Fact; r:gives {:patient008 fgcm:gpi (dco:Old 1 1 7)}]
        [ a r:Fact; r:gives {("if_then_else" {
            ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                (:patient008 dco:Old) fl:gpi (_:sk_0 _:sk_1).
            }.
        } {
            1 log:equalTo _:sk_0.
            1 log:equalTo _:sk_1.
        } {
            1 log:equalTo 1 .
            1 log:equalTo 1.
        }) e:derive true}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:rule [ a r:DerivedRule; r:gives {
        {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    () fgcm:expandClosureGmu true.
                    () fgcm:expandClosureGsigma true.
                    (false) fgcm:handleUnknownVariables true.
                    (:patient008 1) fgcm:iterate 7 .
                    ("nb_setval" "IterationsNeeded" 7) e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            ("nb_getval" "IterationsNeeded" 7) e:derive true.
            :patient008 fgcm:gpi (dco:Old 1 1 7).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                    (:patient008 dco:Old) fl:gpi (var:x_0 var:x_1).
                }.
            } {
                1 log:equalTo var:x_0.
                1 log:equalTo var:x_1.
            } {
                1 log:equalTo 1 .
                1 log:equalTo 1.
            }) e:derive true.
        } => {
            ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:call {
                ("if_then_else" {
                    ("nb_getval" "fnet" "done") e:derive true.
                } true {
                    (";" {
                        () fgcm:expandClosureGmu true.
                        () fgcm:expandClosureGsigma true.
                        (false) fgcm:handleUnknownVariables true.
                        (:patient008 1) fgcm:iterate 7 .
                        ("nb_setval" "IterationsNeeded" 7) e:derive true.
                    } {
                        ("nb_setval" "fnet" "done") e:derive true.
                    }) e:derive true.
                }) e:derive true.
                ("nb_getval" "IterationsNeeded" 7) e:derive true.
                :patient008 fgcm:gpi (dco:Old 1 1 7).
                ("if_then_else" {
                    ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                        (:patient008 dco:Old) fl:gpi (var:x_0 var:x_1).
                    }.
                } {
                    1 log:equalTo var:x_0.
                    1 log:equalTo var:x_1.
                } {
                    1 log:equalTo 1 .
                    1 log:equalTo 1.
                }) e:derive true.
            }.
        }.
    }].

skolem:lemma55 a r:Inference;
    r:gives {
        ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:call {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    () fgcm:expandClosureGmu true.
                    () fgcm:expandClosureGsigma true.
                    (false) fgcm:handleUnknownVariables true.
                    (:patient008 1) fgcm:iterate 7 .
                    ("nb_setval" "IterationsNeeded" 7) e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            ("nb_getval" "IterationsNeeded" 7) e:derive true.
            :patient008 fgcm:gpi (dco:Dysuria 1 1 7).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                    (:patient008 dco:Dysuria) fl:gpi (_:sk_0 _:sk_1).
                }.
            } {
                1 log:equalTo _:sk_0.
                1 log:equalTo _:sk_1.
            } {
                1 log:equalTo 1 .
                1 log:equalTo 1.
            }) e:derive true.
        }.
    };
    r:evidence (
        [ a r:Fact; r:gives {("if_then_else" {
            ("nb_getval" "fnet" "done") e:derive true.
        } true {
            (";" {
                () fgcm:expandClosureGmu true.
                () fgcm:expandClosureGsigma true.
                (false) fgcm:handleUnknownVariables true.
                (:patient008 1) fgcm:iterate 7 .
                ("nb_setval" "IterationsNeeded" 7) e:derive true.
            } {
                ("nb_setval" "fnet" "done") e:derive true.
            }) e:derive true.
        }) e:derive true}]
        [ a r:Fact; r:gives {("nb_getval" "IterationsNeeded" 7) e:derive true}]
        [ a r:Fact; r:gives {:patient008 fgcm:gpi (dco:Dysuria 1 1 7)}]
        [ a r:Fact; r:gives {("if_then_else" {
            ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                (:patient008 dco:Dysuria) fl:gpi (_:sk_0 _:sk_1).
            }.
        } {
            1 log:equalTo _:sk_0.
            1 log:equalTo _:sk_1.
        } {
            1 log:equalTo 1 .
            1 log:equalTo 1.
        }) e:derive true}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:rule [ a r:DerivedRule; r:gives {
        {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    () fgcm:expandClosureGmu true.
                    () fgcm:expandClosureGsigma true.
                    (false) fgcm:handleUnknownVariables true.
                    (:patient008 1) fgcm:iterate 7 .
                    ("nb_setval" "IterationsNeeded" 7) e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            ("nb_getval" "IterationsNeeded" 7) e:derive true.
            :patient008 fgcm:gpi (dco:Dysuria 1 1 7).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                    (:patient008 dco:Dysuria) fl:gpi (var:x_0 var:x_1).
                }.
            } {
                1 log:equalTo var:x_0.
                1 log:equalTo var:x_1.
            } {
                1 log:equalTo 1 .
                1 log:equalTo 1.
            }) e:derive true.
        } => {
            ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:call {
                ("if_then_else" {
                    ("nb_getval" "fnet" "done") e:derive true.
                } true {
                    (";" {
                        () fgcm:expandClosureGmu true.
                        () fgcm:expandClosureGsigma true.
                        (false) fgcm:handleUnknownVariables true.
                        (:patient008 1) fgcm:iterate 7 .
                        ("nb_setval" "IterationsNeeded" 7) e:derive true.
                    } {
                        ("nb_setval" "fnet" "done") e:derive true.
                    }) e:derive true.
                }) e:derive true.
                ("nb_getval" "IterationsNeeded" 7) e:derive true.
                :patient008 fgcm:gpi (dco:Dysuria 1 1 7).
                ("if_then_else" {
                    ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                        (:patient008 dco:Dysuria) fl:gpi (var:x_0 var:x_1).
                    }.
                } {
                    1 log:equalTo var:x_0.
                    1 log:equalTo var:x_1.
                } {
                    1 log:equalTo 1 .
                    1 log:equalTo 1.
                }) e:derive true.
            }.
        }.
    }].

skolem:lemma56 a r:Inference;
    r:gives {
        ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:call {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    () fgcm:expandClosureGmu true.
                    () fgcm:expandClosureGsigma true.
                    (false) fgcm:handleUnknownVariables true.
                    (:patient008 1) fgcm:iterate 7 .
                    ("nb_setval" "IterationsNeeded" 7) e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            ("nb_getval" "IterationsNeeded" 7) e:derive true.
            :patient008 fgcm:gpi (dco:DigitalRectalExamination 1 1 7).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                    (:patient008 dco:DigitalRectalExamination) fl:gpi (_:sk_0 _:sk_1).
                }.
            } {
                1 log:equalTo _:sk_0.
                1 log:equalTo _:sk_1.
            } {
                1 log:equalTo 1 .
                1 log:equalTo 1.
            }) e:derive true.
        }.
    };
    r:evidence (
        [ a r:Fact; r:gives {("if_then_else" {
            ("nb_getval" "fnet" "done") e:derive true.
        } true {
            (";" {
                () fgcm:expandClosureGmu true.
                () fgcm:expandClosureGsigma true.
                (false) fgcm:handleUnknownVariables true.
                (:patient008 1) fgcm:iterate 7 .
                ("nb_setval" "IterationsNeeded" 7) e:derive true.
            } {
                ("nb_setval" "fnet" "done") e:derive true.
            }) e:derive true.
        }) e:derive true}]
        [ a r:Fact; r:gives {("nb_getval" "IterationsNeeded" 7) e:derive true}]
        [ a r:Fact; r:gives {:patient008 fgcm:gpi (dco:DigitalRectalExamination 1 1 7)}]
        [ a r:Fact; r:gives {("if_then_else" {
            ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                (:patient008 dco:DigitalRectalExamination) fl:gpi (_:sk_0 _:sk_1).
            }.
        } {
            1 log:equalTo _:sk_0.
            1 log:equalTo _:sk_1.
        } {
            1 log:equalTo 1 .
            1 log:equalTo 1.
        }) e:derive true}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:rule [ a r:DerivedRule; r:gives {
        {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    () fgcm:expandClosureGmu true.
                    () fgcm:expandClosureGsigma true.
                    (false) fgcm:handleUnknownVariables true.
                    (:patient008 1) fgcm:iterate 7 .
                    ("nb_setval" "IterationsNeeded" 7) e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            ("nb_getval" "IterationsNeeded" 7) e:derive true.
            :patient008 fgcm:gpi (dco:DigitalRectalExamination 1 1 7).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                    (:patient008 dco:DigitalRectalExamination) fl:gpi (var:x_0 var:x_1).
                }.
            } {
                1 log:equalTo var:x_0.
                1 log:equalTo var:x_1.
            } {
                1 log:equalTo 1 .
                1 log:equalTo 1.
            }) e:derive true.
        } => {
            ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:call {
                ("if_then_else" {
                    ("nb_getval" "fnet" "done") e:derive true.
                } true {
                    (";" {
                        () fgcm:expandClosureGmu true.
                        () fgcm:expandClosureGsigma true.
                        (false) fgcm:handleUnknownVariables true.
                        (:patient008 1) fgcm:iterate 7 .
                        ("nb_setval" "IterationsNeeded" 7) e:derive true.
                    } {
                        ("nb_setval" "fnet" "done") e:derive true.
                    }) e:derive true.
                }) e:derive true.
                ("nb_getval" "IterationsNeeded" 7) e:derive true.
                :patient008 fgcm:gpi (dco:DigitalRectalExamination 1 1 7).
                ("if_then_else" {
                    ((<http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/patient.n3> <http://eyereasoner.github.io/eye/reasoning/fgcm/fgcm-model.n3>) 1) e:closure {
                        (:patient008 dco:DigitalRectalExamination) fl:gpi (var:x_0 var:x_1).
                    }.
                } {
                    1 log:equalTo var:x_0.
                    1 log:equalTo var:x_1.
                } {
                    1 log:equalTo 1 .
                    1 log:equalTo 1.
                }) e:derive true.
            }.
        }.
    }].


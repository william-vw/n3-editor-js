# Skolem machine example from http://skolemmachines.org/reports/SkolemMachines.pdf
#
# 2-Counter machine
# Example: R1 + R2 -> R1
# 1: jpz(R2,5,2)
# 2: dec(R2)
# 3: inc(R1)
# 4: goto(1)
# 5: halt

@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix : <http://example.org/ns#>.

# program
1 :instruction (:jpz 2 5 2).
2 :instruction (:dec 2 3 :x).
3 :instruction (:inc 1 4 :x).
4 :instruction (:goto 1 :x :x).
5 :instruction (:halt :x :x :x).

# data
0 :inc 1.
1 :inc 2.
2 :inc 3.
3 :inc 4.
4 :inc 5.
5 :inc 6.
6 :inc 7.
7 :inc 8.
8 :inc 9.
9 :inc 10.

1 :state (3 4). # START compute 3 + 4

# UNIVERSAL INTERPRETATION OF REGISTER INSTRUCTIONS
# :jpz
(_:PC _:R2 _:PA _:PB) log:onNegativeSurface {
    _:PC :state (0 _:R2).
    _:PC :instruction (:jpz 1 _:PA _:PB).
    () log:onNegativeSurface {
        _:PA :state (0 _:R2).
    }.
}.

(_:PC _:R1 _:R2 _:X _:PA _:PB) log:onNegativeSurface {
    _:PC :state (_:R1 _:R2).
    _:X :inc _:R1.
    _:PC :instruction (:jpz 1 _:PA _:PB).
    () log:onNegativeSurface {
        _:PB :state (_:R1 _:R2).
    }.
}.

(_:PC _:R1 _:PA _:PB) log:onNegativeSurface {
    _:PC :state (_:R1 0).
    _:PC :instruction (:jpz 2 _:PA _:PB).
    () log:onNegativeSurface {
        _:PA :state (_:R1 0).
    }.
}.

(_:PC _:R1 _:R2 _:X _:PA _:PB) log:onNegativeSurface {
    _:PC :state (_:R1 _:R2).
    _:X :inc _:R2.
    _:PC :instruction (:jpz 2 _:PA _:PB).
    () log:onNegativeSurface {
        _:PB :state (_:R1 _:R2).
    }.
}.

# :dec
(_:PC _:R1 _:R2 _:D _:PB) log:onNegativeSurface {
    _:PC :state (_:R1 _:R2).
    _:PC :instruction (:dec 1 _:PB :x).
    _:D :inc _:R1.
    () log:onNegativeSurface {
        _:PB :state (_:D _:R2).
    }.
}.

(_:PC _:R1 _:R2 _:D _:PB) log:onNegativeSurface {
    _:PC :state (_:R1 _:R2).
    _:PC :instruction (:dec 2 _:PB :x).
    _:D :inc _:R2.
    () log:onNegativeSurface {
        _:PB :state (_:R1 _:D).
    }.
}.

# inc
(_:PC _:R1 _:R2 _:I _:PB) log:onNegativeSurface {
    _:PC :state (_:R1 _:R2).
    _:PC :instruction (:inc 1 _:PB :x).
    _:R1 :inc _:I.
    () log:onNegativeSurface {
        _:PB :state (_:I _:R2).
    }.
}.

(_:PC _:R1 _:R2 _:I _:PB) log:onNegativeSurface {
    _:PC :state (_:R1 _:R2).
    _:PC :instruction (:inc 2 _:PB :x).
    _:R2 :inc _:I.
    () log:onNegativeSurface {
        _:PB :state (_:R1 _:I).
    }.
}.

# :goto
(_:PC _:R1 _:R2 _:PB) log:onNegativeSurface {
    _:PC :state (_:R1 _:R2).
    _:PC :instruction (:goto _:PB :x :x).
    () log:onNegativeSurface {
        _:PB :state (_:R1 _:R2).
    }.
}.

# Natural number generation via inc
#(_:X _:Y) log:onNegativeSurface {
#    _:X :inc _:Y.
#    (_:Z) log:onNegativeSurface {
#        _:Y :inc _:Z.
#    }.
#}.

# query
(_:PC _:R1 _:R2) log:onQuerySurface {
    _:PC :state (_:R1 _:R2).
    _:PC :instruction (:halt :x :x :x).
}.

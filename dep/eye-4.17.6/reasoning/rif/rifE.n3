@prefix skolem: <http://eyereasoner.github.io/.well-known/genid/8b98b360-9a70-4845-b52c-c675af60ad01#>.
@prefix r: <http://www.w3.org/2000/10/swap/reason#>.
@prefix pred: <http://www.w3.org/2007/rif-builtin-predicate#>.
@prefix : <http://eulersharp.sourceforge.net/2007/07test#>.
@prefix func: <http://www.w3.org/2007/rif-builtin-function#>.
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>.
@prefix n3: <http://www.w3.org/2004/06/rei#>.
@prefix var: <http://eyereasoner.github.io/var#>.

skolem:proof a r:Proof, r:Conjunction;
    r:component skolem:lemma1;
    r:component skolem:lemma2;
    r:component skolem:lemma3;
    r:component skolem:lemma4;
    r:component skolem:lemma5;
    r:component skolem:lemma6;
    r:component skolem:lemma7;
    r:component skolem:lemma8;
    r:component skolem:lemma9;
    r:component skolem:lemma10;
    r:component skolem:lemma11;
    r:component skolem:lemma12;
    r:component skolem:lemma13;
    r:component skolem:lemma14;
    r:component skolem:lemma15;
    r:component skolem:lemma16;
    r:component skolem:lemma17;
    r:component skolem:lemma18;
    r:component skolem:lemma19;
    r:component skolem:lemma20;
    r:component skolem:lemma21;
    r:component skolem:lemma22;
    r:component skolem:lemma23;
    r:component skolem:lemma24;
    r:component skolem:lemma25;
    r:component skolem:lemma26;
    r:component skolem:lemma27;
    r:component skolem:lemma28;
    r:component skolem:lemma29;
    r:component skolem:lemma30;
    r:component skolem:lemma31;
    r:component skolem:lemma32;
    r:component skolem:lemma33;
    r:component skolem:lemma34;
    r:component skolem:lemma35;
    r:component skolem:lemma36;
    r:component skolem:lemma37;
    r:component skolem:lemma38;
    r:component skolem:lemma39;
    r:component skolem:lemma40;
    r:component skolem:lemma41;
    r:component skolem:lemma42;
    r:component skolem:lemma43;
    r:component skolem:lemma44;
    r:component skolem:lemma45;
    r:component skolem:lemma46;
    r:component skolem:lemma47;
    r:component skolem:lemma48;
    r:component skolem:lemma49;
    r:component skolem:lemma50;
    r:component skolem:lemma51;
    r:component skolem:lemma52;
    r:component skolem:lemma53;
    r:component skolem:lemma54;
    r:component skolem:lemma55;
    r:component skolem:lemma56;
    r:component skolem:lemma57;
    r:component skolem:lemma58;
    r:component skolem:lemma59;
    r:component skolem:lemma60;
    r:component skolem:lemma61;
    r:component skolem:lemma62;
    r:component skolem:lemma63;
    r:component skolem:lemma64;
    r:component skolem:lemma65;
    r:component skolem:lemma66;
    r:component skolem:lemma67;
    r:component skolem:lemma68;
    r:component skolem:lemma69;
    r:component skolem:lemma70;
    r:component skolem:lemma71;
    r:component skolem:lemma72;
    r:component skolem:lemma73;
    r:component skolem:lemma74;
    r:component skolem:lemma75;
    r:component skolem:lemma76;
    r:component skolem:lemma77;
    r:component skolem:lemma78;
    r:component skolem:lemma79;
    r:component skolem:lemma80;
    r:component skolem:lemma81;
    r:component skolem:lemma82;
    r:component skolem:lemma83;
    r:component skolem:lemma84;
    r:component skolem:lemma85;
    r:component skolem:lemma86;
    r:component skolem:lemma87;
    r:component skolem:lemma88;
    r:component skolem:lemma89;
    r:component skolem:lemma90;
    r:component skolem:lemma91;
    r:component skolem:lemma92;
    r:component skolem:lemma93;
    r:component skolem:lemma94;
    r:component skolem:lemma95;
    r:component skolem:lemma96;
    r:component skolem:lemma97;
    r:component skolem:lemma98;
    r:component skolem:lemma99;
    r:component skolem:lemma100;
    r:component skolem:lemma101;
    r:component skolem:lemma102;
    r:component skolem:lemma103;
    r:component skolem:lemma104;
    r:component skolem:lemma105;
    r:component skolem:lemma106;
    r:component skolem:lemma107;
    r:component skolem:lemma108;
    r:component skolem:lemma109;
    r:component skolem:lemma110;
    r:component skolem:lemma111;
    r:component skolem:lemma112;
    r:component skolem:lemma113;
    r:component skolem:lemma114;
    r:component skolem:lemma115;
    r:component skolem:lemma116;
    r:component skolem:lemma117;
    r:component skolem:lemma118;
    r:component skolem:lemma119;
    r:component skolem:lemma120;
    r:component skolem:lemma121;
    r:component skolem:lemma122;
    r:component skolem:lemma123;
    r:component skolem:lemma124;
    r:component skolem:lemma125;
    r:component skolem:lemma126;
    r:component skolem:lemma127;
    r:component skolem:lemma128;
    r:component skolem:lemma129;
    r:component skolem:lemma130;
    r:component skolem:lemma131;
    r:component skolem:lemma132;
    r:component skolem:lemma133;
    r:component skolem:lemma134;
    r:component skolem:lemma135;
    r:component skolem:lemma136;
    r:component skolem:lemma137;
    r:component skolem:lemma138;
    r:component skolem:lemma139;
    r:component skolem:lemma140;
    r:component skolem:lemma141;
    r:component skolem:lemma142;
    r:component skolem:lemma143;
    r:component skolem:lemma144;
    r:component skolem:lemma145;
    r:component skolem:lemma146;
    r:component skolem:lemma147;
    r:component skolem:lemma148;
    r:component skolem:lemma149;
    r:component skolem:lemma150;
    r:component skolem:lemma151;
    r:component skolem:lemma152;
    r:component skolem:lemma153;
    r:component skolem:lemma154;
    r:component skolem:lemma155;
    r:component skolem:lemma156;
    r:component skolem:lemma157;
    r:component skolem:lemma158;
    r:component skolem:lemma159;
    r:component skolem:lemma160;
    r:component skolem:lemma161;
    r:component skolem:lemma162;
    r:component skolem:lemma163;
    r:component skolem:lemma164;
    r:component skolem:lemma165;
    r:component skolem:lemma166;
    r:component skolem:lemma167;
    r:component skolem:lemma168;
    r:component skolem:lemma169;
    r:component skolem:lemma170;
    r:component skolem:lemma171;
    r:component skolem:lemma172;
    r:component skolem:lemma173;
    r:component skolem:lemma174;
    r:component skolem:lemma175;
    r:component skolem:lemma176;
    r:component skolem:lemma177;
    r:component skolem:lemma178;
    r:component skolem:lemma179;
    r:component skolem:lemma180;
    r:component skolem:lemma181;
    r:component skolem:lemma182;
    r:component skolem:lemma183;
    r:component skolem:lemma184;
    r:component skolem:lemma185;
    r:component skolem:lemma186;
    r:component skolem:lemma187;
    r:component skolem:lemma188;
    r:component skolem:lemma189;
    r:component skolem:lemma190;
    r:component skolem:lemma191;
    r:component skolem:lemma192;
    r:component skolem:lemma193;
    r:component skolem:lemma194;
    r:component skolem:lemma195;
    r:component skolem:lemma196;
    r:component skolem:lemma197;
    r:component skolem:lemma198;
    r:component skolem:lemma199;
    r:component skolem:lemma200;
    r:component skolem:lemma201;
    r:component skolem:lemma202;
    r:component skolem:lemma203;
    r:component skolem:lemma204;
    r:component skolem:lemma205;
    r:component skolem:lemma206;
    r:component skolem:lemma207;
    r:component skolem:lemma208;
    r:component skolem:lemma209;
    r:component skolem:lemma210;
    r:component skolem:lemma211;
    r:component skolem:lemma212;
    r:component skolem:lemma213;
    r:component skolem:lemma214;
    r:component skolem:lemma215;
    r:component skolem:lemma216;
    r:component skolem:lemma217;
    r:component skolem:lemma218;
    r:component skolem:lemma219;
    r:component skolem:lemma220;
    r:component skolem:lemma221;
    r:component skolem:lemma222;
    r:gives {
        {
            {
                ("chat"@fr "chien"@fr) pred:literal-not-identical true.
            } => {
                :literal-not-identical-1 :result true.
            }.
        } a :PASS.
        {
            {
                (:case "http://eulersharp.sourceforge.net/2007/07test#case") pred:iri-string true.
            } => {
                :iri-string-1 :result true.
            }.
        } a :PASS.
        {
            {
                (1 1) func:numeric-add 2.
            } => {
                :numeric-add-1 :result true.
            }.
        } a :PASS.
        {
            {
                (5 2) func:numeric-subtract 3.
            } => {
                :numeric-subtract-1 :result true.
            }.
        } a :PASS.
        {
            {
                (5 2) func:numeric-multiply 10.
            } => {
                :numeric-multiply-1 :result true.
            }.
        } a :PASS.
        {
            {
                (5 2) func:numeric-divide 2.5.
            } => {
                :numeric-divide-1 :result true.
            }.
        } a :PASS.
        {
            {
                (5 2) func:numeric-integer-divide 2.
            } => {
                :numeric-integer-divide-1 :result true.
            }.
        } a :PASS.
        {
            {
                (10 3) func:numeric-mod 1.
            } => {
                :numeric-mod-1 :result true.
            }.
        } a :PASS.
        {
            {
                (6 -2) func:numeric-mod 0.
            } => {
                :numeric-mod-2 :result true.
            }.
        } a :PASS.
        {
            {
                (4.5 1.2) func:numeric-mod 0.9000000000000004.
            } => {
                :numeric-mod-3 :result true.
            }.
        } a :PASS.
        {
            {
                (123.0 6.0) func:numeric-mod 3.0.
            } => {
                :numeric-mod-4 :result true.
            }.
        } a :PASS.
        {
            {
                (1 1.0) pred:numeric-equal true.
            } => {
                :numeric-equal-1 :result true.
            }.
        } a :PASS.
        {
            {
                (2.0 3) pred:numeric-less-than true.
            } => {
                :numeric-less-than-1 :result true.
            }.
        } a :PASS.
        {
            {
                (1.0 0) pred:numeric-greater-than true.
            } => {
                :numeric-greater-than-1 :result true.
            }.
        } a :PASS.
        {
            {
                (1 1.01) pred:numeric-not-equal true.
            } => {
                :numeric-not-equal-1 :result true.
            }.
        } a :PASS.
        {
            {
                (3 5.0) pred:numeric-less-than-or-equal true.
            } => {
                :numeric-less-than-or-equal-1 :result true.
            }.
        } a :PASS.
        {
            {
                (1.0 1) pred:numeric-greater-than-or-equal true.
            } => {
                :numeric-greater-than-or-equal-1 :result true.
            }.
        } a :PASS.
        {
            {
                (false) func:not true.
            } => {
                :not-1 :result true.
            }.
        } a :PASS.
        {
            {
                (true) func:not false.
            } => {
                :not-2 :result true.
            }.
        } a :PASS.
        {
            {
                (false false) pred:boolean-equal true.
            } => {
                :boolean-equal-1 :result true.
            }.
        } a :PASS.
        {
            {
                (false true) pred:boolean-less-than true.
            } => {
                :boolean-less-than-1 :result true.
            }.
        } a :PASS.
        {
            {
                (true false) pred:boolean-greater-than true.
            } => {
                :boolean-greater-than-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("abc" "abc") func:compare 0.
            } => {
                :compare-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("Straßen" "Straße") func:compare 1.
            } => {
                :compare-2 :result true.
            }.
        } a :PASS.
        {
            {
                ("Ingratitude, " "thou " "marble-hearted" " fiend!") func:concat "Ingratitude, thou marble-hearted fiend!".
            } => {
                :concat-1 :result true.
            }.
        } a :PASS.
        {
            {
                (("Now" "is" "the" "time" "...") " ") func:string-join "Now is the time ...".
            } => {
                :string-join-1 :result true.
            }.
        } a :PASS.
        {
            {
                (("Blow, " "blow, " "thou " "winter " "wind!") "") func:string-join "Blow, blow, thou winter wind!".
            } => {
                :string-join-2 :result true.
            }.
        } a :PASS.
        {
            {
                (() "separator") func:string-join "".
            } => {
                :string-join-3 :result true.
            }.
        } a :PASS.
        {
            {
                ("motor car" 6) func:substring " car".
            } => {
                :substring-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("metadata" 4 3) func:substring "ada".
            } => {
                :substring-2 :result true.
            }.
        } a :PASS.
        {
            {
                ("12345" 1.5 2.6) func:substring "234".
            } => {
                :substring-3 :result true.
            }.
        } a :PASS.
        {
            {
                ("12345" 0 3) func:substring "12".
            } => {
                :substring-4 :result true.
            }.
        } a :PASS.
        {
            {
                ("12345" 5 -3) func:substring "".
            } => {
                :substring-5 :result true.
            }.
        } a :PASS.
        {
            {
                ("12345" -3 5) func:substring "1".
            } => {
                :substring-6 :result true.
            }.
        } a :PASS.
        {
            {
                ("Harp not on that string, madam; that is past.") func:string-length 45.
            } => {
                :string-length-1 :result true.
            }.
        } a :PASS.
        {
            {
                (""@en) func:string-length 0.
            } => {
                :string-length-2 :result true.
            }.
        } a :PASS.
        {
            {
                ("abCd0") func:upper-case "ABCD0".
            } => {
                :upper-case-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("ABc!D") func:lower-case "abc!d".
            } => {
                :lower-case-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("00/Weather/CA/Los%20Angeles#ocean") func:encode-for-uri "00%2fWeather%2fCA%2fLos%2520Angeles%23ocean".
            } => {
                :encode-for-uri-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("~bébé") func:encode-for-uri "~b%c3%a9b%c3%a9".
            } => {
                :encode-for-uri-2 :result true.
            }.
        } a :PASS.
        {
            {
                ("100% organic") func:encode-for-uri "100%25%20organic".
            } => {
                :encode-for-uri-3 :result true.
            }.
        } a :PASS.
        {
            {
                ("tattoo" "attoo") func:substring-before "t".
            } => {
                :substring-before-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("tattoo" "tatto") func:substring-before "".
            } => {
                :substring-before-2 :result true.
            }.
        } a :PASS.
        {
            {
                ("tattoo" "tat") func:substring-after "too".
            } => {
                :substring-after-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("tattoo" "tattoo") func:substring-after "".
            } => {
                :substring-after-2 :result true.
            }.
        } a :PASS.
        {
            {
                ("tattoo" "t") pred:contains true.
            } => {
                :contains-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("tattoo" "tat") pred:starts-with true.
            } => {
                :starts-with-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("tattoo" "tattoo") pred:ends-with true.
            } => {
                :ends-with-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("abracadabra" "bra") pred:matches true.
            } => {
                :matches-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("abracadabra" "^a.*a$") pred:matches true.
            } => {
                :matches-2 :result true.
            }.
        } a :PASS.
        {
            {
                ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:year-from-dateTime 1999.
            } => {
                :year-from-dateTime-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:month-from-dateTime 5.
            } => {
                :month-from-dateTime-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:day-from-dateTime 31.
            } => {
                :day-from-dateTime-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:hours-from-dateTime 13.
            } => {
                :hours-from-dateTime-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:minutes-from-dateTime 20.
            } => {
                :minutes-from-dateTime-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:seconds-from-dateTime 0.
            } => {
                :seconds-from-dateTime-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("1999-05-31-05:00"^^xsd:date) func:year-from-date 1999.
            } => {
                :year-from-date-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("1999-05-31-05:00"^^xsd:date) func:month-from-date 5.
            } => {
                :month-from-date-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("1999-05-31-05:00"^^xsd:date) func:day-from-date 31.
            } => {
                :day-from-date-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("13:20:00-05:00"^^xsd:time) func:hours-from-time 13.
            } => {
                :hours-from-time-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("13:20:00-05:00"^^xsd:time) func:minutes-from-time 20.
            } => {
                :minutes-from-time-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("13:20:00-05:00"^^xsd:time) func:seconds-from-time 0.
            } => {
                :seconds-from-time-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("P20Y15M"^^xsd:yearMonthDuration) func:years-from-duration 21.
            } => {
                :years-from-duration-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("-P15M"^^xsd:yearMonthDuration) func:years-from-duration -1.
            } => {
                :years-from-duration-2 :result true.
            }.
        } a :PASS.
        {
            {
                ("-P2DT15H"^^xsd:dayTimeDuration) func:years-from-duration 0.
            } => {
                :years-from-duration-3 :result true.
            }.
        } a :PASS.
        {
            {
                ("P20Y15M"^^xsd:yearMonthDuration) func:months-from-duration 3.
            } => {
                :months-from-duration-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("-P20Y18M"^^xsd:yearMonthDuration) func:months-from-duration -6.
            } => {
                :months-from-duration-2 :result true.
            }.
        } a :PASS.
        {
            {
                ("-P2DT15H0M0S"^^xsd:dayTimeDuration) func:months-from-duration 0.
            } => {
                :months-from-duration-3 :result true.
            }.
        } a :PASS.
        {
            {
                ("P3DT10H"^^xsd:dayTimeDuration) func:days-from-duration 3.
            } => {
                :days-from-duration-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("P3DT55H"^^xsd:dayTimeDuration) func:days-from-duration 5.
            } => {
                :days-from-duration-2 :result true.
            }.
        } a :PASS.
        {
            {
                ("P3Y5M"^^xsd:yearMonthDuration) func:days-from-duration 0.
            } => {
                :days-from-duration-3 :result true.
            }.
        } a :PASS.
        {
            {
                ("P3DT10H"^^xsd:dayTimeDuration) func:hours-from-duration 10.
            } => {
                :hours-from-duration-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("P3DT12H32M12S"^^xsd:dayTimeDuration) func:hours-from-duration 12.
            } => {
                :hours-from-duration-2 :result true.
            }.
        } a :PASS.
        {
            {
                ("PT123H"^^xsd:dayTimeDuration) func:hours-from-duration 3.
            } => {
                :hours-from-duration-3 :result true.
            }.
        } a :PASS.
        {
            {
                ("-P3DT10H"^^xsd:dayTimeDuration) func:hours-from-duration -10.
            } => {
                :hours-from-duration-4 :result true.
            }.
        } a :PASS.
        {
            {
                ("P3DT10H"^^xsd:dayTimeDuration) func:minutes-from-duration 0.
            } => {
                :minutes-from-duration-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("-P5DT12H30M"^^xsd:dayTimeDuration) func:minutes-from-duration -30.
            } => {
                :minutes-from-duration-2 :result true.
            }.
        } a :PASS.
        {
            {
                ("P3DT10H12.5S"^^xsd:dayTimeDuration) func:seconds-from-duration 12.5.
            } => {
                :seconds-from-duration-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("-PT256S"^^xsd:dayTimeDuration) func:seconds-from-duration -16.0.
            } => {
                :seconds-from-duration-2 :result true.
            }.
        } a :PASS.
        {
            {
                ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:timezone-from-dateTime "-PT5H"^^xsd:dayTimeDuration.
            } => {
                :timezone-from-dateTime-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("2000-06-12T13:20:00Z"^^xsd:dateTime) func:timezone-from-dateTime "PT0S"^^xsd:dayTimeDuration.
            } => {
                :timezone-from-dateTime-2 :result true.
            }.
        } a :PASS.
        {
            {
                ("1999-05-31-05:00"^^xsd:date) func:timezone-from-date "-PT5H"^^xsd:dayTimeDuration.
            } => {
                :timezone-from-date-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("2000-06-12Z"^^xsd:date) func:timezone-from-date "PT0S"^^xsd:dayTimeDuration.
            } => {
                :timezone-from-date-2 :result true.
            }.
        } a :PASS.
        {
            {
                ("13:20:00-05:00"^^xsd:time) func:timezone-from-time "-PT5H"^^xsd:dayTimeDuration.
            } => {
                :timezone-from-time-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("13:20:00Z"^^xsd:time) func:timezone-from-time "PT0S"^^xsd:dayTimeDuration.
            } => {
                :timezone-from-time-2 :result true.
            }.
        } a :PASS.
        {
            {
                ("2000-10-30T06:12:00-05:00"^^xsd:dateTime "1999-11-28T09:00:00Z"^^xsd:dateTime) func:subtract-dateTimes "P337DT2H12M"^^xsd:dayTimeDuration.
            } => {
                :subtract-dateTimes-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("2000-10-30Z"^^xsd:date "1999-11-28Z"^^xsd:date) func:subtract-dates "P337D"^^xsd:dayTimeDuration.
            } => {
                :subtract-dates-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("11:12:00Z"^^xsd:time "04:00:00-05:00"^^xsd:time) func:subtract-times "PT2H12M"^^xsd:dayTimeDuration.
            } => {
                :subtract-times-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("11:00:00-05:00"^^xsd:time "21:30:00+05:30"^^xsd:time) func:subtract-times "PT0S"^^xsd:dayTimeDuration.
            } => {
                :subtract-times-2 :result true.
            }.
        } a :PASS.
        {
            {
                ("17:00:00-06:00"^^xsd:time "08:00:00+09:00"^^xsd:time) func:subtract-times "P1D"^^xsd:dayTimeDuration.
            } => {
                :subtract-times-3 :result true.
            }.
        } a :PASS.
        {
            {
                ("24:00:00"^^xsd:time "23:59:59"^^xsd:time) func:subtract-times "-PT23H59M59S"^^xsd:dayTimeDuration.
            } => {
                :subtract-times-4 :result true.
            }.
        } a :PASS.
        {
            {
                ("P2Y11M"^^xsd:yearMonthDuration "P3Y3M"^^xsd:yearMonthDuration) func:add-yearMonthDurations "P6Y2M"^^xsd:yearMonthDuration.
            } => {
                :add-yearMonthDurations-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("P2Y11M"^^xsd:yearMonthDuration "P3Y3M"^^xsd:yearMonthDuration) func:subtract-yearMonthDurations "-P4M"^^xsd:yearMonthDuration.
            } => {
                :subtract-yearMonthDurations-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("P2Y11M"^^xsd:yearMonthDuration 2.3) func:multiply-yearMonthDuration "P6Y9M"^^xsd:yearMonthDuration.
            } => {
                :multiply-yearMonthDuration-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("P2Y11M"^^xsd:yearMonthDuration 1.5) func:divide-yearMonthDuration "P1Y11M"^^xsd:yearMonthDuration.
            } => {
                :divide-yearMonthDuration-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("P3Y4M"^^xsd:yearMonthDuration "-P1Y4M"^^xsd:yearMonthDuration) func:divide-yearMonthDuration-by-yearMonthDuration -2.5.
            } => {
                :divide-yearMonthDuration-by-yearMonthDuration-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("P2DT12H5M"^^xsd:dayTimeDuration "P5DT12H"^^xsd:dayTimeDuration) func:add-dayTimeDurations "P8DT5M"^^xsd:dayTimeDuration.
            } => {
                :add-dayTimeDurations-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("P2DT12H"^^xsd:dayTimeDuration "P1DT10H30M"^^xsd:dayTimeDuration) func:subtract-dayTimeDurations "P1DT1H30M"^^xsd:dayTimeDuration.
            } => {
                :subtract-dayTimeDurations-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("PT2H10M"^^xsd:dayTimeDuration 2.1) func:multiply-dayTimeDuration "PT4H33M"^^xsd:dayTimeDuration.
            } => {
                :multiply-dayTimeDuration-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("P1DT2H30M10.5S"^^xsd:dayTimeDuration 1.5) func:divide-dayTimeDuration "PT17H40M7S"^^xsd:dayTimeDuration.
            } => {
                :divide-dayTimeDuration-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("PT4H33M"^^xsd:dayTimeDuration "PT2H10M"^^xsd:dayTimeDuration) func:divide-dayTimeDuration-by-dayTimeDuration 2.1.
            } => {
                :divide-dayTimeDuration-by-dayTimeDuration-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("2000-10-30T11:12:00Z"^^xsd:dateTime "P1Y2M"^^xsd:yearMonthDuration) func:add-yearMonthDuration-to-dateTime "2001-12-30T11:12:00Z"^^xsd:dateTime.
            } => {
                :add-yearMonthDuration-to-dateTime-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("2000-10-30Z"^^xsd:date "P1Y2M"^^xsd:yearMonthDuration) func:add-yearMonthDuration-to-date "2001-12-30Z"^^xsd:date.
            } => {
                :add-yearMonthDuration-to-date-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("2000-10-30T11:12:00Z"^^xsd:dateTime "P3DT1H15M"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-dateTime "2000-11-02T12:27:00Z"^^xsd:dateTime.
            } => {
                :add-dayTimeDuration-to-dateTime-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("2004-10-30Z"^^xsd:date "P2DT2H30M0S"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-date "2004-11-01Z"^^xsd:date.
            } => {
                :add-dayTimeDuration-to-date-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("11:12:00Z"^^xsd:time "P3DT1H15M"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-time "12:27:00Z"^^xsd:time.
            } => {
                :add-dayTimeDuration-to-time-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("2000-10-30T11:12:00Z"^^xsd:dateTime "P1Y2M"^^xsd:yearMonthDuration) func:subtract-yearMonthDuration-from-dateTime "1999-08-30T11:12:00Z"^^xsd:dateTime.
            } => {
                :subtract-yearMonthDuration-from-dateTime-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("2000-10-30Z"^^xsd:date "P1Y2M"^^xsd:yearMonthDuration) func:subtract-yearMonthDuration-from-date "1999-08-30Z"^^xsd:date.
            } => {
                :subtract-yearMonthDuration-from-date-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("2000-10-30T11:12:00Z"^^xsd:dateTime "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-dateTime "2000-10-27T09:57:00Z"^^xsd:dateTime.
            } => {
                :subtract-dayTimeDuration-from-dateTime-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("2000-10-30Z"^^xsd:date "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-date "2000-10-26Z"^^xsd:date.
            } => {
                :subtract-dayTimeDuration-from-date-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("11:12:00Z"^^xsd:time "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-time "09:57:00Z"^^xsd:time.
            } => {
                :subtract-dayTimeDuration-from-time-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("08:20:00-05:00"^^xsd:time "P23DT10H10M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-time "22:10:00-05:00"^^xsd:time.
            } => {
                :subtract-dayTimeDuration-from-time-2 :result true.
            }.
        } a :PASS.
        {
            {
                ("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-equal true.
            } => {
                :dateTime-equal-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T23:00:00+06:00"^^xsd:dateTime) pred:dateTime-equal true.
            } => {
                :dateTime-equal-2 :result true.
            }.
        } a :PASS.
        {
            {
                ("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T17:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal false.
            } => {
                :dateTime-equal-3 :result true.
            }.
        } a :PASS.
        {
            {
                ("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T12:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal true.
            } => {
                :dateTime-equal-4 :result true.
            }.
        } a :PASS.
        {
            {
                ("2002-04-02T23:00:00-04:00"^^xsd:dateTime "2002-04-03T02:00:00-01:00"^^xsd:dateTime) pred:dateTime-equal true.
            } => {
                :dateTime-equal-5 :result true.
            }.
        } a :PASS.
        {
            {
                ("1999-12-31T24:00:00-05:00"^^xsd:dateTime "2000-01-01T00:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal true.
            } => {
                :dateTime-equal-6 :result true.
            }.
        } a :PASS.
        {
            {
                ("2005-04-04T24:00:00-05:00"^^xsd:dateTime "2005-04-04T00:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal false.
            } => {
                :dateTime-equal-7 :result true.
            }.
        } a :PASS.
        {
            {
                ("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2010-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-less-than true.
            } => {
                :dateTime-less-than-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("2010-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-greater-than true.
            } => {
                :dateTime-greater-than-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-equal false.
            } => {
                :date-equal-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-equal true.
            } => {
                :date-equal-2 :result true.
            }.
        } a :PASS.
        {
            {
                ("2004-12-25Z"^^xsd:date "2004-12-25-05:00"^^xsd:date) pred:date-less-than true.
            } => {
                :date-less-than-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-less-than false.
            } => {
                :date-less-than-2 :result true.
            }.
        } a :PASS.
        {
            {
                ("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-greater-than true.
            } => {
                :date-greater-than-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-greater-than false.
            } => {
                :date-greater-than-2 :result true.
            }.
        } a :PASS.
        {
            {
                ("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-equal false.
            } => {
                :time-equal-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("21:30:00+10:30"^^xsd:time "06:00:00-05:00"^^xsd:time) pred:time-equal true.
            } => {
                :time-equal-2 :result true.
            }.
        } a :PASS.
        {
            {
                ("24:00:00+01:00"^^xsd:time "00:00:00+01:00"^^xsd:time) pred:time-equal true.
            } => {
                :time-equal-3 :result true.
            }.
        } a :PASS.
        {
            {
                ("12:00:00-05:00"^^xsd:time "23:00:00+06:00"^^xsd:time) pred:time-less-than false.
            } => {
                :time-less-than-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("11:00:00-05:00"^^xsd:time "17:00:00Z"^^xsd:time) pred:time-less-than true.
            } => {
                :time-less-than-2 :result true.
            }.
        } a :PASS.
        {
            {
                ("23:59:59-05:00"^^xsd:time "24:00:00-05:00"^^xsd:time) pred:time-less-than false.
            } => {
                :time-less-than-3 :result true.
            }.
        } a :PASS.
        {
            {
                ("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-greater-than false.
            } => {
                :time-greater-than-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("P1Y"^^xsd:duration "P12M"^^xsd:duration) pred:duration-equal true.
            } => {
                :duration-equal-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("PT24H"^^xsd:duration "P1D"^^xsd:duration) pred:duration-equal true.
            } => {
                :duration-equal-2 :result true.
            }.
        } a :PASS.
        {
            {
                ("P1Y"^^xsd:duration "P365D"^^xsd:duration) pred:duration-equal false.
            } => {
                :duration-equal-3 :result true.
            }.
        } a :PASS.
        {
            {
                ("P2Y0M0DT0H0M0S"^^xsd:duration "P24M"^^xsd:duration) pred:duration-equal true.
            } => {
                :duration-equal-4 :result true.
            }.
        } a :PASS.
        {
            {
                ("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-less-than true.
            } => {
                :dayTimeDuration-less-than-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-greater-than false.
            } => {
                :dayTimeDuration-greater-than-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-less-than true.
            } => {
                :yearMonthDuration-less-than-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-greater-than false.
            } => {
                :yearMonthDuration-greater-than-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-not-equal false.
            } => {
                :dateTime-not-equal-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-less-than-or-equal true.
            } => {
                :dateTime-less-than-or-equal-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("2010-04-02T12:00:00-01:00"^^xsd:dateTime "2010-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-greater-than-or-equal true.
            } => {
                :dateTime-greater-than-or-equal-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-not-equal true.
            } => {
                :date-not-equal-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-less-than-or-equal false.
            } => {
                :date-less-than-or-equal-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-greater-than-or-equal true.
            } => {
                :date-greater-than-or-equal-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-not-equal true.
            } => {
                :time-not-equal-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-less-than-or-equal true.
            } => {
                :time-less-than-or-equal-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-greater-than-or-equal false.
            } => {
                :time-greater-than-or-equal-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("P1Y"^^xsd:duration "P12M"^^xsd:duration) pred:duration-not-equal false.
            } => {
                :duration-not-equal-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-less-than-or-equal true.
            } => {
                :dayTimeDuration-less-than-or-equal-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-greater-than-or-equal false.
            } => {
                :dayTimeDuration-greater-than-or-equal-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-less-than-or-equal true.
            } => {
                :yearMonthDuration-less-than-or-equal-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-greater-than-or-equal false.
            } => {
                :yearMonthDuration-greater-than-or-equal-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("Family Guy") func:PlainLiteral-from-string-lang "Family Guy".
            } => {
                :PlainLiteral-from-string-lang-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("Family Guy" "EN") func:PlainLiteral-from-string-lang "Family Guy"@en.
            } => {
                :PlainLiteral-from-string-lang-2 :result true.
            }.
        } a :PASS.
        {
            {
                ("Family Guy") func:string-from-PlainLiteral "Family Guy".
            } => {
                :string-from-PlainLiteral-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("Family Guy"@en) func:string-from-PlainLiteral "Family Guy".
            } => {
                :string-from-PlainLiteral-2 :result true.
            }.
        } a :PASS.
        {
            {
                ("Family Guy") func:lang-from-PlainLiteral "".
            } => {
                :lang-from-PlainLiteral-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("Family Guy"@en) func:lang-from-PlainLiteral "en".
            } => {
                :lang-from-PlainLiteral-2 :result true.
            }.
        } a :PASS.
        {
            {
                ("Family Guy" "Mother") func:PlainLiteral-compare -1.
            } => {
                :PlainLiteral-compare-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("Family Guy"@en "Brother"@en) func:PlainLiteral-compare 1.
            } => {
                :PlainLiteral-compare-2 :result true.
            }.
        } a :PASS.
        {
            {
                ("Family Guy") func:PlainLiteral-length 10.
            } => {
                :PlainLiteral-length-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("Family Guy"@en) func:PlainLiteral-length 10.
            } => {
                :PlainLiteral-length-2 :result true.
            }.
        } a :PASS.
        {
            {
                ("Family Guy"@en "en") pred:matches-language-range true.
            } => {
                :matches-language-range-1 :result true.
            }.
        } a :PASS.
        {
            {
                ("Family Guy"@en-us "en-*") pred:matches-language-range true.
            } => {
                :matches-language-range-2 :result true.
            }.
        } a :PASS.
        {
            {
                ((:a :b :c :d)) pred:is-list true.
            } => {
                :is-list-1 :result true.
            }.
        } a :PASS.
        {
            {
                ((:a :b :c :d) :b) pred:list-contains true.
            } => {
                :list-contains-1 :result true.
            }.
        } a :PASS.
        {
            {
                (:a :b :c :d) func:make-list (:a :b :c :d).
            } => {
                :make-list-1 :result true.
            }.
        } a :PASS.
        {
            {
                ((:a :b :c :d)) func:count 4.
            } => {
                :count-1 :result true.
            }.
        } a :PASS.
        {
            {
                ((:a :b :c :d) 3) func:get :d.
            } => {
                :get-1 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2 3 4) 0 0) func:sublist ().
            } => {
                :sublist-1 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2 3 4) 0 1) func:sublist (0).
            } => {
                :sublist-2 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2 3 4) 0 4) func:sublist (0 1 2 3).
            } => {
                :sublist-3 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2 3 4) 0 5) func:sublist (0 1 2 3 4).
            } => {
                :sublist-4 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2 3 4) 0 10) func:sublist (0 1 2 3 4).
            } => {
                :sublist-5 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2 3 4) 0 -2) func:sublist (0 1 2).
            } => {
                :sublist-6 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2 3 4) 2 4) func:sublist (2 3).
            } => {
                :sublist-7 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2 3 4) 2 -2) func:sublist (2).
            } => {
                :sublist-9 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2 3 4) 0) func:sublist (0 1 2 3 4).
            } => {
                :sublist-9 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2 3 4) 3) func:sublist (3 4).
            } => {
                :sublist-10 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2 3 4) -2) func:sublist (3 4).
            } => {
                :sublist-11 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2) 3) func:append (0 1 2 3).
            } => {
                :append-1 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2) 3 4) func:append (0 1 2 3 4).
            } => {
                :append-2 :result true.
            }.
        } a :PASS.
        {
            {
                ((1 1) (1) (1) ((1))) func:append (1 1 (1) (1) ((1))).
            } => {
                :append-3 :result true.
            }.
        } a :PASS.
        {
            {
                (() 1) func:append (1).
            } => {
                :append-4 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2) (3 4 5)) func:concatenate (0 1 2 3 4 5).
            } => {
                :concatenate-1 :result true.
            }.
        } a :PASS.
        {
            {
                ((1 1) (1) (1)) func:concatenate (1 1 1 1).
            } => {
                :concatenate-2 :result true.
            }.
        } a :PASS.
        {
            {
                (()) func:concatenate ().
            } => {
                :concatenate-3 :result true.
            }.
        } a :PASS.
        {
            {
                (() (1) () (2) ((3))) func:concatenate (1 2 (3)).
            } => {
                :concatenate-4 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2 3 4) 0 99) func:insert-before (99 0 1 2 3 4).
            } => {
                :insert-before-1 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2 3 4) 1 99) func:insert-before (0 99 1 2 3 4).
            } => {
                :insert-before-2 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2 3 4) -1 99) func:insert-before (0 1 2 3 99 4).
            } => {
                :insert-before-3 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2 3 4) -5 99) func:insert-before (99 0 1 2 3 4).
            } => {
                :insert-before-4 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2 3 4) 0) func:remove (1 2 3 4).
            } => {
                :remove-1 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2 3 4) 1) func:remove (0 2 3 4).
            } => {
                :remove-2 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2 3 4) 4) func:remove (0 1 2 3).
            } => {
                :remove-3 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2 3 4) -1) func:remove (0 1 2 3).
            } => {
                :remove-4 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2 3 4) -5) func:remove (1 2 3 4).
            } => {
                :remove-5 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2 3 4)) func:reverse (4 3 2 1 0).
            } => {
                :reverse-1 :result true.
            }.
        } a :PASS.
        {
            {
                ((1)) func:reverse (1).
            } => {
                :reverse-2 :result true.
            }.
        } a :PASS.
        {
            {
                (()) func:reverse ().
            } => {
                :reverse-3 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2 3 4) 2) func:index-of (2).
            } => {
                :index-of-1 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2 3 4 5 2 2) 2) func:index-of (2 6 7).
            } => {
                :index-of-2 :result true.
            }.
        } a :PASS.
        {
            {
                ((2 2 3 4 5 2 2) 2) func:index-of (0 1 5 6).
            } => {
                :index-of-3 :result true.
            }.
        } a :PASS.
        {
            {
                ((2 2 3 4 5 2 2) 1) func:index-of ().
            } => {
                :index-of-4 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2 4) (3 4 5 6)) func:union (0 1 2 4 3 5 6).
            } => {
                :union-1 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2 3) (4)) func:union (0 1 2 3 4).
            } => {
                :union-2 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2 3) (3)) func:union (0 1 2 3).
            } => {
                :union-3 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 2 1 0)) func:union (0 2 1).
            } => {
                :union-4 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2 3 4)) func:distinct-values (0 1 2 3 4).
            } => {
                :distinct-values-1 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2 3 4 0 4)) func:distinct-values (0 1 2 3 4).
            } => {
                :distinct-values-2 :result true.
            }.
        } a :PASS.
        {
            {
                ((3 3 3)) func:distinct-values (3).
            } => {
                :distinct-values-3 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2 3 4) (1 3)) func:intersect (1 3).
            } => {
                :intersect-1 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2 3 4) (3 1)) func:intersect (1 3).
            } => {
                :intersect-2 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2 3 4) ()) func:intersect ().
            } => {
                :intersect-3 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2 3 4) (0 1 2 3 4 5 6)) func:intersect (0 1 2 3 4).
            } => {
                :intersect-4 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2 3 4) (1 3)) func:except (0 2 4).
            } => {
                :except-1 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2 3 4) ()) func:except (0 1 2 3 4).
            } => {
                :except-2 :result true.
            }.
        } a :PASS.
        {
            {
                ((0 1 2 3 4) (0 1 2 3 4)) func:except ().
            } => {
                :except-3 :result true.
            }.
        } a :PASS.
    }.

skolem:lemma1 a r:Inference;
    r:gives {
        {
            {
                ("chat"@fr "chien"@fr) pred:literal-not-identical true.
            } => {
                :literal-not-identical-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("chat"@fr "chien"@fr) pred:literal-not-identical true.
        } => {
            :literal-not-identical-1 :result true.
        }}]
        skolem:lemma223
        [ a r:Fact; r:gives {{
            ("chat"@fr "chien"@fr) pred:literal-not-identical true.
        } e:labelvars {
            ("chat"@fr "chien"@fr) pred:literal-not-identical true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("chat"@fr "chien"@fr) pred:literal-not-identical true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#literal-not-identical-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma2 a r:Inference;
    r:gives {
        {
            {
                (:case "http://eulersharp.sourceforge.net/2007/07test#case") pred:iri-string true.
            } => {
                :iri-string-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            (:case "http://eulersharp.sourceforge.net/2007/07test#case") pred:iri-string true.
        } => {
            :iri-string-1 :result true.
        }}]
        skolem:lemma225
        [ a r:Fact; r:gives {{
            (:case "http://eulersharp.sourceforge.net/2007/07test#case") pred:iri-string true.
        } e:labelvars {
            (:case "http://eulersharp.sourceforge.net/2007/07test#case") pred:iri-string true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        (:case "http://eulersharp.sourceforge.net/2007/07test#case") pred:iri-string true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#iri-string-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma3 a r:Inference;
    r:gives {
        {
            {
                (1 1) func:numeric-add 2.
            } => {
                :numeric-add-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            (1 1) func:numeric-add 2.
        } => {
            :numeric-add-1 :result true.
        }}]
        skolem:lemma226
        [ a r:Fact; r:gives {{
            (1 1) func:numeric-add 2.
        } e:labelvars {
            (1 1) func:numeric-add 2.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        (1 1) func:numeric-add 2.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#numeric-add-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma4 a r:Inference;
    r:gives {
        {
            {
                (5 2) func:numeric-subtract 3.
            } => {
                :numeric-subtract-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            (5 2) func:numeric-subtract 3.
        } => {
            :numeric-subtract-1 :result true.
        }}]
        skolem:lemma227
        [ a r:Fact; r:gives {{
            (5 2) func:numeric-subtract 3.
        } e:labelvars {
            (5 2) func:numeric-subtract 3.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        (5 2) func:numeric-subtract 3.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#numeric-subtract-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma5 a r:Inference;
    r:gives {
        {
            {
                (5 2) func:numeric-multiply 10.
            } => {
                :numeric-multiply-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            (5 2) func:numeric-multiply 10.
        } => {
            :numeric-multiply-1 :result true.
        }}]
        skolem:lemma228
        [ a r:Fact; r:gives {{
            (5 2) func:numeric-multiply 10.
        } e:labelvars {
            (5 2) func:numeric-multiply 10.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        (5 2) func:numeric-multiply 10.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#numeric-multiply-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma6 a r:Inference;
    r:gives {
        {
            {
                (5 2) func:numeric-divide 2.5.
            } => {
                :numeric-divide-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            (5 2) func:numeric-divide 2.5.
        } => {
            :numeric-divide-1 :result true.
        }}]
        skolem:lemma229
        [ a r:Fact; r:gives {{
            (5 2) func:numeric-divide 2.5.
        } e:labelvars {
            (5 2) func:numeric-divide 2.5.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        (5 2) func:numeric-divide 2.5.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#numeric-divide-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma7 a r:Inference;
    r:gives {
        {
            {
                (5 2) func:numeric-integer-divide 2.
            } => {
                :numeric-integer-divide-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            (5 2) func:numeric-integer-divide 2.
        } => {
            :numeric-integer-divide-1 :result true.
        }}]
        skolem:lemma230
        [ a r:Fact; r:gives {{
            (5 2) func:numeric-integer-divide 2.
        } e:labelvars {
            (5 2) func:numeric-integer-divide 2.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        (5 2) func:numeric-integer-divide 2.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#numeric-integer-divide-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma8 a r:Inference;
    r:gives {
        {
            {
                (10 3) func:numeric-mod 1.
            } => {
                :numeric-mod-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            (10 3) func:numeric-mod 1.
        } => {
            :numeric-mod-1 :result true.
        }}]
        skolem:lemma231
        [ a r:Fact; r:gives {{
            (10 3) func:numeric-mod 1.
        } e:labelvars {
            (10 3) func:numeric-mod 1.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        (10 3) func:numeric-mod 1.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#numeric-mod-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma9 a r:Inference;
    r:gives {
        {
            {
                (6 -2) func:numeric-mod 0.
            } => {
                :numeric-mod-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            (6 -2) func:numeric-mod 0.
        } => {
            :numeric-mod-2 :result true.
        }}]
        skolem:lemma232
        [ a r:Fact; r:gives {{
            (6 -2) func:numeric-mod 0.
        } e:labelvars {
            (6 -2) func:numeric-mod 0.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        (6 -2) func:numeric-mod 0.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#numeric-mod-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma10 a r:Inference;
    r:gives {
        {
            {
                (4.5 1.2) func:numeric-mod 0.9000000000000004.
            } => {
                :numeric-mod-3 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            (4.5 1.2) func:numeric-mod 0.9000000000000004.
        } => {
            :numeric-mod-3 :result true.
        }}]
        skolem:lemma233
        [ a r:Fact; r:gives {{
            (4.5 1.2) func:numeric-mod 0.9000000000000004.
        } e:labelvars {
            (4.5 1.2) func:numeric-mod 0.9000000000000004.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        (4.5 1.2) func:numeric-mod 0.9000000000000004.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#numeric-mod-3"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma11 a r:Inference;
    r:gives {
        {
            {
                (123.0 6.0) func:numeric-mod 3.0.
            } => {
                :numeric-mod-4 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            (123.0 6.0) func:numeric-mod 3.0.
        } => {
            :numeric-mod-4 :result true.
        }}]
        skolem:lemma234
        [ a r:Fact; r:gives {{
            (123.0 6.0) func:numeric-mod 3.0.
        } e:labelvars {
            (123.0 6.0) func:numeric-mod 3.0.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        (123.0 6.0) func:numeric-mod 3.0.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#numeric-mod-4"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma12 a r:Inference;
    r:gives {
        {
            {
                (1 1.0) pred:numeric-equal true.
            } => {
                :numeric-equal-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            (1 1.0) pred:numeric-equal true.
        } => {
            :numeric-equal-1 :result true.
        }}]
        skolem:lemma235
        [ a r:Fact; r:gives {{
            (1 1.0) pred:numeric-equal true.
        } e:labelvars {
            (1 1.0) pred:numeric-equal true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        (1 1.0) pred:numeric-equal true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#numeric-equal-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma13 a r:Inference;
    r:gives {
        {
            {
                (2.0 3) pred:numeric-less-than true.
            } => {
                :numeric-less-than-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            (2.0 3) pred:numeric-less-than true.
        } => {
            :numeric-less-than-1 :result true.
        }}]
        skolem:lemma236
        [ a r:Fact; r:gives {{
            (2.0 3) pred:numeric-less-than true.
        } e:labelvars {
            (2.0 3) pred:numeric-less-than true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        (2.0 3) pred:numeric-less-than true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#numeric-less-than-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma14 a r:Inference;
    r:gives {
        {
            {
                (1.0 0) pred:numeric-greater-than true.
            } => {
                :numeric-greater-than-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            (1.0 0) pred:numeric-greater-than true.
        } => {
            :numeric-greater-than-1 :result true.
        }}]
        skolem:lemma237
        [ a r:Fact; r:gives {{
            (1.0 0) pred:numeric-greater-than true.
        } e:labelvars {
            (1.0 0) pred:numeric-greater-than true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        (1.0 0) pred:numeric-greater-than true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#numeric-greater-than-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma15 a r:Inference;
    r:gives {
        {
            {
                (1 1.01) pred:numeric-not-equal true.
            } => {
                :numeric-not-equal-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            (1 1.01) pred:numeric-not-equal true.
        } => {
            :numeric-not-equal-1 :result true.
        }}]
        skolem:lemma238
        [ a r:Fact; r:gives {{
            (1 1.01) pred:numeric-not-equal true.
        } e:labelvars {
            (1 1.01) pred:numeric-not-equal true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        (1 1.01) pred:numeric-not-equal true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#numeric-not-equal-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma16 a r:Inference;
    r:gives {
        {
            {
                (3 5.0) pred:numeric-less-than-or-equal true.
            } => {
                :numeric-less-than-or-equal-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            (3 5.0) pred:numeric-less-than-or-equal true.
        } => {
            :numeric-less-than-or-equal-1 :result true.
        }}]
        skolem:lemma239
        [ a r:Fact; r:gives {{
            (3 5.0) pred:numeric-less-than-or-equal true.
        } e:labelvars {
            (3 5.0) pred:numeric-less-than-or-equal true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        (3 5.0) pred:numeric-less-than-or-equal true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#numeric-less-than-or-equal-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma17 a r:Inference;
    r:gives {
        {
            {
                (1.0 1) pred:numeric-greater-than-or-equal true.
            } => {
                :numeric-greater-than-or-equal-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            (1.0 1) pred:numeric-greater-than-or-equal true.
        } => {
            :numeric-greater-than-or-equal-1 :result true.
        }}]
        skolem:lemma240
        [ a r:Fact; r:gives {{
            (1.0 1) pred:numeric-greater-than-or-equal true.
        } e:labelvars {
            (1.0 1) pred:numeric-greater-than-or-equal true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        (1.0 1) pred:numeric-greater-than-or-equal true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#numeric-greater-than-or-equal-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma18 a r:Inference;
    r:gives {
        {
            {
                (false) func:not true.
            } => {
                :not-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            (false) func:not true.
        } => {
            :not-1 :result true.
        }}]
        skolem:lemma241
        [ a r:Fact; r:gives {{
            (false) func:not true.
        } e:labelvars {
            (false) func:not true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        (false) func:not true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#not-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma19 a r:Inference;
    r:gives {
        {
            {
                (true) func:not false.
            } => {
                :not-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            (true) func:not false.
        } => {
            :not-2 :result true.
        }}]
        skolem:lemma242
        [ a r:Fact; r:gives {{
            (true) func:not false.
        } e:labelvars {
            (true) func:not false.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        (true) func:not false.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#not-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma20 a r:Inference;
    r:gives {
        {
            {
                (false false) pred:boolean-equal true.
            } => {
                :boolean-equal-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            (false false) pred:boolean-equal true.
        } => {
            :boolean-equal-1 :result true.
        }}]
        skolem:lemma243
        [ a r:Fact; r:gives {{
            (false false) pred:boolean-equal true.
        } e:labelvars {
            (false false) pred:boolean-equal true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        (false false) pred:boolean-equal true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#boolean-equal-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma21 a r:Inference;
    r:gives {
        {
            {
                (false true) pred:boolean-less-than true.
            } => {
                :boolean-less-than-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            (false true) pred:boolean-less-than true.
        } => {
            :boolean-less-than-1 :result true.
        }}]
        skolem:lemma244
        [ a r:Fact; r:gives {{
            (false true) pred:boolean-less-than true.
        } e:labelvars {
            (false true) pred:boolean-less-than true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        (false true) pred:boolean-less-than true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#boolean-less-than-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma22 a r:Inference;
    r:gives {
        {
            {
                (true false) pred:boolean-greater-than true.
            } => {
                :boolean-greater-than-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            (true false) pred:boolean-greater-than true.
        } => {
            :boolean-greater-than-1 :result true.
        }}]
        skolem:lemma245
        [ a r:Fact; r:gives {{
            (true false) pred:boolean-greater-than true.
        } e:labelvars {
            (true false) pred:boolean-greater-than true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        (true false) pred:boolean-greater-than true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#boolean-greater-than-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma23 a r:Inference;
    r:gives {
        {
            {
                ("abc" "abc") func:compare 0.
            } => {
                :compare-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("abc" "abc") func:compare 0.
        } => {
            :compare-1 :result true.
        }}]
        skolem:lemma246
        [ a r:Fact; r:gives {{
            ("abc" "abc") func:compare 0.
        } e:labelvars {
            ("abc" "abc") func:compare 0.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("abc" "abc") func:compare 0.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#compare-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma24 a r:Inference;
    r:gives {
        {
            {
                ("Straßen" "Straße") func:compare 1.
            } => {
                :compare-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("Straßen" "Straße") func:compare 1.
        } => {
            :compare-2 :result true.
        }}]
        skolem:lemma247
        [ a r:Fact; r:gives {{
            ("Straßen" "Straße") func:compare 1.
        } e:labelvars {
            ("Straßen" "Straße") func:compare 1.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("Straßen" "Straße") func:compare 1.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#compare-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma25 a r:Inference;
    r:gives {
        {
            {
                ("Ingratitude, " "thou " "marble-hearted" " fiend!") func:concat "Ingratitude, thou marble-hearted fiend!".
            } => {
                :concat-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("Ingratitude, " "thou " "marble-hearted" " fiend!") func:concat "Ingratitude, thou marble-hearted fiend!".
        } => {
            :concat-1 :result true.
        }}]
        skolem:lemma248
        [ a r:Fact; r:gives {{
            ("Ingratitude, " "thou " "marble-hearted" " fiend!") func:concat "Ingratitude, thou marble-hearted fiend!".
        } e:labelvars {
            ("Ingratitude, " "thou " "marble-hearted" " fiend!") func:concat "Ingratitude, thou marble-hearted fiend!".
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("Ingratitude, " "thou " "marble-hearted" " fiend!") func:concat "Ingratitude, thou marble-hearted fiend!".
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#concat-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma26 a r:Inference;
    r:gives {
        {
            {
                (("Now" "is" "the" "time" "...") " ") func:string-join "Now is the time ...".
            } => {
                :string-join-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            (("Now" "is" "the" "time" "...") " ") func:string-join "Now is the time ...".
        } => {
            :string-join-1 :result true.
        }}]
        skolem:lemma249
        [ a r:Fact; r:gives {{
            (("Now" "is" "the" "time" "...") " ") func:string-join "Now is the time ...".
        } e:labelvars {
            (("Now" "is" "the" "time" "...") " ") func:string-join "Now is the time ...".
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        (("Now" "is" "the" "time" "...") " ") func:string-join "Now is the time ...".
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#string-join-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma27 a r:Inference;
    r:gives {
        {
            {
                (("Blow, " "blow, " "thou " "winter " "wind!") "") func:string-join "Blow, blow, thou winter wind!".
            } => {
                :string-join-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            (("Blow, " "blow, " "thou " "winter " "wind!") "") func:string-join "Blow, blow, thou winter wind!".
        } => {
            :string-join-2 :result true.
        }}]
        skolem:lemma250
        [ a r:Fact; r:gives {{
            (("Blow, " "blow, " "thou " "winter " "wind!") "") func:string-join "Blow, blow, thou winter wind!".
        } e:labelvars {
            (("Blow, " "blow, " "thou " "winter " "wind!") "") func:string-join "Blow, blow, thou winter wind!".
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        (("Blow, " "blow, " "thou " "winter " "wind!") "") func:string-join "Blow, blow, thou winter wind!".
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#string-join-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma28 a r:Inference;
    r:gives {
        {
            {
                (() "separator") func:string-join "".
            } => {
                :string-join-3 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            (() "separator") func:string-join "".
        } => {
            :string-join-3 :result true.
        }}]
        skolem:lemma251
        [ a r:Fact; r:gives {{
            (() "separator") func:string-join "".
        } e:labelvars {
            (() "separator") func:string-join "".
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        (() "separator") func:string-join "".
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#string-join-3"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma29 a r:Inference;
    r:gives {
        {
            {
                ("motor car" 6) func:substring " car".
            } => {
                :substring-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("motor car" 6) func:substring " car".
        } => {
            :substring-1 :result true.
        }}]
        skolem:lemma252
        [ a r:Fact; r:gives {{
            ("motor car" 6) func:substring " car".
        } e:labelvars {
            ("motor car" 6) func:substring " car".
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("motor car" 6) func:substring " car".
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#substring-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma30 a r:Inference;
    r:gives {
        {
            {
                ("metadata" 4 3) func:substring "ada".
            } => {
                :substring-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("metadata" 4 3) func:substring "ada".
        } => {
            :substring-2 :result true.
        }}]
        skolem:lemma253
        [ a r:Fact; r:gives {{
            ("metadata" 4 3) func:substring "ada".
        } e:labelvars {
            ("metadata" 4 3) func:substring "ada".
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("metadata" 4 3) func:substring "ada".
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#substring-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma31 a r:Inference;
    r:gives {
        {
            {
                ("12345" 1.5 2.6) func:substring "234".
            } => {
                :substring-3 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("12345" 1.5 2.6) func:substring "234".
        } => {
            :substring-3 :result true.
        }}]
        skolem:lemma254
        [ a r:Fact; r:gives {{
            ("12345" 1.5 2.6) func:substring "234".
        } e:labelvars {
            ("12345" 1.5 2.6) func:substring "234".
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("12345" 1.5 2.6) func:substring "234".
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#substring-3"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma32 a r:Inference;
    r:gives {
        {
            {
                ("12345" 0 3) func:substring "12".
            } => {
                :substring-4 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("12345" 0 3) func:substring "12".
        } => {
            :substring-4 :result true.
        }}]
        skolem:lemma255
        [ a r:Fact; r:gives {{
            ("12345" 0 3) func:substring "12".
        } e:labelvars {
            ("12345" 0 3) func:substring "12".
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("12345" 0 3) func:substring "12".
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#substring-4"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma33 a r:Inference;
    r:gives {
        {
            {
                ("12345" 5 -3) func:substring "".
            } => {
                :substring-5 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("12345" 5 -3) func:substring "".
        } => {
            :substring-5 :result true.
        }}]
        skolem:lemma256
        [ a r:Fact; r:gives {{
            ("12345" 5 -3) func:substring "".
        } e:labelvars {
            ("12345" 5 -3) func:substring "".
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("12345" 5 -3) func:substring "".
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#substring-5"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma34 a r:Inference;
    r:gives {
        {
            {
                ("12345" -3 5) func:substring "1".
            } => {
                :substring-6 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("12345" -3 5) func:substring "1".
        } => {
            :substring-6 :result true.
        }}]
        skolem:lemma257
        [ a r:Fact; r:gives {{
            ("12345" -3 5) func:substring "1".
        } e:labelvars {
            ("12345" -3 5) func:substring "1".
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("12345" -3 5) func:substring "1".
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#substring-6"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma35 a r:Inference;
    r:gives {
        {
            {
                ("Harp not on that string, madam; that is past.") func:string-length 45.
            } => {
                :string-length-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("Harp not on that string, madam; that is past.") func:string-length 45.
        } => {
            :string-length-1 :result true.
        }}]
        skolem:lemma258
        [ a r:Fact; r:gives {{
            ("Harp not on that string, madam; that is past.") func:string-length 45.
        } e:labelvars {
            ("Harp not on that string, madam; that is past.") func:string-length 45.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("Harp not on that string, madam; that is past.") func:string-length 45.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#string-length-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma36 a r:Inference;
    r:gives {
        {
            {
                (""@en) func:string-length 0.
            } => {
                :string-length-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            (""@en) func:string-length 0.
        } => {
            :string-length-2 :result true.
        }}]
        skolem:lemma259
        [ a r:Fact; r:gives {{
            (""@en) func:string-length 0.
        } e:labelvars {
            (""@en) func:string-length 0.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        (""@en) func:string-length 0.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#string-length-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma37 a r:Inference;
    r:gives {
        {
            {
                ("abCd0") func:upper-case "ABCD0".
            } => {
                :upper-case-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("abCd0") func:upper-case "ABCD0".
        } => {
            :upper-case-1 :result true.
        }}]
        skolem:lemma260
        [ a r:Fact; r:gives {{
            ("abCd0") func:upper-case "ABCD0".
        } e:labelvars {
            ("abCd0") func:upper-case "ABCD0".
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("abCd0") func:upper-case "ABCD0".
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#upper-case-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma38 a r:Inference;
    r:gives {
        {
            {
                ("ABc!D") func:lower-case "abc!d".
            } => {
                :lower-case-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("ABc!D") func:lower-case "abc!d".
        } => {
            :lower-case-1 :result true.
        }}]
        skolem:lemma261
        [ a r:Fact; r:gives {{
            ("ABc!D") func:lower-case "abc!d".
        } e:labelvars {
            ("ABc!D") func:lower-case "abc!d".
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("ABc!D") func:lower-case "abc!d".
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#lower-case-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma39 a r:Inference;
    r:gives {
        {
            {
                ("00/Weather/CA/Los%20Angeles#ocean") func:encode-for-uri "00%2fWeather%2fCA%2fLos%2520Angeles%23ocean".
            } => {
                :encode-for-uri-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("00/Weather/CA/Los%20Angeles#ocean") func:encode-for-uri "00%2fWeather%2fCA%2fLos%2520Angeles%23ocean".
        } => {
            :encode-for-uri-1 :result true.
        }}]
        skolem:lemma262
        [ a r:Fact; r:gives {{
            ("00/Weather/CA/Los%20Angeles#ocean") func:encode-for-uri "00%2fWeather%2fCA%2fLos%2520Angeles%23ocean".
        } e:labelvars {
            ("00/Weather/CA/Los%20Angeles#ocean") func:encode-for-uri "00%2fWeather%2fCA%2fLos%2520Angeles%23ocean".
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("00/Weather/CA/Los%20Angeles#ocean") func:encode-for-uri "00%2fWeather%2fCA%2fLos%2520Angeles%23ocean".
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#encode-for-uri-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma40 a r:Inference;
    r:gives {
        {
            {
                ("~bébé") func:encode-for-uri "~b%c3%a9b%c3%a9".
            } => {
                :encode-for-uri-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("~bébé") func:encode-for-uri "~b%c3%a9b%c3%a9".
        } => {
            :encode-for-uri-2 :result true.
        }}]
        skolem:lemma263
        [ a r:Fact; r:gives {{
            ("~bébé") func:encode-for-uri "~b%c3%a9b%c3%a9".
        } e:labelvars {
            ("~bébé") func:encode-for-uri "~b%c3%a9b%c3%a9".
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("~bébé") func:encode-for-uri "~b%c3%a9b%c3%a9".
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#encode-for-uri-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma41 a r:Inference;
    r:gives {
        {
            {
                ("100% organic") func:encode-for-uri "100%25%20organic".
            } => {
                :encode-for-uri-3 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("100% organic") func:encode-for-uri "100%25%20organic".
        } => {
            :encode-for-uri-3 :result true.
        }}]
        skolem:lemma264
        [ a r:Fact; r:gives {{
            ("100% organic") func:encode-for-uri "100%25%20organic".
        } e:labelvars {
            ("100% organic") func:encode-for-uri "100%25%20organic".
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("100% organic") func:encode-for-uri "100%25%20organic".
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#encode-for-uri-3"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma42 a r:Inference;
    r:gives {
        {
            {
                ("tattoo" "attoo") func:substring-before "t".
            } => {
                :substring-before-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("tattoo" "attoo") func:substring-before "t".
        } => {
            :substring-before-1 :result true.
        }}]
        skolem:lemma265
        [ a r:Fact; r:gives {{
            ("tattoo" "attoo") func:substring-before "t".
        } e:labelvars {
            ("tattoo" "attoo") func:substring-before "t".
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("tattoo" "attoo") func:substring-before "t".
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#substring-before-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma43 a r:Inference;
    r:gives {
        {
            {
                ("tattoo" "tatto") func:substring-before "".
            } => {
                :substring-before-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("tattoo" "tatto") func:substring-before "".
        } => {
            :substring-before-2 :result true.
        }}]
        skolem:lemma266
        [ a r:Fact; r:gives {{
            ("tattoo" "tatto") func:substring-before "".
        } e:labelvars {
            ("tattoo" "tatto") func:substring-before "".
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("tattoo" "tatto") func:substring-before "".
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#substring-before-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma44 a r:Inference;
    r:gives {
        {
            {
                ("tattoo" "tat") func:substring-after "too".
            } => {
                :substring-after-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("tattoo" "tat") func:substring-after "too".
        } => {
            :substring-after-1 :result true.
        }}]
        skolem:lemma267
        [ a r:Fact; r:gives {{
            ("tattoo" "tat") func:substring-after "too".
        } e:labelvars {
            ("tattoo" "tat") func:substring-after "too".
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("tattoo" "tat") func:substring-after "too".
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#substring-after-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma45 a r:Inference;
    r:gives {
        {
            {
                ("tattoo" "tattoo") func:substring-after "".
            } => {
                :substring-after-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("tattoo" "tattoo") func:substring-after "".
        } => {
            :substring-after-2 :result true.
        }}]
        skolem:lemma268
        [ a r:Fact; r:gives {{
            ("tattoo" "tattoo") func:substring-after "".
        } e:labelvars {
            ("tattoo" "tattoo") func:substring-after "".
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("tattoo" "tattoo") func:substring-after "".
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#substring-after-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma46 a r:Inference;
    r:gives {
        {
            {
                ("tattoo" "t") pred:contains true.
            } => {
                :contains-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("tattoo" "t") pred:contains true.
        } => {
            :contains-1 :result true.
        }}]
        skolem:lemma269
        [ a r:Fact; r:gives {{
            ("tattoo" "t") pred:contains true.
        } e:labelvars {
            ("tattoo" "t") pred:contains true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("tattoo" "t") pred:contains true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#contains-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma47 a r:Inference;
    r:gives {
        {
            {
                ("tattoo" "tat") pred:starts-with true.
            } => {
                :starts-with-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("tattoo" "tat") pred:starts-with true.
        } => {
            :starts-with-1 :result true.
        }}]
        skolem:lemma270
        [ a r:Fact; r:gives {{
            ("tattoo" "tat") pred:starts-with true.
        } e:labelvars {
            ("tattoo" "tat") pred:starts-with true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("tattoo" "tat") pred:starts-with true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#starts-with-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma48 a r:Inference;
    r:gives {
        {
            {
                ("tattoo" "tattoo") pred:ends-with true.
            } => {
                :ends-with-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("tattoo" "tattoo") pred:ends-with true.
        } => {
            :ends-with-1 :result true.
        }}]
        skolem:lemma271
        [ a r:Fact; r:gives {{
            ("tattoo" "tattoo") pred:ends-with true.
        } e:labelvars {
            ("tattoo" "tattoo") pred:ends-with true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("tattoo" "tattoo") pred:ends-with true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#ends-with-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma49 a r:Inference;
    r:gives {
        {
            {
                ("abracadabra" "bra") pred:matches true.
            } => {
                :matches-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("abracadabra" "bra") pred:matches true.
        } => {
            :matches-1 :result true.
        }}]
        skolem:lemma272
        [ a r:Fact; r:gives {{
            ("abracadabra" "bra") pred:matches true.
        } e:labelvars {
            ("abracadabra" "bra") pred:matches true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("abracadabra" "bra") pred:matches true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#matches-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma50 a r:Inference;
    r:gives {
        {
            {
                ("abracadabra" "^a.*a$") pred:matches true.
            } => {
                :matches-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("abracadabra" "^a.*a$") pred:matches true.
        } => {
            :matches-2 :result true.
        }}]
        skolem:lemma273
        [ a r:Fact; r:gives {{
            ("abracadabra" "^a.*a$") pred:matches true.
        } e:labelvars {
            ("abracadabra" "^a.*a$") pred:matches true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("abracadabra" "^a.*a$") pred:matches true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#matches-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma51 a r:Inference;
    r:gives {
        {
            {
                ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:year-from-dateTime 1999.
            } => {
                :year-from-dateTime-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:year-from-dateTime 1999.
        } => {
            :year-from-dateTime-1 :result true.
        }}]
        skolem:lemma274
        [ a r:Fact; r:gives {{
            ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:year-from-dateTime 1999.
        } e:labelvars {
            ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:year-from-dateTime 1999.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:year-from-dateTime 1999.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#year-from-dateTime-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma52 a r:Inference;
    r:gives {
        {
            {
                ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:month-from-dateTime 5.
            } => {
                :month-from-dateTime-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:month-from-dateTime 5.
        } => {
            :month-from-dateTime-1 :result true.
        }}]
        skolem:lemma275
        [ a r:Fact; r:gives {{
            ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:month-from-dateTime 5.
        } e:labelvars {
            ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:month-from-dateTime 5.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:month-from-dateTime 5.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#month-from-dateTime-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma53 a r:Inference;
    r:gives {
        {
            {
                ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:day-from-dateTime 31.
            } => {
                :day-from-dateTime-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:day-from-dateTime 31.
        } => {
            :day-from-dateTime-1 :result true.
        }}]
        skolem:lemma276
        [ a r:Fact; r:gives {{
            ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:day-from-dateTime 31.
        } e:labelvars {
            ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:day-from-dateTime 31.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:day-from-dateTime 31.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#day-from-dateTime-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma54 a r:Inference;
    r:gives {
        {
            {
                ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:hours-from-dateTime 13.
            } => {
                :hours-from-dateTime-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:hours-from-dateTime 13.
        } => {
            :hours-from-dateTime-1 :result true.
        }}]
        skolem:lemma277
        [ a r:Fact; r:gives {{
            ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:hours-from-dateTime 13.
        } e:labelvars {
            ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:hours-from-dateTime 13.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:hours-from-dateTime 13.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#hours-from-dateTime-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma55 a r:Inference;
    r:gives {
        {
            {
                ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:minutes-from-dateTime 20.
            } => {
                :minutes-from-dateTime-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:minutes-from-dateTime 20.
        } => {
            :minutes-from-dateTime-1 :result true.
        }}]
        skolem:lemma278
        [ a r:Fact; r:gives {{
            ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:minutes-from-dateTime 20.
        } e:labelvars {
            ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:minutes-from-dateTime 20.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:minutes-from-dateTime 20.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#minutes-from-dateTime-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma56 a r:Inference;
    r:gives {
        {
            {
                ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:seconds-from-dateTime 0.
            } => {
                :seconds-from-dateTime-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:seconds-from-dateTime 0.
        } => {
            :seconds-from-dateTime-1 :result true.
        }}]
        skolem:lemma279
        [ a r:Fact; r:gives {{
            ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:seconds-from-dateTime 0.
        } e:labelvars {
            ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:seconds-from-dateTime 0.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:seconds-from-dateTime 0.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#seconds-from-dateTime-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma57 a r:Inference;
    r:gives {
        {
            {
                ("1999-05-31-05:00"^^xsd:date) func:year-from-date 1999.
            } => {
                :year-from-date-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("1999-05-31-05:00"^^xsd:date) func:year-from-date 1999.
        } => {
            :year-from-date-1 :result true.
        }}]
        skolem:lemma280
        [ a r:Fact; r:gives {{
            ("1999-05-31-05:00"^^xsd:date) func:year-from-date 1999.
        } e:labelvars {
            ("1999-05-31-05:00"^^xsd:date) func:year-from-date 1999.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("1999-05-31-05:00"^^xsd:date) func:year-from-date 1999.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#year-from-date-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma58 a r:Inference;
    r:gives {
        {
            {
                ("1999-05-31-05:00"^^xsd:date) func:month-from-date 5.
            } => {
                :month-from-date-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("1999-05-31-05:00"^^xsd:date) func:month-from-date 5.
        } => {
            :month-from-date-1 :result true.
        }}]
        skolem:lemma281
        [ a r:Fact; r:gives {{
            ("1999-05-31-05:00"^^xsd:date) func:month-from-date 5.
        } e:labelvars {
            ("1999-05-31-05:00"^^xsd:date) func:month-from-date 5.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("1999-05-31-05:00"^^xsd:date) func:month-from-date 5.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#month-from-date-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma59 a r:Inference;
    r:gives {
        {
            {
                ("1999-05-31-05:00"^^xsd:date) func:day-from-date 31.
            } => {
                :day-from-date-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("1999-05-31-05:00"^^xsd:date) func:day-from-date 31.
        } => {
            :day-from-date-1 :result true.
        }}]
        skolem:lemma282
        [ a r:Fact; r:gives {{
            ("1999-05-31-05:00"^^xsd:date) func:day-from-date 31.
        } e:labelvars {
            ("1999-05-31-05:00"^^xsd:date) func:day-from-date 31.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("1999-05-31-05:00"^^xsd:date) func:day-from-date 31.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#day-from-date-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma60 a r:Inference;
    r:gives {
        {
            {
                ("13:20:00-05:00"^^xsd:time) func:hours-from-time 13.
            } => {
                :hours-from-time-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("13:20:00-05:00"^^xsd:time) func:hours-from-time 13.
        } => {
            :hours-from-time-1 :result true.
        }}]
        skolem:lemma283
        [ a r:Fact; r:gives {{
            ("13:20:00-05:00"^^xsd:time) func:hours-from-time 13.
        } e:labelvars {
            ("13:20:00-05:00"^^xsd:time) func:hours-from-time 13.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("13:20:00-05:00"^^xsd:time) func:hours-from-time 13.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#hours-from-time-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma61 a r:Inference;
    r:gives {
        {
            {
                ("13:20:00-05:00"^^xsd:time) func:minutes-from-time 20.
            } => {
                :minutes-from-time-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("13:20:00-05:00"^^xsd:time) func:minutes-from-time 20.
        } => {
            :minutes-from-time-1 :result true.
        }}]
        skolem:lemma284
        [ a r:Fact; r:gives {{
            ("13:20:00-05:00"^^xsd:time) func:minutes-from-time 20.
        } e:labelvars {
            ("13:20:00-05:00"^^xsd:time) func:minutes-from-time 20.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("13:20:00-05:00"^^xsd:time) func:minutes-from-time 20.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#minutes-from-time-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma62 a r:Inference;
    r:gives {
        {
            {
                ("13:20:00-05:00"^^xsd:time) func:seconds-from-time 0.
            } => {
                :seconds-from-time-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("13:20:00-05:00"^^xsd:time) func:seconds-from-time 0.
        } => {
            :seconds-from-time-1 :result true.
        }}]
        skolem:lemma285
        [ a r:Fact; r:gives {{
            ("13:20:00-05:00"^^xsd:time) func:seconds-from-time 0.
        } e:labelvars {
            ("13:20:00-05:00"^^xsd:time) func:seconds-from-time 0.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("13:20:00-05:00"^^xsd:time) func:seconds-from-time 0.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#seconds-from-time-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma63 a r:Inference;
    r:gives {
        {
            {
                ("P20Y15M"^^xsd:yearMonthDuration) func:years-from-duration 21.
            } => {
                :years-from-duration-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("P20Y15M"^^xsd:yearMonthDuration) func:years-from-duration 21.
        } => {
            :years-from-duration-1 :result true.
        }}]
        skolem:lemma286
        [ a r:Fact; r:gives {{
            ("P20Y15M"^^xsd:yearMonthDuration) func:years-from-duration 21.
        } e:labelvars {
            ("P20Y15M"^^xsd:yearMonthDuration) func:years-from-duration 21.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("P20Y15M"^^xsd:yearMonthDuration) func:years-from-duration 21.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#years-from-duration-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma64 a r:Inference;
    r:gives {
        {
            {
                ("-P15M"^^xsd:yearMonthDuration) func:years-from-duration -1.
            } => {
                :years-from-duration-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("-P15M"^^xsd:yearMonthDuration) func:years-from-duration -1.
        } => {
            :years-from-duration-2 :result true.
        }}]
        skolem:lemma287
        [ a r:Fact; r:gives {{
            ("-P15M"^^xsd:yearMonthDuration) func:years-from-duration -1.
        } e:labelvars {
            ("-P15M"^^xsd:yearMonthDuration) func:years-from-duration -1.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("-P15M"^^xsd:yearMonthDuration) func:years-from-duration -1.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#years-from-duration-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma65 a r:Inference;
    r:gives {
        {
            {
                ("-P2DT15H"^^xsd:dayTimeDuration) func:years-from-duration 0.
            } => {
                :years-from-duration-3 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("-P2DT15H"^^xsd:dayTimeDuration) func:years-from-duration 0.
        } => {
            :years-from-duration-3 :result true.
        }}]
        skolem:lemma288
        [ a r:Fact; r:gives {{
            ("-P2DT15H"^^xsd:dayTimeDuration) func:years-from-duration 0.
        } e:labelvars {
            ("-P2DT15H"^^xsd:dayTimeDuration) func:years-from-duration 0.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("-P2DT15H"^^xsd:dayTimeDuration) func:years-from-duration 0.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#years-from-duration-3"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma66 a r:Inference;
    r:gives {
        {
            {
                ("P20Y15M"^^xsd:yearMonthDuration) func:months-from-duration 3.
            } => {
                :months-from-duration-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("P20Y15M"^^xsd:yearMonthDuration) func:months-from-duration 3.
        } => {
            :months-from-duration-1 :result true.
        }}]
        skolem:lemma289
        [ a r:Fact; r:gives {{
            ("P20Y15M"^^xsd:yearMonthDuration) func:months-from-duration 3.
        } e:labelvars {
            ("P20Y15M"^^xsd:yearMonthDuration) func:months-from-duration 3.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("P20Y15M"^^xsd:yearMonthDuration) func:months-from-duration 3.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#months-from-duration-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma67 a r:Inference;
    r:gives {
        {
            {
                ("-P20Y18M"^^xsd:yearMonthDuration) func:months-from-duration -6.
            } => {
                :months-from-duration-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("-P20Y18M"^^xsd:yearMonthDuration) func:months-from-duration -6.
        } => {
            :months-from-duration-2 :result true.
        }}]
        skolem:lemma290
        [ a r:Fact; r:gives {{
            ("-P20Y18M"^^xsd:yearMonthDuration) func:months-from-duration -6.
        } e:labelvars {
            ("-P20Y18M"^^xsd:yearMonthDuration) func:months-from-duration -6.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("-P20Y18M"^^xsd:yearMonthDuration) func:months-from-duration -6.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#months-from-duration-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma68 a r:Inference;
    r:gives {
        {
            {
                ("-P2DT15H0M0S"^^xsd:dayTimeDuration) func:months-from-duration 0.
            } => {
                :months-from-duration-3 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("-P2DT15H0M0S"^^xsd:dayTimeDuration) func:months-from-duration 0.
        } => {
            :months-from-duration-3 :result true.
        }}]
        skolem:lemma291
        [ a r:Fact; r:gives {{
            ("-P2DT15H0M0S"^^xsd:dayTimeDuration) func:months-from-duration 0.
        } e:labelvars {
            ("-P2DT15H0M0S"^^xsd:dayTimeDuration) func:months-from-duration 0.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("-P2DT15H0M0S"^^xsd:dayTimeDuration) func:months-from-duration 0.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#months-from-duration-3"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma69 a r:Inference;
    r:gives {
        {
            {
                ("P3DT10H"^^xsd:dayTimeDuration) func:days-from-duration 3.
            } => {
                :days-from-duration-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("P3DT10H"^^xsd:dayTimeDuration) func:days-from-duration 3.
        } => {
            :days-from-duration-1 :result true.
        }}]
        skolem:lemma292
        [ a r:Fact; r:gives {{
            ("P3DT10H"^^xsd:dayTimeDuration) func:days-from-duration 3.
        } e:labelvars {
            ("P3DT10H"^^xsd:dayTimeDuration) func:days-from-duration 3.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("P3DT10H"^^xsd:dayTimeDuration) func:days-from-duration 3.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#days-from-duration-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma70 a r:Inference;
    r:gives {
        {
            {
                ("P3DT55H"^^xsd:dayTimeDuration) func:days-from-duration 5.
            } => {
                :days-from-duration-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("P3DT55H"^^xsd:dayTimeDuration) func:days-from-duration 5.
        } => {
            :days-from-duration-2 :result true.
        }}]
        skolem:lemma293
        [ a r:Fact; r:gives {{
            ("P3DT55H"^^xsd:dayTimeDuration) func:days-from-duration 5.
        } e:labelvars {
            ("P3DT55H"^^xsd:dayTimeDuration) func:days-from-duration 5.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("P3DT55H"^^xsd:dayTimeDuration) func:days-from-duration 5.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#days-from-duration-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma71 a r:Inference;
    r:gives {
        {
            {
                ("P3Y5M"^^xsd:yearMonthDuration) func:days-from-duration 0.
            } => {
                :days-from-duration-3 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("P3Y5M"^^xsd:yearMonthDuration) func:days-from-duration 0.
        } => {
            :days-from-duration-3 :result true.
        }}]
        skolem:lemma294
        [ a r:Fact; r:gives {{
            ("P3Y5M"^^xsd:yearMonthDuration) func:days-from-duration 0.
        } e:labelvars {
            ("P3Y5M"^^xsd:yearMonthDuration) func:days-from-duration 0.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("P3Y5M"^^xsd:yearMonthDuration) func:days-from-duration 0.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#days-from-duration-3"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma72 a r:Inference;
    r:gives {
        {
            {
                ("P3DT10H"^^xsd:dayTimeDuration) func:hours-from-duration 10.
            } => {
                :hours-from-duration-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("P3DT10H"^^xsd:dayTimeDuration) func:hours-from-duration 10.
        } => {
            :hours-from-duration-1 :result true.
        }}]
        skolem:lemma295
        [ a r:Fact; r:gives {{
            ("P3DT10H"^^xsd:dayTimeDuration) func:hours-from-duration 10.
        } e:labelvars {
            ("P3DT10H"^^xsd:dayTimeDuration) func:hours-from-duration 10.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("P3DT10H"^^xsd:dayTimeDuration) func:hours-from-duration 10.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#hours-from-duration-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma73 a r:Inference;
    r:gives {
        {
            {
                ("P3DT12H32M12S"^^xsd:dayTimeDuration) func:hours-from-duration 12.
            } => {
                :hours-from-duration-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("P3DT12H32M12S"^^xsd:dayTimeDuration) func:hours-from-duration 12.
        } => {
            :hours-from-duration-2 :result true.
        }}]
        skolem:lemma296
        [ a r:Fact; r:gives {{
            ("P3DT12H32M12S"^^xsd:dayTimeDuration) func:hours-from-duration 12.
        } e:labelvars {
            ("P3DT12H32M12S"^^xsd:dayTimeDuration) func:hours-from-duration 12.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("P3DT12H32M12S"^^xsd:dayTimeDuration) func:hours-from-duration 12.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#hours-from-duration-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma74 a r:Inference;
    r:gives {
        {
            {
                ("PT123H"^^xsd:dayTimeDuration) func:hours-from-duration 3.
            } => {
                :hours-from-duration-3 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("PT123H"^^xsd:dayTimeDuration) func:hours-from-duration 3.
        } => {
            :hours-from-duration-3 :result true.
        }}]
        skolem:lemma297
        [ a r:Fact; r:gives {{
            ("PT123H"^^xsd:dayTimeDuration) func:hours-from-duration 3.
        } e:labelvars {
            ("PT123H"^^xsd:dayTimeDuration) func:hours-from-duration 3.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("PT123H"^^xsd:dayTimeDuration) func:hours-from-duration 3.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#hours-from-duration-3"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma75 a r:Inference;
    r:gives {
        {
            {
                ("-P3DT10H"^^xsd:dayTimeDuration) func:hours-from-duration -10.
            } => {
                :hours-from-duration-4 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("-P3DT10H"^^xsd:dayTimeDuration) func:hours-from-duration -10.
        } => {
            :hours-from-duration-4 :result true.
        }}]
        skolem:lemma298
        [ a r:Fact; r:gives {{
            ("-P3DT10H"^^xsd:dayTimeDuration) func:hours-from-duration -10.
        } e:labelvars {
            ("-P3DT10H"^^xsd:dayTimeDuration) func:hours-from-duration -10.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("-P3DT10H"^^xsd:dayTimeDuration) func:hours-from-duration -10.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#hours-from-duration-4"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma76 a r:Inference;
    r:gives {
        {
            {
                ("P3DT10H"^^xsd:dayTimeDuration) func:minutes-from-duration 0.
            } => {
                :minutes-from-duration-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("P3DT10H"^^xsd:dayTimeDuration) func:minutes-from-duration 0.
        } => {
            :minutes-from-duration-1 :result true.
        }}]
        skolem:lemma299
        [ a r:Fact; r:gives {{
            ("P3DT10H"^^xsd:dayTimeDuration) func:minutes-from-duration 0.
        } e:labelvars {
            ("P3DT10H"^^xsd:dayTimeDuration) func:minutes-from-duration 0.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("P3DT10H"^^xsd:dayTimeDuration) func:minutes-from-duration 0.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#minutes-from-duration-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma77 a r:Inference;
    r:gives {
        {
            {
                ("-P5DT12H30M"^^xsd:dayTimeDuration) func:minutes-from-duration -30.
            } => {
                :minutes-from-duration-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("-P5DT12H30M"^^xsd:dayTimeDuration) func:minutes-from-duration -30.
        } => {
            :minutes-from-duration-2 :result true.
        }}]
        skolem:lemma300
        [ a r:Fact; r:gives {{
            ("-P5DT12H30M"^^xsd:dayTimeDuration) func:minutes-from-duration -30.
        } e:labelvars {
            ("-P5DT12H30M"^^xsd:dayTimeDuration) func:minutes-from-duration -30.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("-P5DT12H30M"^^xsd:dayTimeDuration) func:minutes-from-duration -30.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#minutes-from-duration-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma78 a r:Inference;
    r:gives {
        {
            {
                ("P3DT10H12.5S"^^xsd:dayTimeDuration) func:seconds-from-duration 12.5.
            } => {
                :seconds-from-duration-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("P3DT10H12.5S"^^xsd:dayTimeDuration) func:seconds-from-duration 12.5.
        } => {
            :seconds-from-duration-1 :result true.
        }}]
        skolem:lemma301
        [ a r:Fact; r:gives {{
            ("P3DT10H12.5S"^^xsd:dayTimeDuration) func:seconds-from-duration 12.5.
        } e:labelvars {
            ("P3DT10H12.5S"^^xsd:dayTimeDuration) func:seconds-from-duration 12.5.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("P3DT10H12.5S"^^xsd:dayTimeDuration) func:seconds-from-duration 12.5.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#seconds-from-duration-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma79 a r:Inference;
    r:gives {
        {
            {
                ("-PT256S"^^xsd:dayTimeDuration) func:seconds-from-duration -16.0.
            } => {
                :seconds-from-duration-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("-PT256S"^^xsd:dayTimeDuration) func:seconds-from-duration -16.0.
        } => {
            :seconds-from-duration-2 :result true.
        }}]
        skolem:lemma302
        [ a r:Fact; r:gives {{
            ("-PT256S"^^xsd:dayTimeDuration) func:seconds-from-duration -16.0.
        } e:labelvars {
            ("-PT256S"^^xsd:dayTimeDuration) func:seconds-from-duration -16.0.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("-PT256S"^^xsd:dayTimeDuration) func:seconds-from-duration -16.0.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#seconds-from-duration-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma80 a r:Inference;
    r:gives {
        {
            {
                ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:timezone-from-dateTime "-PT5H"^^xsd:dayTimeDuration.
            } => {
                :timezone-from-dateTime-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:timezone-from-dateTime "-PT5H"^^xsd:dayTimeDuration.
        } => {
            :timezone-from-dateTime-1 :result true.
        }}]
        skolem:lemma303
        [ a r:Fact; r:gives {{
            ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:timezone-from-dateTime "-PT5H"^^xsd:dayTimeDuration.
        } e:labelvars {
            ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:timezone-from-dateTime "-PT5H"^^xsd:dayTimeDuration.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:timezone-from-dateTime "-PT5H"^^xsd:dayTimeDuration.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#timezone-from-dateTime-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma81 a r:Inference;
    r:gives {
        {
            {
                ("2000-06-12T13:20:00Z"^^xsd:dateTime) func:timezone-from-dateTime "PT0S"^^xsd:dayTimeDuration.
            } => {
                :timezone-from-dateTime-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("2000-06-12T13:20:00Z"^^xsd:dateTime) func:timezone-from-dateTime "PT0S"^^xsd:dayTimeDuration.
        } => {
            :timezone-from-dateTime-2 :result true.
        }}]
        skolem:lemma304
        [ a r:Fact; r:gives {{
            ("2000-06-12T13:20:00Z"^^xsd:dateTime) func:timezone-from-dateTime "PT0S"^^xsd:dayTimeDuration.
        } e:labelvars {
            ("2000-06-12T13:20:00Z"^^xsd:dateTime) func:timezone-from-dateTime "PT0S"^^xsd:dayTimeDuration.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("2000-06-12T13:20:00Z"^^xsd:dateTime) func:timezone-from-dateTime "PT0S"^^xsd:dayTimeDuration.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#timezone-from-dateTime-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma82 a r:Inference;
    r:gives {
        {
            {
                ("1999-05-31-05:00"^^xsd:date) func:timezone-from-date "-PT5H"^^xsd:dayTimeDuration.
            } => {
                :timezone-from-date-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("1999-05-31-05:00"^^xsd:date) func:timezone-from-date "-PT5H"^^xsd:dayTimeDuration.
        } => {
            :timezone-from-date-1 :result true.
        }}]
        skolem:lemma305
        [ a r:Fact; r:gives {{
            ("1999-05-31-05:00"^^xsd:date) func:timezone-from-date "-PT5H"^^xsd:dayTimeDuration.
        } e:labelvars {
            ("1999-05-31-05:00"^^xsd:date) func:timezone-from-date "-PT5H"^^xsd:dayTimeDuration.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("1999-05-31-05:00"^^xsd:date) func:timezone-from-date "-PT5H"^^xsd:dayTimeDuration.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#timezone-from-date-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma83 a r:Inference;
    r:gives {
        {
            {
                ("2000-06-12Z"^^xsd:date) func:timezone-from-date "PT0S"^^xsd:dayTimeDuration.
            } => {
                :timezone-from-date-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("2000-06-12Z"^^xsd:date) func:timezone-from-date "PT0S"^^xsd:dayTimeDuration.
        } => {
            :timezone-from-date-2 :result true.
        }}]
        skolem:lemma306
        [ a r:Fact; r:gives {{
            ("2000-06-12Z"^^xsd:date) func:timezone-from-date "PT0S"^^xsd:dayTimeDuration.
        } e:labelvars {
            ("2000-06-12Z"^^xsd:date) func:timezone-from-date "PT0S"^^xsd:dayTimeDuration.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("2000-06-12Z"^^xsd:date) func:timezone-from-date "PT0S"^^xsd:dayTimeDuration.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#timezone-from-date-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma84 a r:Inference;
    r:gives {
        {
            {
                ("13:20:00-05:00"^^xsd:time) func:timezone-from-time "-PT5H"^^xsd:dayTimeDuration.
            } => {
                :timezone-from-time-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("13:20:00-05:00"^^xsd:time) func:timezone-from-time "-PT5H"^^xsd:dayTimeDuration.
        } => {
            :timezone-from-time-1 :result true.
        }}]
        skolem:lemma307
        [ a r:Fact; r:gives {{
            ("13:20:00-05:00"^^xsd:time) func:timezone-from-time "-PT5H"^^xsd:dayTimeDuration.
        } e:labelvars {
            ("13:20:00-05:00"^^xsd:time) func:timezone-from-time "-PT5H"^^xsd:dayTimeDuration.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("13:20:00-05:00"^^xsd:time) func:timezone-from-time "-PT5H"^^xsd:dayTimeDuration.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#timezone-from-time-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma85 a r:Inference;
    r:gives {
        {
            {
                ("13:20:00Z"^^xsd:time) func:timezone-from-time "PT0S"^^xsd:dayTimeDuration.
            } => {
                :timezone-from-time-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("13:20:00Z"^^xsd:time) func:timezone-from-time "PT0S"^^xsd:dayTimeDuration.
        } => {
            :timezone-from-time-2 :result true.
        }}]
        skolem:lemma308
        [ a r:Fact; r:gives {{
            ("13:20:00Z"^^xsd:time) func:timezone-from-time "PT0S"^^xsd:dayTimeDuration.
        } e:labelvars {
            ("13:20:00Z"^^xsd:time) func:timezone-from-time "PT0S"^^xsd:dayTimeDuration.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("13:20:00Z"^^xsd:time) func:timezone-from-time "PT0S"^^xsd:dayTimeDuration.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#timezone-from-time-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma86 a r:Inference;
    r:gives {
        {
            {
                ("2000-10-30T06:12:00-05:00"^^xsd:dateTime "1999-11-28T09:00:00Z"^^xsd:dateTime) func:subtract-dateTimes "P337DT2H12M"^^xsd:dayTimeDuration.
            } => {
                :subtract-dateTimes-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("2000-10-30T06:12:00-05:00"^^xsd:dateTime "1999-11-28T09:00:00Z"^^xsd:dateTime) func:subtract-dateTimes "P337DT2H12M"^^xsd:dayTimeDuration.
        } => {
            :subtract-dateTimes-1 :result true.
        }}]
        skolem:lemma309
        [ a r:Fact; r:gives {{
            ("2000-10-30T06:12:00-05:00"^^xsd:dateTime "1999-11-28T09:00:00Z"^^xsd:dateTime) func:subtract-dateTimes "P337DT2H12M"^^xsd:dayTimeDuration.
        } e:labelvars {
            ("2000-10-30T06:12:00-05:00"^^xsd:dateTime "1999-11-28T09:00:00Z"^^xsd:dateTime) func:subtract-dateTimes "P337DT2H12M"^^xsd:dayTimeDuration.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("2000-10-30T06:12:00-05:00"^^xsd:dateTime "1999-11-28T09:00:00Z"^^xsd:dateTime) func:subtract-dateTimes "P337DT2H12M"^^xsd:dayTimeDuration.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#subtract-dateTimes-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma87 a r:Inference;
    r:gives {
        {
            {
                ("2000-10-30Z"^^xsd:date "1999-11-28Z"^^xsd:date) func:subtract-dates "P337D"^^xsd:dayTimeDuration.
            } => {
                :subtract-dates-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("2000-10-30Z"^^xsd:date "1999-11-28Z"^^xsd:date) func:subtract-dates "P337D"^^xsd:dayTimeDuration.
        } => {
            :subtract-dates-1 :result true.
        }}]
        skolem:lemma310
        [ a r:Fact; r:gives {{
            ("2000-10-30Z"^^xsd:date "1999-11-28Z"^^xsd:date) func:subtract-dates "P337D"^^xsd:dayTimeDuration.
        } e:labelvars {
            ("2000-10-30Z"^^xsd:date "1999-11-28Z"^^xsd:date) func:subtract-dates "P337D"^^xsd:dayTimeDuration.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("2000-10-30Z"^^xsd:date "1999-11-28Z"^^xsd:date) func:subtract-dates "P337D"^^xsd:dayTimeDuration.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#subtract-dates-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma88 a r:Inference;
    r:gives {
        {
            {
                ("11:12:00Z"^^xsd:time "04:00:00-05:00"^^xsd:time) func:subtract-times "PT2H12M"^^xsd:dayTimeDuration.
            } => {
                :subtract-times-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("11:12:00Z"^^xsd:time "04:00:00-05:00"^^xsd:time) func:subtract-times "PT2H12M"^^xsd:dayTimeDuration.
        } => {
            :subtract-times-1 :result true.
        }}]
        skolem:lemma311
        [ a r:Fact; r:gives {{
            ("11:12:00Z"^^xsd:time "04:00:00-05:00"^^xsd:time) func:subtract-times "PT2H12M"^^xsd:dayTimeDuration.
        } e:labelvars {
            ("11:12:00Z"^^xsd:time "04:00:00-05:00"^^xsd:time) func:subtract-times "PT2H12M"^^xsd:dayTimeDuration.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("11:12:00Z"^^xsd:time "04:00:00-05:00"^^xsd:time) func:subtract-times "PT2H12M"^^xsd:dayTimeDuration.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#subtract-times-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma89 a r:Inference;
    r:gives {
        {
            {
                ("11:00:00-05:00"^^xsd:time "21:30:00+05:30"^^xsd:time) func:subtract-times "PT0S"^^xsd:dayTimeDuration.
            } => {
                :subtract-times-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("11:00:00-05:00"^^xsd:time "21:30:00+05:30"^^xsd:time) func:subtract-times "PT0S"^^xsd:dayTimeDuration.
        } => {
            :subtract-times-2 :result true.
        }}]
        skolem:lemma312
        [ a r:Fact; r:gives {{
            ("11:00:00-05:00"^^xsd:time "21:30:00+05:30"^^xsd:time) func:subtract-times "PT0S"^^xsd:dayTimeDuration.
        } e:labelvars {
            ("11:00:00-05:00"^^xsd:time "21:30:00+05:30"^^xsd:time) func:subtract-times "PT0S"^^xsd:dayTimeDuration.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("11:00:00-05:00"^^xsd:time "21:30:00+05:30"^^xsd:time) func:subtract-times "PT0S"^^xsd:dayTimeDuration.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#subtract-times-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma90 a r:Inference;
    r:gives {
        {
            {
                ("17:00:00-06:00"^^xsd:time "08:00:00+09:00"^^xsd:time) func:subtract-times "P1D"^^xsd:dayTimeDuration.
            } => {
                :subtract-times-3 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("17:00:00-06:00"^^xsd:time "08:00:00+09:00"^^xsd:time) func:subtract-times "P1D"^^xsd:dayTimeDuration.
        } => {
            :subtract-times-3 :result true.
        }}]
        skolem:lemma313
        [ a r:Fact; r:gives {{
            ("17:00:00-06:00"^^xsd:time "08:00:00+09:00"^^xsd:time) func:subtract-times "P1D"^^xsd:dayTimeDuration.
        } e:labelvars {
            ("17:00:00-06:00"^^xsd:time "08:00:00+09:00"^^xsd:time) func:subtract-times "P1D"^^xsd:dayTimeDuration.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("17:00:00-06:00"^^xsd:time "08:00:00+09:00"^^xsd:time) func:subtract-times "P1D"^^xsd:dayTimeDuration.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#subtract-times-3"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma91 a r:Inference;
    r:gives {
        {
            {
                ("24:00:00"^^xsd:time "23:59:59"^^xsd:time) func:subtract-times "-PT23H59M59S"^^xsd:dayTimeDuration.
            } => {
                :subtract-times-4 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("24:00:00"^^xsd:time "23:59:59"^^xsd:time) func:subtract-times "-PT23H59M59S"^^xsd:dayTimeDuration.
        } => {
            :subtract-times-4 :result true.
        }}]
        skolem:lemma314
        [ a r:Fact; r:gives {{
            ("24:00:00"^^xsd:time "23:59:59"^^xsd:time) func:subtract-times "-PT23H59M59S"^^xsd:dayTimeDuration.
        } e:labelvars {
            ("24:00:00"^^xsd:time "23:59:59"^^xsd:time) func:subtract-times "-PT23H59M59S"^^xsd:dayTimeDuration.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("24:00:00"^^xsd:time "23:59:59"^^xsd:time) func:subtract-times "-PT23H59M59S"^^xsd:dayTimeDuration.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#subtract-times-4"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma92 a r:Inference;
    r:gives {
        {
            {
                ("P2Y11M"^^xsd:yearMonthDuration "P3Y3M"^^xsd:yearMonthDuration) func:add-yearMonthDurations "P6Y2M"^^xsd:yearMonthDuration.
            } => {
                :add-yearMonthDurations-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("P2Y11M"^^xsd:yearMonthDuration "P3Y3M"^^xsd:yearMonthDuration) func:add-yearMonthDurations "P6Y2M"^^xsd:yearMonthDuration.
        } => {
            :add-yearMonthDurations-1 :result true.
        }}]
        skolem:lemma315
        [ a r:Fact; r:gives {{
            ("P2Y11M"^^xsd:yearMonthDuration "P3Y3M"^^xsd:yearMonthDuration) func:add-yearMonthDurations "P6Y2M"^^xsd:yearMonthDuration.
        } e:labelvars {
            ("P2Y11M"^^xsd:yearMonthDuration "P3Y3M"^^xsd:yearMonthDuration) func:add-yearMonthDurations "P6Y2M"^^xsd:yearMonthDuration.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("P2Y11M"^^xsd:yearMonthDuration "P3Y3M"^^xsd:yearMonthDuration) func:add-yearMonthDurations "P6Y2M"^^xsd:yearMonthDuration.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#add-yearMonthDurations-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma93 a r:Inference;
    r:gives {
        {
            {
                ("P2Y11M"^^xsd:yearMonthDuration "P3Y3M"^^xsd:yearMonthDuration) func:subtract-yearMonthDurations "-P4M"^^xsd:yearMonthDuration.
            } => {
                :subtract-yearMonthDurations-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("P2Y11M"^^xsd:yearMonthDuration "P3Y3M"^^xsd:yearMonthDuration) func:subtract-yearMonthDurations "-P4M"^^xsd:yearMonthDuration.
        } => {
            :subtract-yearMonthDurations-1 :result true.
        }}]
        skolem:lemma316
        [ a r:Fact; r:gives {{
            ("P2Y11M"^^xsd:yearMonthDuration "P3Y3M"^^xsd:yearMonthDuration) func:subtract-yearMonthDurations "-P4M"^^xsd:yearMonthDuration.
        } e:labelvars {
            ("P2Y11M"^^xsd:yearMonthDuration "P3Y3M"^^xsd:yearMonthDuration) func:subtract-yearMonthDurations "-P4M"^^xsd:yearMonthDuration.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("P2Y11M"^^xsd:yearMonthDuration "P3Y3M"^^xsd:yearMonthDuration) func:subtract-yearMonthDurations "-P4M"^^xsd:yearMonthDuration.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#subtract-yearMonthDurations-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma94 a r:Inference;
    r:gives {
        {
            {
                ("P2Y11M"^^xsd:yearMonthDuration 2.3) func:multiply-yearMonthDuration "P6Y9M"^^xsd:yearMonthDuration.
            } => {
                :multiply-yearMonthDuration-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("P2Y11M"^^xsd:yearMonthDuration 2.3) func:multiply-yearMonthDuration "P6Y9M"^^xsd:yearMonthDuration.
        } => {
            :multiply-yearMonthDuration-1 :result true.
        }}]
        skolem:lemma317
        [ a r:Fact; r:gives {{
            ("P2Y11M"^^xsd:yearMonthDuration 2.3) func:multiply-yearMonthDuration "P6Y9M"^^xsd:yearMonthDuration.
        } e:labelvars {
            ("P2Y11M"^^xsd:yearMonthDuration 2.3) func:multiply-yearMonthDuration "P6Y9M"^^xsd:yearMonthDuration.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("P2Y11M"^^xsd:yearMonthDuration 2.3) func:multiply-yearMonthDuration "P6Y9M"^^xsd:yearMonthDuration.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#multiply-yearMonthDuration-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma95 a r:Inference;
    r:gives {
        {
            {
                ("P2Y11M"^^xsd:yearMonthDuration 1.5) func:divide-yearMonthDuration "P1Y11M"^^xsd:yearMonthDuration.
            } => {
                :divide-yearMonthDuration-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("P2Y11M"^^xsd:yearMonthDuration 1.5) func:divide-yearMonthDuration "P1Y11M"^^xsd:yearMonthDuration.
        } => {
            :divide-yearMonthDuration-1 :result true.
        }}]
        skolem:lemma318
        [ a r:Fact; r:gives {{
            ("P2Y11M"^^xsd:yearMonthDuration 1.5) func:divide-yearMonthDuration "P1Y11M"^^xsd:yearMonthDuration.
        } e:labelvars {
            ("P2Y11M"^^xsd:yearMonthDuration 1.5) func:divide-yearMonthDuration "P1Y11M"^^xsd:yearMonthDuration.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("P2Y11M"^^xsd:yearMonthDuration 1.5) func:divide-yearMonthDuration "P1Y11M"^^xsd:yearMonthDuration.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#divide-yearMonthDuration-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma96 a r:Inference;
    r:gives {
        {
            {
                ("P3Y4M"^^xsd:yearMonthDuration "-P1Y4M"^^xsd:yearMonthDuration) func:divide-yearMonthDuration-by-yearMonthDuration -2.5.
            } => {
                :divide-yearMonthDuration-by-yearMonthDuration-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("P3Y4M"^^xsd:yearMonthDuration "-P1Y4M"^^xsd:yearMonthDuration) func:divide-yearMonthDuration-by-yearMonthDuration -2.5.
        } => {
            :divide-yearMonthDuration-by-yearMonthDuration-1 :result true.
        }}]
        skolem:lemma319
        [ a r:Fact; r:gives {{
            ("P3Y4M"^^xsd:yearMonthDuration "-P1Y4M"^^xsd:yearMonthDuration) func:divide-yearMonthDuration-by-yearMonthDuration -2.5.
        } e:labelvars {
            ("P3Y4M"^^xsd:yearMonthDuration "-P1Y4M"^^xsd:yearMonthDuration) func:divide-yearMonthDuration-by-yearMonthDuration -2.5.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("P3Y4M"^^xsd:yearMonthDuration "-P1Y4M"^^xsd:yearMonthDuration) func:divide-yearMonthDuration-by-yearMonthDuration -2.5.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#divide-yearMonthDuration-by-yearMonthDuration-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma97 a r:Inference;
    r:gives {
        {
            {
                ("P2DT12H5M"^^xsd:dayTimeDuration "P5DT12H"^^xsd:dayTimeDuration) func:add-dayTimeDurations "P8DT5M"^^xsd:dayTimeDuration.
            } => {
                :add-dayTimeDurations-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("P2DT12H5M"^^xsd:dayTimeDuration "P5DT12H"^^xsd:dayTimeDuration) func:add-dayTimeDurations "P8DT5M"^^xsd:dayTimeDuration.
        } => {
            :add-dayTimeDurations-1 :result true.
        }}]
        skolem:lemma320
        [ a r:Fact; r:gives {{
            ("P2DT12H5M"^^xsd:dayTimeDuration "P5DT12H"^^xsd:dayTimeDuration) func:add-dayTimeDurations "P8DT5M"^^xsd:dayTimeDuration.
        } e:labelvars {
            ("P2DT12H5M"^^xsd:dayTimeDuration "P5DT12H"^^xsd:dayTimeDuration) func:add-dayTimeDurations "P8DT5M"^^xsd:dayTimeDuration.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("P2DT12H5M"^^xsd:dayTimeDuration "P5DT12H"^^xsd:dayTimeDuration) func:add-dayTimeDurations "P8DT5M"^^xsd:dayTimeDuration.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#add-dayTimeDurations-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma98 a r:Inference;
    r:gives {
        {
            {
                ("P2DT12H"^^xsd:dayTimeDuration "P1DT10H30M"^^xsd:dayTimeDuration) func:subtract-dayTimeDurations "P1DT1H30M"^^xsd:dayTimeDuration.
            } => {
                :subtract-dayTimeDurations-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("P2DT12H"^^xsd:dayTimeDuration "P1DT10H30M"^^xsd:dayTimeDuration) func:subtract-dayTimeDurations "P1DT1H30M"^^xsd:dayTimeDuration.
        } => {
            :subtract-dayTimeDurations-1 :result true.
        }}]
        skolem:lemma321
        [ a r:Fact; r:gives {{
            ("P2DT12H"^^xsd:dayTimeDuration "P1DT10H30M"^^xsd:dayTimeDuration) func:subtract-dayTimeDurations "P1DT1H30M"^^xsd:dayTimeDuration.
        } e:labelvars {
            ("P2DT12H"^^xsd:dayTimeDuration "P1DT10H30M"^^xsd:dayTimeDuration) func:subtract-dayTimeDurations "P1DT1H30M"^^xsd:dayTimeDuration.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("P2DT12H"^^xsd:dayTimeDuration "P1DT10H30M"^^xsd:dayTimeDuration) func:subtract-dayTimeDurations "P1DT1H30M"^^xsd:dayTimeDuration.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#subtract-dayTimeDurations-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma99 a r:Inference;
    r:gives {
        {
            {
                ("PT2H10M"^^xsd:dayTimeDuration 2.1) func:multiply-dayTimeDuration "PT4H33M"^^xsd:dayTimeDuration.
            } => {
                :multiply-dayTimeDuration-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("PT2H10M"^^xsd:dayTimeDuration 2.1) func:multiply-dayTimeDuration "PT4H33M"^^xsd:dayTimeDuration.
        } => {
            :multiply-dayTimeDuration-1 :result true.
        }}]
        skolem:lemma322
        [ a r:Fact; r:gives {{
            ("PT2H10M"^^xsd:dayTimeDuration 2.1) func:multiply-dayTimeDuration "PT4H33M"^^xsd:dayTimeDuration.
        } e:labelvars {
            ("PT2H10M"^^xsd:dayTimeDuration 2.1) func:multiply-dayTimeDuration "PT4H33M"^^xsd:dayTimeDuration.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("PT2H10M"^^xsd:dayTimeDuration 2.1) func:multiply-dayTimeDuration "PT4H33M"^^xsd:dayTimeDuration.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#multiply-dayTimeDuration-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma100 a r:Inference;
    r:gives {
        {
            {
                ("P1DT2H30M10.5S"^^xsd:dayTimeDuration 1.5) func:divide-dayTimeDuration "PT17H40M7S"^^xsd:dayTimeDuration.
            } => {
                :divide-dayTimeDuration-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("P1DT2H30M10.5S"^^xsd:dayTimeDuration 1.5) func:divide-dayTimeDuration "PT17H40M7S"^^xsd:dayTimeDuration.
        } => {
            :divide-dayTimeDuration-1 :result true.
        }}]
        skolem:lemma323
        [ a r:Fact; r:gives {{
            ("P1DT2H30M10.5S"^^xsd:dayTimeDuration 1.5) func:divide-dayTimeDuration "PT17H40M7S"^^xsd:dayTimeDuration.
        } e:labelvars {
            ("P1DT2H30M10.5S"^^xsd:dayTimeDuration 1.5) func:divide-dayTimeDuration "PT17H40M7S"^^xsd:dayTimeDuration.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("P1DT2H30M10.5S"^^xsd:dayTimeDuration 1.5) func:divide-dayTimeDuration "PT17H40M7S"^^xsd:dayTimeDuration.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#divide-dayTimeDuration-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma101 a r:Inference;
    r:gives {
        {
            {
                ("PT4H33M"^^xsd:dayTimeDuration "PT2H10M"^^xsd:dayTimeDuration) func:divide-dayTimeDuration-by-dayTimeDuration 2.1.
            } => {
                :divide-dayTimeDuration-by-dayTimeDuration-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("PT4H33M"^^xsd:dayTimeDuration "PT2H10M"^^xsd:dayTimeDuration) func:divide-dayTimeDuration-by-dayTimeDuration 2.1.
        } => {
            :divide-dayTimeDuration-by-dayTimeDuration-1 :result true.
        }}]
        skolem:lemma324
        [ a r:Fact; r:gives {{
            ("PT4H33M"^^xsd:dayTimeDuration "PT2H10M"^^xsd:dayTimeDuration) func:divide-dayTimeDuration-by-dayTimeDuration 2.1.
        } e:labelvars {
            ("PT4H33M"^^xsd:dayTimeDuration "PT2H10M"^^xsd:dayTimeDuration) func:divide-dayTimeDuration-by-dayTimeDuration 2.1.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("PT4H33M"^^xsd:dayTimeDuration "PT2H10M"^^xsd:dayTimeDuration) func:divide-dayTimeDuration-by-dayTimeDuration 2.1.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#divide-dayTimeDuration-by-dayTimeDuration-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma102 a r:Inference;
    r:gives {
        {
            {
                ("2000-10-30T11:12:00Z"^^xsd:dateTime "P1Y2M"^^xsd:yearMonthDuration) func:add-yearMonthDuration-to-dateTime "2001-12-30T11:12:00Z"^^xsd:dateTime.
            } => {
                :add-yearMonthDuration-to-dateTime-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("2000-10-30T11:12:00Z"^^xsd:dateTime "P1Y2M"^^xsd:yearMonthDuration) func:add-yearMonthDuration-to-dateTime "2001-12-30T11:12:00Z"^^xsd:dateTime.
        } => {
            :add-yearMonthDuration-to-dateTime-1 :result true.
        }}]
        skolem:lemma325
        [ a r:Fact; r:gives {{
            ("2000-10-30T11:12:00Z"^^xsd:dateTime "P1Y2M"^^xsd:yearMonthDuration) func:add-yearMonthDuration-to-dateTime "2001-12-30T11:12:00Z"^^xsd:dateTime.
        } e:labelvars {
            ("2000-10-30T11:12:00Z"^^xsd:dateTime "P1Y2M"^^xsd:yearMonthDuration) func:add-yearMonthDuration-to-dateTime "2001-12-30T11:12:00Z"^^xsd:dateTime.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("2000-10-30T11:12:00Z"^^xsd:dateTime "P1Y2M"^^xsd:yearMonthDuration) func:add-yearMonthDuration-to-dateTime "2001-12-30T11:12:00Z"^^xsd:dateTime.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#add-yearMonthDuration-to-dateTime-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma103 a r:Inference;
    r:gives {
        {
            {
                ("2000-10-30Z"^^xsd:date "P1Y2M"^^xsd:yearMonthDuration) func:add-yearMonthDuration-to-date "2001-12-30Z"^^xsd:date.
            } => {
                :add-yearMonthDuration-to-date-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("2000-10-30Z"^^xsd:date "P1Y2M"^^xsd:yearMonthDuration) func:add-yearMonthDuration-to-date "2001-12-30Z"^^xsd:date.
        } => {
            :add-yearMonthDuration-to-date-1 :result true.
        }}]
        skolem:lemma326
        [ a r:Fact; r:gives {{
            ("2000-10-30Z"^^xsd:date "P1Y2M"^^xsd:yearMonthDuration) func:add-yearMonthDuration-to-date "2001-12-30Z"^^xsd:date.
        } e:labelvars {
            ("2000-10-30Z"^^xsd:date "P1Y2M"^^xsd:yearMonthDuration) func:add-yearMonthDuration-to-date "2001-12-30Z"^^xsd:date.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("2000-10-30Z"^^xsd:date "P1Y2M"^^xsd:yearMonthDuration) func:add-yearMonthDuration-to-date "2001-12-30Z"^^xsd:date.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#add-yearMonthDuration-to-date-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma104 a r:Inference;
    r:gives {
        {
            {
                ("2000-10-30T11:12:00Z"^^xsd:dateTime "P3DT1H15M"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-dateTime "2000-11-02T12:27:00Z"^^xsd:dateTime.
            } => {
                :add-dayTimeDuration-to-dateTime-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("2000-10-30T11:12:00Z"^^xsd:dateTime "P3DT1H15M"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-dateTime "2000-11-02T12:27:00Z"^^xsd:dateTime.
        } => {
            :add-dayTimeDuration-to-dateTime-1 :result true.
        }}]
        skolem:lemma327
        [ a r:Fact; r:gives {{
            ("2000-10-30T11:12:00Z"^^xsd:dateTime "P3DT1H15M"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-dateTime "2000-11-02T12:27:00Z"^^xsd:dateTime.
        } e:labelvars {
            ("2000-10-30T11:12:00Z"^^xsd:dateTime "P3DT1H15M"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-dateTime "2000-11-02T12:27:00Z"^^xsd:dateTime.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("2000-10-30T11:12:00Z"^^xsd:dateTime "P3DT1H15M"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-dateTime "2000-11-02T12:27:00Z"^^xsd:dateTime.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#add-dayTimeDuration-to-dateTime-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma105 a r:Inference;
    r:gives {
        {
            {
                ("2004-10-30Z"^^xsd:date "P2DT2H30M0S"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-date "2004-11-01Z"^^xsd:date.
            } => {
                :add-dayTimeDuration-to-date-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("2004-10-30Z"^^xsd:date "P2DT2H30M0S"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-date "2004-11-01Z"^^xsd:date.
        } => {
            :add-dayTimeDuration-to-date-1 :result true.
        }}]
        skolem:lemma328
        [ a r:Fact; r:gives {{
            ("2004-10-30Z"^^xsd:date "P2DT2H30M0S"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-date "2004-11-01Z"^^xsd:date.
        } e:labelvars {
            ("2004-10-30Z"^^xsd:date "P2DT2H30M0S"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-date "2004-11-01Z"^^xsd:date.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("2004-10-30Z"^^xsd:date "P2DT2H30M0S"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-date "2004-11-01Z"^^xsd:date.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#add-dayTimeDuration-to-date-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma106 a r:Inference;
    r:gives {
        {
            {
                ("11:12:00Z"^^xsd:time "P3DT1H15M"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-time "12:27:00Z"^^xsd:time.
            } => {
                :add-dayTimeDuration-to-time-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("11:12:00Z"^^xsd:time "P3DT1H15M"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-time "12:27:00Z"^^xsd:time.
        } => {
            :add-dayTimeDuration-to-time-1 :result true.
        }}]
        skolem:lemma329
        [ a r:Fact; r:gives {{
            ("11:12:00Z"^^xsd:time "P3DT1H15M"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-time "12:27:00Z"^^xsd:time.
        } e:labelvars {
            ("11:12:00Z"^^xsd:time "P3DT1H15M"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-time "12:27:00Z"^^xsd:time.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("11:12:00Z"^^xsd:time "P3DT1H15M"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-time "12:27:00Z"^^xsd:time.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#add-dayTimeDuration-to-time-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma107 a r:Inference;
    r:gives {
        {
            {
                ("2000-10-30T11:12:00Z"^^xsd:dateTime "P1Y2M"^^xsd:yearMonthDuration) func:subtract-yearMonthDuration-from-dateTime "1999-08-30T11:12:00Z"^^xsd:dateTime.
            } => {
                :subtract-yearMonthDuration-from-dateTime-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("2000-10-30T11:12:00Z"^^xsd:dateTime "P1Y2M"^^xsd:yearMonthDuration) func:subtract-yearMonthDuration-from-dateTime "1999-08-30T11:12:00Z"^^xsd:dateTime.
        } => {
            :subtract-yearMonthDuration-from-dateTime-1 :result true.
        }}]
        skolem:lemma330
        [ a r:Fact; r:gives {{
            ("2000-10-30T11:12:00Z"^^xsd:dateTime "P1Y2M"^^xsd:yearMonthDuration) func:subtract-yearMonthDuration-from-dateTime "1999-08-30T11:12:00Z"^^xsd:dateTime.
        } e:labelvars {
            ("2000-10-30T11:12:00Z"^^xsd:dateTime "P1Y2M"^^xsd:yearMonthDuration) func:subtract-yearMonthDuration-from-dateTime "1999-08-30T11:12:00Z"^^xsd:dateTime.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("2000-10-30T11:12:00Z"^^xsd:dateTime "P1Y2M"^^xsd:yearMonthDuration) func:subtract-yearMonthDuration-from-dateTime "1999-08-30T11:12:00Z"^^xsd:dateTime.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#subtract-yearMonthDuration-from-dateTime-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma108 a r:Inference;
    r:gives {
        {
            {
                ("2000-10-30Z"^^xsd:date "P1Y2M"^^xsd:yearMonthDuration) func:subtract-yearMonthDuration-from-date "1999-08-30Z"^^xsd:date.
            } => {
                :subtract-yearMonthDuration-from-date-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("2000-10-30Z"^^xsd:date "P1Y2M"^^xsd:yearMonthDuration) func:subtract-yearMonthDuration-from-date "1999-08-30Z"^^xsd:date.
        } => {
            :subtract-yearMonthDuration-from-date-1 :result true.
        }}]
        skolem:lemma331
        [ a r:Fact; r:gives {{
            ("2000-10-30Z"^^xsd:date "P1Y2M"^^xsd:yearMonthDuration) func:subtract-yearMonthDuration-from-date "1999-08-30Z"^^xsd:date.
        } e:labelvars {
            ("2000-10-30Z"^^xsd:date "P1Y2M"^^xsd:yearMonthDuration) func:subtract-yearMonthDuration-from-date "1999-08-30Z"^^xsd:date.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("2000-10-30Z"^^xsd:date "P1Y2M"^^xsd:yearMonthDuration) func:subtract-yearMonthDuration-from-date "1999-08-30Z"^^xsd:date.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#subtract-yearMonthDuration-from-date-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma109 a r:Inference;
    r:gives {
        {
            {
                ("2000-10-30T11:12:00Z"^^xsd:dateTime "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-dateTime "2000-10-27T09:57:00Z"^^xsd:dateTime.
            } => {
                :subtract-dayTimeDuration-from-dateTime-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("2000-10-30T11:12:00Z"^^xsd:dateTime "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-dateTime "2000-10-27T09:57:00Z"^^xsd:dateTime.
        } => {
            :subtract-dayTimeDuration-from-dateTime-1 :result true.
        }}]
        skolem:lemma332
        [ a r:Fact; r:gives {{
            ("2000-10-30T11:12:00Z"^^xsd:dateTime "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-dateTime "2000-10-27T09:57:00Z"^^xsd:dateTime.
        } e:labelvars {
            ("2000-10-30T11:12:00Z"^^xsd:dateTime "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-dateTime "2000-10-27T09:57:00Z"^^xsd:dateTime.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("2000-10-30T11:12:00Z"^^xsd:dateTime "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-dateTime "2000-10-27T09:57:00Z"^^xsd:dateTime.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#subtract-dayTimeDuration-from-dateTime-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma110 a r:Inference;
    r:gives {
        {
            {
                ("2000-10-30Z"^^xsd:date "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-date "2000-10-26Z"^^xsd:date.
            } => {
                :subtract-dayTimeDuration-from-date-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("2000-10-30Z"^^xsd:date "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-date "2000-10-26Z"^^xsd:date.
        } => {
            :subtract-dayTimeDuration-from-date-1 :result true.
        }}]
        skolem:lemma333
        [ a r:Fact; r:gives {{
            ("2000-10-30Z"^^xsd:date "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-date "2000-10-26Z"^^xsd:date.
        } e:labelvars {
            ("2000-10-30Z"^^xsd:date "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-date "2000-10-26Z"^^xsd:date.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("2000-10-30Z"^^xsd:date "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-date "2000-10-26Z"^^xsd:date.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#subtract-dayTimeDuration-from-date-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma111 a r:Inference;
    r:gives {
        {
            {
                ("11:12:00Z"^^xsd:time "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-time "09:57:00Z"^^xsd:time.
            } => {
                :subtract-dayTimeDuration-from-time-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("11:12:00Z"^^xsd:time "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-time "09:57:00Z"^^xsd:time.
        } => {
            :subtract-dayTimeDuration-from-time-1 :result true.
        }}]
        skolem:lemma334
        [ a r:Fact; r:gives {{
            ("11:12:00Z"^^xsd:time "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-time "09:57:00Z"^^xsd:time.
        } e:labelvars {
            ("11:12:00Z"^^xsd:time "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-time "09:57:00Z"^^xsd:time.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("11:12:00Z"^^xsd:time "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-time "09:57:00Z"^^xsd:time.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#subtract-dayTimeDuration-from-time-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma112 a r:Inference;
    r:gives {
        {
            {
                ("08:20:00-05:00"^^xsd:time "P23DT10H10M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-time "22:10:00-05:00"^^xsd:time.
            } => {
                :subtract-dayTimeDuration-from-time-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("08:20:00-05:00"^^xsd:time "P23DT10H10M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-time "22:10:00-05:00"^^xsd:time.
        } => {
            :subtract-dayTimeDuration-from-time-2 :result true.
        }}]
        skolem:lemma335
        [ a r:Fact; r:gives {{
            ("08:20:00-05:00"^^xsd:time "P23DT10H10M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-time "22:10:00-05:00"^^xsd:time.
        } e:labelvars {
            ("08:20:00-05:00"^^xsd:time "P23DT10H10M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-time "22:10:00-05:00"^^xsd:time.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("08:20:00-05:00"^^xsd:time "P23DT10H10M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-time "22:10:00-05:00"^^xsd:time.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#subtract-dayTimeDuration-from-time-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma113 a r:Inference;
    r:gives {
        {
            {
                ("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-equal true.
            } => {
                :dateTime-equal-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-equal true.
        } => {
            :dateTime-equal-1 :result true.
        }}]
        skolem:lemma336
        [ a r:Fact; r:gives {{
            ("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-equal true.
        } e:labelvars {
            ("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-equal true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-equal true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#dateTime-equal-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma114 a r:Inference;
    r:gives {
        {
            {
                ("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T23:00:00+06:00"^^xsd:dateTime) pred:dateTime-equal true.
            } => {
                :dateTime-equal-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T23:00:00+06:00"^^xsd:dateTime) pred:dateTime-equal true.
        } => {
            :dateTime-equal-2 :result true.
        }}]
        skolem:lemma337
        [ a r:Fact; r:gives {{
            ("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T23:00:00+06:00"^^xsd:dateTime) pred:dateTime-equal true.
        } e:labelvars {
            ("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T23:00:00+06:00"^^xsd:dateTime) pred:dateTime-equal true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T23:00:00+06:00"^^xsd:dateTime) pred:dateTime-equal true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#dateTime-equal-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma115 a r:Inference;
    r:gives {
        {
            {
                ("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T17:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal false.
            } => {
                :dateTime-equal-3 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T17:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal false.
        } => {
            :dateTime-equal-3 :result true.
        }}]
        skolem:lemma338
        [ a r:Fact; r:gives {{
            ("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T17:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal false.
        } e:labelvars {
            ("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T17:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal false.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T17:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal false.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#dateTime-equal-3"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma116 a r:Inference;
    r:gives {
        {
            {
                ("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T12:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal true.
            } => {
                :dateTime-equal-4 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T12:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal true.
        } => {
            :dateTime-equal-4 :result true.
        }}]
        skolem:lemma339
        [ a r:Fact; r:gives {{
            ("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T12:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal true.
        } e:labelvars {
            ("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T12:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T12:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#dateTime-equal-4"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma117 a r:Inference;
    r:gives {
        {
            {
                ("2002-04-02T23:00:00-04:00"^^xsd:dateTime "2002-04-03T02:00:00-01:00"^^xsd:dateTime) pred:dateTime-equal true.
            } => {
                :dateTime-equal-5 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("2002-04-02T23:00:00-04:00"^^xsd:dateTime "2002-04-03T02:00:00-01:00"^^xsd:dateTime) pred:dateTime-equal true.
        } => {
            :dateTime-equal-5 :result true.
        }}]
        skolem:lemma340
        [ a r:Fact; r:gives {{
            ("2002-04-02T23:00:00-04:00"^^xsd:dateTime "2002-04-03T02:00:00-01:00"^^xsd:dateTime) pred:dateTime-equal true.
        } e:labelvars {
            ("2002-04-02T23:00:00-04:00"^^xsd:dateTime "2002-04-03T02:00:00-01:00"^^xsd:dateTime) pred:dateTime-equal true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("2002-04-02T23:00:00-04:00"^^xsd:dateTime "2002-04-03T02:00:00-01:00"^^xsd:dateTime) pred:dateTime-equal true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#dateTime-equal-5"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma118 a r:Inference;
    r:gives {
        {
            {
                ("1999-12-31T24:00:00-05:00"^^xsd:dateTime "2000-01-01T00:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal true.
            } => {
                :dateTime-equal-6 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("1999-12-31T24:00:00-05:00"^^xsd:dateTime "2000-01-01T00:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal true.
        } => {
            :dateTime-equal-6 :result true.
        }}]
        skolem:lemma341
        [ a r:Fact; r:gives {{
            ("1999-12-31T24:00:00-05:00"^^xsd:dateTime "2000-01-01T00:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal true.
        } e:labelvars {
            ("1999-12-31T24:00:00-05:00"^^xsd:dateTime "2000-01-01T00:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("1999-12-31T24:00:00-05:00"^^xsd:dateTime "2000-01-01T00:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#dateTime-equal-6"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma119 a r:Inference;
    r:gives {
        {
            {
                ("2005-04-04T24:00:00-05:00"^^xsd:dateTime "2005-04-04T00:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal false.
            } => {
                :dateTime-equal-7 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("2005-04-04T24:00:00-05:00"^^xsd:dateTime "2005-04-04T00:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal false.
        } => {
            :dateTime-equal-7 :result true.
        }}]
        skolem:lemma342
        [ a r:Fact; r:gives {{
            ("2005-04-04T24:00:00-05:00"^^xsd:dateTime "2005-04-04T00:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal false.
        } e:labelvars {
            ("2005-04-04T24:00:00-05:00"^^xsd:dateTime "2005-04-04T00:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal false.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("2005-04-04T24:00:00-05:00"^^xsd:dateTime "2005-04-04T00:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal false.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#dateTime-equal-7"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma120 a r:Inference;
    r:gives {
        {
            {
                ("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2010-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-less-than true.
            } => {
                :dateTime-less-than-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2010-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-less-than true.
        } => {
            :dateTime-less-than-1 :result true.
        }}]
        skolem:lemma343
        [ a r:Fact; r:gives {{
            ("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2010-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-less-than true.
        } e:labelvars {
            ("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2010-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-less-than true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2010-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-less-than true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#dateTime-less-than-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma121 a r:Inference;
    r:gives {
        {
            {
                ("2010-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-greater-than true.
            } => {
                :dateTime-greater-than-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("2010-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-greater-than true.
        } => {
            :dateTime-greater-than-1 :result true.
        }}]
        skolem:lemma344
        [ a r:Fact; r:gives {{
            ("2010-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-greater-than true.
        } e:labelvars {
            ("2010-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-greater-than true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("2010-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-greater-than true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#dateTime-greater-than-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma122 a r:Inference;
    r:gives {
        {
            {
                ("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-equal false.
            } => {
                :date-equal-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-equal false.
        } => {
            :date-equal-1 :result true.
        }}]
        skolem:lemma345
        [ a r:Fact; r:gives {{
            ("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-equal false.
        } e:labelvars {
            ("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-equal false.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-equal false.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#date-equal-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma123 a r:Inference;
    r:gives {
        {
            {
                ("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-equal true.
            } => {
                :date-equal-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-equal true.
        } => {
            :date-equal-2 :result true.
        }}]
        skolem:lemma346
        [ a r:Fact; r:gives {{
            ("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-equal true.
        } e:labelvars {
            ("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-equal true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-equal true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#date-equal-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma124 a r:Inference;
    r:gives {
        {
            {
                ("2004-12-25Z"^^xsd:date "2004-12-25-05:00"^^xsd:date) pred:date-less-than true.
            } => {
                :date-less-than-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("2004-12-25Z"^^xsd:date "2004-12-25-05:00"^^xsd:date) pred:date-less-than true.
        } => {
            :date-less-than-1 :result true.
        }}]
        skolem:lemma347
        [ a r:Fact; r:gives {{
            ("2004-12-25Z"^^xsd:date "2004-12-25-05:00"^^xsd:date) pred:date-less-than true.
        } e:labelvars {
            ("2004-12-25Z"^^xsd:date "2004-12-25-05:00"^^xsd:date) pred:date-less-than true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("2004-12-25Z"^^xsd:date "2004-12-25-05:00"^^xsd:date) pred:date-less-than true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#date-less-than-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma125 a r:Inference;
    r:gives {
        {
            {
                ("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-less-than false.
            } => {
                :date-less-than-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-less-than false.
        } => {
            :date-less-than-2 :result true.
        }}]
        skolem:lemma348
        [ a r:Fact; r:gives {{
            ("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-less-than false.
        } e:labelvars {
            ("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-less-than false.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-less-than false.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#date-less-than-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma126 a r:Inference;
    r:gives {
        {
            {
                ("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-greater-than true.
            } => {
                :date-greater-than-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-greater-than true.
        } => {
            :date-greater-than-1 :result true.
        }}]
        skolem:lemma349
        [ a r:Fact; r:gives {{
            ("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-greater-than true.
        } e:labelvars {
            ("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-greater-than true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-greater-than true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#date-greater-than-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma127 a r:Inference;
    r:gives {
        {
            {
                ("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-greater-than false.
            } => {
                :date-greater-than-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-greater-than false.
        } => {
            :date-greater-than-2 :result true.
        }}]
        skolem:lemma350
        [ a r:Fact; r:gives {{
            ("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-greater-than false.
        } e:labelvars {
            ("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-greater-than false.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-greater-than false.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#date-greater-than-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma128 a r:Inference;
    r:gives {
        {
            {
                ("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-equal false.
            } => {
                :time-equal-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-equal false.
        } => {
            :time-equal-1 :result true.
        }}]
        skolem:lemma351
        [ a r:Fact; r:gives {{
            ("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-equal false.
        } e:labelvars {
            ("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-equal false.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-equal false.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#time-equal-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma129 a r:Inference;
    r:gives {
        {
            {
                ("21:30:00+10:30"^^xsd:time "06:00:00-05:00"^^xsd:time) pred:time-equal true.
            } => {
                :time-equal-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("21:30:00+10:30"^^xsd:time "06:00:00-05:00"^^xsd:time) pred:time-equal true.
        } => {
            :time-equal-2 :result true.
        }}]
        skolem:lemma352
        [ a r:Fact; r:gives {{
            ("21:30:00+10:30"^^xsd:time "06:00:00-05:00"^^xsd:time) pred:time-equal true.
        } e:labelvars {
            ("21:30:00+10:30"^^xsd:time "06:00:00-05:00"^^xsd:time) pred:time-equal true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("21:30:00+10:30"^^xsd:time "06:00:00-05:00"^^xsd:time) pred:time-equal true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#time-equal-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma130 a r:Inference;
    r:gives {
        {
            {
                ("24:00:00+01:00"^^xsd:time "00:00:00+01:00"^^xsd:time) pred:time-equal true.
            } => {
                :time-equal-3 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("24:00:00+01:00"^^xsd:time "00:00:00+01:00"^^xsd:time) pred:time-equal true.
        } => {
            :time-equal-3 :result true.
        }}]
        skolem:lemma353
        [ a r:Fact; r:gives {{
            ("24:00:00+01:00"^^xsd:time "00:00:00+01:00"^^xsd:time) pred:time-equal true.
        } e:labelvars {
            ("24:00:00+01:00"^^xsd:time "00:00:00+01:00"^^xsd:time) pred:time-equal true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("24:00:00+01:00"^^xsd:time "00:00:00+01:00"^^xsd:time) pred:time-equal true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#time-equal-3"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma131 a r:Inference;
    r:gives {
        {
            {
                ("12:00:00-05:00"^^xsd:time "23:00:00+06:00"^^xsd:time) pred:time-less-than false.
            } => {
                :time-less-than-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("12:00:00-05:00"^^xsd:time "23:00:00+06:00"^^xsd:time) pred:time-less-than false.
        } => {
            :time-less-than-1 :result true.
        }}]
        skolem:lemma354
        [ a r:Fact; r:gives {{
            ("12:00:00-05:00"^^xsd:time "23:00:00+06:00"^^xsd:time) pred:time-less-than false.
        } e:labelvars {
            ("12:00:00-05:00"^^xsd:time "23:00:00+06:00"^^xsd:time) pred:time-less-than false.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("12:00:00-05:00"^^xsd:time "23:00:00+06:00"^^xsd:time) pred:time-less-than false.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#time-less-than-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma132 a r:Inference;
    r:gives {
        {
            {
                ("11:00:00-05:00"^^xsd:time "17:00:00Z"^^xsd:time) pred:time-less-than true.
            } => {
                :time-less-than-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("11:00:00-05:00"^^xsd:time "17:00:00Z"^^xsd:time) pred:time-less-than true.
        } => {
            :time-less-than-2 :result true.
        }}]
        skolem:lemma355
        [ a r:Fact; r:gives {{
            ("11:00:00-05:00"^^xsd:time "17:00:00Z"^^xsd:time) pred:time-less-than true.
        } e:labelvars {
            ("11:00:00-05:00"^^xsd:time "17:00:00Z"^^xsd:time) pred:time-less-than true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("11:00:00-05:00"^^xsd:time "17:00:00Z"^^xsd:time) pred:time-less-than true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#time-less-than-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma133 a r:Inference;
    r:gives {
        {
            {
                ("23:59:59-05:00"^^xsd:time "24:00:00-05:00"^^xsd:time) pred:time-less-than false.
            } => {
                :time-less-than-3 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("23:59:59-05:00"^^xsd:time "24:00:00-05:00"^^xsd:time) pred:time-less-than false.
        } => {
            :time-less-than-3 :result true.
        }}]
        skolem:lemma356
        [ a r:Fact; r:gives {{
            ("23:59:59-05:00"^^xsd:time "24:00:00-05:00"^^xsd:time) pred:time-less-than false.
        } e:labelvars {
            ("23:59:59-05:00"^^xsd:time "24:00:00-05:00"^^xsd:time) pred:time-less-than false.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("23:59:59-05:00"^^xsd:time "24:00:00-05:00"^^xsd:time) pred:time-less-than false.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#time-less-than-3"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma134 a r:Inference;
    r:gives {
        {
            {
                ("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-greater-than false.
            } => {
                :time-greater-than-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-greater-than false.
        } => {
            :time-greater-than-1 :result true.
        }}]
        skolem:lemma357
        [ a r:Fact; r:gives {{
            ("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-greater-than false.
        } e:labelvars {
            ("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-greater-than false.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-greater-than false.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#time-greater-than-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma135 a r:Inference;
    r:gives {
        {
            {
                ("P1Y"^^xsd:duration "P12M"^^xsd:duration) pred:duration-equal true.
            } => {
                :duration-equal-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("P1Y"^^xsd:duration "P12M"^^xsd:duration) pred:duration-equal true.
        } => {
            :duration-equal-1 :result true.
        }}]
        skolem:lemma358
        [ a r:Fact; r:gives {{
            ("P1Y"^^xsd:duration "P12M"^^xsd:duration) pred:duration-equal true.
        } e:labelvars {
            ("P1Y"^^xsd:duration "P12M"^^xsd:duration) pred:duration-equal true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("P1Y"^^xsd:duration "P12M"^^xsd:duration) pred:duration-equal true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#duration-equal-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma136 a r:Inference;
    r:gives {
        {
            {
                ("PT24H"^^xsd:duration "P1D"^^xsd:duration) pred:duration-equal true.
            } => {
                :duration-equal-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("PT24H"^^xsd:duration "P1D"^^xsd:duration) pred:duration-equal true.
        } => {
            :duration-equal-2 :result true.
        }}]
        skolem:lemma359
        [ a r:Fact; r:gives {{
            ("PT24H"^^xsd:duration "P1D"^^xsd:duration) pred:duration-equal true.
        } e:labelvars {
            ("PT24H"^^xsd:duration "P1D"^^xsd:duration) pred:duration-equal true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("PT24H"^^xsd:duration "P1D"^^xsd:duration) pred:duration-equal true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#duration-equal-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma137 a r:Inference;
    r:gives {
        {
            {
                ("P1Y"^^xsd:duration "P365D"^^xsd:duration) pred:duration-equal false.
            } => {
                :duration-equal-3 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("P1Y"^^xsd:duration "P365D"^^xsd:duration) pred:duration-equal false.
        } => {
            :duration-equal-3 :result true.
        }}]
        skolem:lemma360
        [ a r:Fact; r:gives {{
            ("P1Y"^^xsd:duration "P365D"^^xsd:duration) pred:duration-equal false.
        } e:labelvars {
            ("P1Y"^^xsd:duration "P365D"^^xsd:duration) pred:duration-equal false.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("P1Y"^^xsd:duration "P365D"^^xsd:duration) pred:duration-equal false.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#duration-equal-3"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma138 a r:Inference;
    r:gives {
        {
            {
                ("P2Y0M0DT0H0M0S"^^xsd:duration "P24M"^^xsd:duration) pred:duration-equal true.
            } => {
                :duration-equal-4 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("P2Y0M0DT0H0M0S"^^xsd:duration "P24M"^^xsd:duration) pred:duration-equal true.
        } => {
            :duration-equal-4 :result true.
        }}]
        skolem:lemma361
        [ a r:Fact; r:gives {{
            ("P2Y0M0DT0H0M0S"^^xsd:duration "P24M"^^xsd:duration) pred:duration-equal true.
        } e:labelvars {
            ("P2Y0M0DT0H0M0S"^^xsd:duration "P24M"^^xsd:duration) pred:duration-equal true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("P2Y0M0DT0H0M0S"^^xsd:duration "P24M"^^xsd:duration) pred:duration-equal true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#duration-equal-4"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma139 a r:Inference;
    r:gives {
        {
            {
                ("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-less-than true.
            } => {
                :dayTimeDuration-less-than-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-less-than true.
        } => {
            :dayTimeDuration-less-than-1 :result true.
        }}]
        skolem:lemma362
        [ a r:Fact; r:gives {{
            ("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-less-than true.
        } e:labelvars {
            ("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-less-than true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-less-than true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#dayTimeDuration-less-than-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma140 a r:Inference;
    r:gives {
        {
            {
                ("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-greater-than false.
            } => {
                :dayTimeDuration-greater-than-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-greater-than false.
        } => {
            :dayTimeDuration-greater-than-1 :result true.
        }}]
        skolem:lemma363
        [ a r:Fact; r:gives {{
            ("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-greater-than false.
        } e:labelvars {
            ("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-greater-than false.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-greater-than false.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#dayTimeDuration-greater-than-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma141 a r:Inference;
    r:gives {
        {
            {
                ("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-less-than true.
            } => {
                :yearMonthDuration-less-than-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-less-than true.
        } => {
            :yearMonthDuration-less-than-1 :result true.
        }}]
        skolem:lemma364
        [ a r:Fact; r:gives {{
            ("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-less-than true.
        } e:labelvars {
            ("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-less-than true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-less-than true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#yearMonthDuration-less-than-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma142 a r:Inference;
    r:gives {
        {
            {
                ("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-greater-than false.
            } => {
                :yearMonthDuration-greater-than-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-greater-than false.
        } => {
            :yearMonthDuration-greater-than-1 :result true.
        }}]
        skolem:lemma365
        [ a r:Fact; r:gives {{
            ("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-greater-than false.
        } e:labelvars {
            ("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-greater-than false.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-greater-than false.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#yearMonthDuration-greater-than-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma143 a r:Inference;
    r:gives {
        {
            {
                ("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-not-equal false.
            } => {
                :dateTime-not-equal-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-not-equal false.
        } => {
            :dateTime-not-equal-1 :result true.
        }}]
        skolem:lemma366
        [ a r:Fact; r:gives {{
            ("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-not-equal false.
        } e:labelvars {
            ("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-not-equal false.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-not-equal false.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#dateTime-not-equal-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma144 a r:Inference;
    r:gives {
        {
            {
                ("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-less-than-or-equal true.
            } => {
                :dateTime-less-than-or-equal-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-less-than-or-equal true.
        } => {
            :dateTime-less-than-or-equal-1 :result true.
        }}]
        skolem:lemma367
        [ a r:Fact; r:gives {{
            ("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-less-than-or-equal true.
        } e:labelvars {
            ("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-less-than-or-equal true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-less-than-or-equal true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#dateTime-less-than-or-equal-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma145 a r:Inference;
    r:gives {
        {
            {
                ("2010-04-02T12:00:00-01:00"^^xsd:dateTime "2010-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-greater-than-or-equal true.
            } => {
                :dateTime-greater-than-or-equal-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("2010-04-02T12:00:00-01:00"^^xsd:dateTime "2010-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-greater-than-or-equal true.
        } => {
            :dateTime-greater-than-or-equal-1 :result true.
        }}]
        skolem:lemma368
        [ a r:Fact; r:gives {{
            ("2010-04-02T12:00:00-01:00"^^xsd:dateTime "2010-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-greater-than-or-equal true.
        } e:labelvars {
            ("2010-04-02T12:00:00-01:00"^^xsd:dateTime "2010-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-greater-than-or-equal true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("2010-04-02T12:00:00-01:00"^^xsd:dateTime "2010-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-greater-than-or-equal true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#dateTime-greater-than-or-equal-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma146 a r:Inference;
    r:gives {
        {
            {
                ("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-not-equal true.
            } => {
                :date-not-equal-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-not-equal true.
        } => {
            :date-not-equal-1 :result true.
        }}]
        skolem:lemma369
        [ a r:Fact; r:gives {{
            ("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-not-equal true.
        } e:labelvars {
            ("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-not-equal true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-not-equal true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#date-not-equal-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma147 a r:Inference;
    r:gives {
        {
            {
                ("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-less-than-or-equal false.
            } => {
                :date-less-than-or-equal-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-less-than-or-equal false.
        } => {
            :date-less-than-or-equal-1 :result true.
        }}]
        skolem:lemma370
        [ a r:Fact; r:gives {{
            ("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-less-than-or-equal false.
        } e:labelvars {
            ("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-less-than-or-equal false.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-less-than-or-equal false.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#date-less-than-or-equal-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma148 a r:Inference;
    r:gives {
        {
            {
                ("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-greater-than-or-equal true.
            } => {
                :date-greater-than-or-equal-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-greater-than-or-equal true.
        } => {
            :date-greater-than-or-equal-1 :result true.
        }}]
        skolem:lemma371
        [ a r:Fact; r:gives {{
            ("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-greater-than-or-equal true.
        } e:labelvars {
            ("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-greater-than-or-equal true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-greater-than-or-equal true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#date-greater-than-or-equal-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma149 a r:Inference;
    r:gives {
        {
            {
                ("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-not-equal true.
            } => {
                :time-not-equal-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-not-equal true.
        } => {
            :time-not-equal-1 :result true.
        }}]
        skolem:lemma372
        [ a r:Fact; r:gives {{
            ("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-not-equal true.
        } e:labelvars {
            ("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-not-equal true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-not-equal true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#time-not-equal-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma150 a r:Inference;
    r:gives {
        {
            {
                ("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-less-than-or-equal true.
            } => {
                :time-less-than-or-equal-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-less-than-or-equal true.
        } => {
            :time-less-than-or-equal-1 :result true.
        }}]
        skolem:lemma373
        [ a r:Fact; r:gives {{
            ("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-less-than-or-equal true.
        } e:labelvars {
            ("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-less-than-or-equal true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-less-than-or-equal true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#time-less-than-or-equal-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma151 a r:Inference;
    r:gives {
        {
            {
                ("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-greater-than-or-equal false.
            } => {
                :time-greater-than-or-equal-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-greater-than-or-equal false.
        } => {
            :time-greater-than-or-equal-1 :result true.
        }}]
        skolem:lemma374
        [ a r:Fact; r:gives {{
            ("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-greater-than-or-equal false.
        } e:labelvars {
            ("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-greater-than-or-equal false.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-greater-than-or-equal false.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#time-greater-than-or-equal-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma152 a r:Inference;
    r:gives {
        {
            {
                ("P1Y"^^xsd:duration "P12M"^^xsd:duration) pred:duration-not-equal false.
            } => {
                :duration-not-equal-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("P1Y"^^xsd:duration "P12M"^^xsd:duration) pred:duration-not-equal false.
        } => {
            :duration-not-equal-1 :result true.
        }}]
        skolem:lemma375
        [ a r:Fact; r:gives {{
            ("P1Y"^^xsd:duration "P12M"^^xsd:duration) pred:duration-not-equal false.
        } e:labelvars {
            ("P1Y"^^xsd:duration "P12M"^^xsd:duration) pred:duration-not-equal false.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("P1Y"^^xsd:duration "P12M"^^xsd:duration) pred:duration-not-equal false.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#duration-not-equal-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma153 a r:Inference;
    r:gives {
        {
            {
                ("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-less-than-or-equal true.
            } => {
                :dayTimeDuration-less-than-or-equal-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-less-than-or-equal true.
        } => {
            :dayTimeDuration-less-than-or-equal-1 :result true.
        }}]
        skolem:lemma376
        [ a r:Fact; r:gives {{
            ("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-less-than-or-equal true.
        } e:labelvars {
            ("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-less-than-or-equal true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-less-than-or-equal true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#dayTimeDuration-less-than-or-equal-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma154 a r:Inference;
    r:gives {
        {
            {
                ("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-greater-than-or-equal false.
            } => {
                :dayTimeDuration-greater-than-or-equal-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-greater-than-or-equal false.
        } => {
            :dayTimeDuration-greater-than-or-equal-1 :result true.
        }}]
        skolem:lemma377
        [ a r:Fact; r:gives {{
            ("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-greater-than-or-equal false.
        } e:labelvars {
            ("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-greater-than-or-equal false.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-greater-than-or-equal false.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#dayTimeDuration-greater-than-or-equal-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma155 a r:Inference;
    r:gives {
        {
            {
                ("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-less-than-or-equal true.
            } => {
                :yearMonthDuration-less-than-or-equal-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-less-than-or-equal true.
        } => {
            :yearMonthDuration-less-than-or-equal-1 :result true.
        }}]
        skolem:lemma378
        [ a r:Fact; r:gives {{
            ("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-less-than-or-equal true.
        } e:labelvars {
            ("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-less-than-or-equal true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-less-than-or-equal true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#yearMonthDuration-less-than-or-equal-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma156 a r:Inference;
    r:gives {
        {
            {
                ("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-greater-than-or-equal false.
            } => {
                :yearMonthDuration-greater-than-or-equal-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-greater-than-or-equal false.
        } => {
            :yearMonthDuration-greater-than-or-equal-1 :result true.
        }}]
        skolem:lemma379
        [ a r:Fact; r:gives {{
            ("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-greater-than-or-equal false.
        } e:labelvars {
            ("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-greater-than-or-equal false.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-greater-than-or-equal false.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#yearMonthDuration-greater-than-or-equal-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma157 a r:Inference;
    r:gives {
        {
            {
                ("Family Guy") func:PlainLiteral-from-string-lang "Family Guy".
            } => {
                :PlainLiteral-from-string-lang-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("Family Guy") func:PlainLiteral-from-string-lang "Family Guy".
        } => {
            :PlainLiteral-from-string-lang-1 :result true.
        }}]
        skolem:lemma380
        [ a r:Fact; r:gives {{
            ("Family Guy") func:PlainLiteral-from-string-lang "Family Guy".
        } e:labelvars {
            ("Family Guy") func:PlainLiteral-from-string-lang "Family Guy".
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("Family Guy") func:PlainLiteral-from-string-lang "Family Guy".
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#PlainLiteral-from-string-lang-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma158 a r:Inference;
    r:gives {
        {
            {
                ("Family Guy" "EN") func:PlainLiteral-from-string-lang "Family Guy"@en.
            } => {
                :PlainLiteral-from-string-lang-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("Family Guy" "EN") func:PlainLiteral-from-string-lang "Family Guy"@en.
        } => {
            :PlainLiteral-from-string-lang-2 :result true.
        }}]
        skolem:lemma381
        [ a r:Fact; r:gives {{
            ("Family Guy" "EN") func:PlainLiteral-from-string-lang "Family Guy"@en.
        } e:labelvars {
            ("Family Guy" "EN") func:PlainLiteral-from-string-lang "Family Guy"@en.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("Family Guy" "EN") func:PlainLiteral-from-string-lang "Family Guy"@en.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#PlainLiteral-from-string-lang-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma159 a r:Inference;
    r:gives {
        {
            {
                ("Family Guy") func:string-from-PlainLiteral "Family Guy".
            } => {
                :string-from-PlainLiteral-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("Family Guy") func:string-from-PlainLiteral "Family Guy".
        } => {
            :string-from-PlainLiteral-1 :result true.
        }}]
        skolem:lemma382
        [ a r:Fact; r:gives {{
            ("Family Guy") func:string-from-PlainLiteral "Family Guy".
        } e:labelvars {
            ("Family Guy") func:string-from-PlainLiteral "Family Guy".
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("Family Guy") func:string-from-PlainLiteral "Family Guy".
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#string-from-PlainLiteral-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma160 a r:Inference;
    r:gives {
        {
            {
                ("Family Guy"@en) func:string-from-PlainLiteral "Family Guy".
            } => {
                :string-from-PlainLiteral-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("Family Guy"@en) func:string-from-PlainLiteral "Family Guy".
        } => {
            :string-from-PlainLiteral-2 :result true.
        }}]
        skolem:lemma383
        [ a r:Fact; r:gives {{
            ("Family Guy"@en) func:string-from-PlainLiteral "Family Guy".
        } e:labelvars {
            ("Family Guy"@en) func:string-from-PlainLiteral "Family Guy".
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("Family Guy"@en) func:string-from-PlainLiteral "Family Guy".
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#string-from-PlainLiteral-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma161 a r:Inference;
    r:gives {
        {
            {
                ("Family Guy") func:lang-from-PlainLiteral "".
            } => {
                :lang-from-PlainLiteral-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("Family Guy") func:lang-from-PlainLiteral "".
        } => {
            :lang-from-PlainLiteral-1 :result true.
        }}]
        skolem:lemma384
        [ a r:Fact; r:gives {{
            ("Family Guy") func:lang-from-PlainLiteral "".
        } e:labelvars {
            ("Family Guy") func:lang-from-PlainLiteral "".
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("Family Guy") func:lang-from-PlainLiteral "".
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#lang-from-PlainLiteral-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma162 a r:Inference;
    r:gives {
        {
            {
                ("Family Guy"@en) func:lang-from-PlainLiteral "en".
            } => {
                :lang-from-PlainLiteral-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("Family Guy"@en) func:lang-from-PlainLiteral "en".
        } => {
            :lang-from-PlainLiteral-2 :result true.
        }}]
        skolem:lemma385
        [ a r:Fact; r:gives {{
            ("Family Guy"@en) func:lang-from-PlainLiteral "en".
        } e:labelvars {
            ("Family Guy"@en) func:lang-from-PlainLiteral "en".
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("Family Guy"@en) func:lang-from-PlainLiteral "en".
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#lang-from-PlainLiteral-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma163 a r:Inference;
    r:gives {
        {
            {
                ("Family Guy" "Mother") func:PlainLiteral-compare -1.
            } => {
                :PlainLiteral-compare-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("Family Guy" "Mother") func:PlainLiteral-compare -1.
        } => {
            :PlainLiteral-compare-1 :result true.
        }}]
        skolem:lemma386
        [ a r:Fact; r:gives {{
            ("Family Guy" "Mother") func:PlainLiteral-compare -1.
        } e:labelvars {
            ("Family Guy" "Mother") func:PlainLiteral-compare -1.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("Family Guy" "Mother") func:PlainLiteral-compare -1.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#PlainLiteral-compare-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma164 a r:Inference;
    r:gives {
        {
            {
                ("Family Guy"@en "Brother"@en) func:PlainLiteral-compare 1.
            } => {
                :PlainLiteral-compare-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("Family Guy"@en "Brother"@en) func:PlainLiteral-compare 1.
        } => {
            :PlainLiteral-compare-2 :result true.
        }}]
        skolem:lemma387
        [ a r:Fact; r:gives {{
            ("Family Guy"@en "Brother"@en) func:PlainLiteral-compare 1.
        } e:labelvars {
            ("Family Guy"@en "Brother"@en) func:PlainLiteral-compare 1.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("Family Guy"@en "Brother"@en) func:PlainLiteral-compare 1.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#PlainLiteral-compare-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma165 a r:Inference;
    r:gives {
        {
            {
                ("Family Guy") func:PlainLiteral-length 10.
            } => {
                :PlainLiteral-length-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("Family Guy") func:PlainLiteral-length 10.
        } => {
            :PlainLiteral-length-1 :result true.
        }}]
        skolem:lemma388
        [ a r:Fact; r:gives {{
            ("Family Guy") func:PlainLiteral-length 10.
        } e:labelvars {
            ("Family Guy") func:PlainLiteral-length 10.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("Family Guy") func:PlainLiteral-length 10.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#PlainLiteral-length-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma166 a r:Inference;
    r:gives {
        {
            {
                ("Family Guy"@en) func:PlainLiteral-length 10.
            } => {
                :PlainLiteral-length-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("Family Guy"@en) func:PlainLiteral-length 10.
        } => {
            :PlainLiteral-length-2 :result true.
        }}]
        skolem:lemma389
        [ a r:Fact; r:gives {{
            ("Family Guy"@en) func:PlainLiteral-length 10.
        } e:labelvars {
            ("Family Guy"@en) func:PlainLiteral-length 10.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("Family Guy"@en) func:PlainLiteral-length 10.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#PlainLiteral-length-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma167 a r:Inference;
    r:gives {
        {
            {
                ("Family Guy"@en "en") pred:matches-language-range true.
            } => {
                :matches-language-range-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("Family Guy"@en "en") pred:matches-language-range true.
        } => {
            :matches-language-range-1 :result true.
        }}]
        skolem:lemma390
        [ a r:Fact; r:gives {{
            ("Family Guy"@en "en") pred:matches-language-range true.
        } e:labelvars {
            ("Family Guy"@en "en") pred:matches-language-range true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("Family Guy"@en "en") pred:matches-language-range true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#matches-language-range-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma168 a r:Inference;
    r:gives {
        {
            {
                ("Family Guy"@en-us "en-*") pred:matches-language-range true.
            } => {
                :matches-language-range-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ("Family Guy"@en-us "en-*") pred:matches-language-range true.
        } => {
            :matches-language-range-2 :result true.
        }}]
        skolem:lemma391
        [ a r:Fact; r:gives {{
            ("Family Guy"@en-us "en-*") pred:matches-language-range true.
        } e:labelvars {
            ("Family Guy"@en-us "en-*") pred:matches-language-range true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ("Family Guy"@en-us "en-*") pred:matches-language-range true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#matches-language-range-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma169 a r:Inference;
    r:gives {
        {
            {
                ((:a :b :c :d)) pred:is-list true.
            } => {
                :is-list-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((:a :b :c :d)) pred:is-list true.
        } => {
            :is-list-1 :result true.
        }}]
        skolem:lemma392
        [ a r:Fact; r:gives {{
            ((:a :b :c :d)) pred:is-list true.
        } e:labelvars {
            ((:a :b :c :d)) pred:is-list true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((:a :b :c :d)) pred:is-list true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#is-list-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma170 a r:Inference;
    r:gives {
        {
            {
                ((:a :b :c :d) :b) pred:list-contains true.
            } => {
                :list-contains-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((:a :b :c :d) :b) pred:list-contains true.
        } => {
            :list-contains-1 :result true.
        }}]
        skolem:lemma393
        [ a r:Fact; r:gives {{
            ((:a :b :c :d) :b) pred:list-contains true.
        } e:labelvars {
            ((:a :b :c :d) :b) pred:list-contains true.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((:a :b :c :d) :b) pred:list-contains true.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#list-contains-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma171 a r:Inference;
    r:gives {
        {
            {
                (:a :b :c :d) func:make-list (:a :b :c :d).
            } => {
                :make-list-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            (:a :b :c :d) func:make-list (:a :b :c :d).
        } => {
            :make-list-1 :result true.
        }}]
        skolem:lemma394
        [ a r:Fact; r:gives {{
            (:a :b :c :d) func:make-list (:a :b :c :d).
        } e:labelvars {
            (:a :b :c :d) func:make-list (:a :b :c :d).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        (:a :b :c :d) func:make-list (:a :b :c :d).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#make-list-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma172 a r:Inference;
    r:gives {
        {
            {
                ((:a :b :c :d)) func:count 4.
            } => {
                :count-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((:a :b :c :d)) func:count 4.
        } => {
            :count-1 :result true.
        }}]
        skolem:lemma395
        [ a r:Fact; r:gives {{
            ((:a :b :c :d)) func:count 4.
        } e:labelvars {
            ((:a :b :c :d)) func:count 4.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((:a :b :c :d)) func:count 4.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#count-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma173 a r:Inference;
    r:gives {
        {
            {
                ((:a :b :c :d) 3) func:get :d.
            } => {
                :get-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((:a :b :c :d) 3) func:get :d.
        } => {
            :get-1 :result true.
        }}]
        skolem:lemma396
        [ a r:Fact; r:gives {{
            ((:a :b :c :d) 3) func:get :d.
        } e:labelvars {
            ((:a :b :c :d) 3) func:get :d.
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((:a :b :c :d) 3) func:get :d.
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#get-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma174 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2 3 4) 0 0) func:sublist ().
            } => {
                :sublist-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) 0 0) func:sublist ().
        } => {
            :sublist-1 :result true.
        }}]
        skolem:lemma397
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) 0 0) func:sublist ().
        } e:labelvars {
            ((0 1 2 3 4) 0 0) func:sublist ().
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2 3 4) 0 0) func:sublist ().
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#sublist-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma175 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2 3 4) 0 1) func:sublist (0).
            } => {
                :sublist-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) 0 1) func:sublist (0).
        } => {
            :sublist-2 :result true.
        }}]
        skolem:lemma398
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) 0 1) func:sublist (0).
        } e:labelvars {
            ((0 1 2 3 4) 0 1) func:sublist (0).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2 3 4) 0 1) func:sublist (0).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#sublist-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma176 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2 3 4) 0 4) func:sublist (0 1 2 3).
            } => {
                :sublist-3 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) 0 4) func:sublist (0 1 2 3).
        } => {
            :sublist-3 :result true.
        }}]
        skolem:lemma399
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) 0 4) func:sublist (0 1 2 3).
        } e:labelvars {
            ((0 1 2 3 4) 0 4) func:sublist (0 1 2 3).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2 3 4) 0 4) func:sublist (0 1 2 3).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#sublist-3"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma177 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2 3 4) 0 5) func:sublist (0 1 2 3 4).
            } => {
                :sublist-4 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) 0 5) func:sublist (0 1 2 3 4).
        } => {
            :sublist-4 :result true.
        }}]
        skolem:lemma400
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) 0 5) func:sublist (0 1 2 3 4).
        } e:labelvars {
            ((0 1 2 3 4) 0 5) func:sublist (0 1 2 3 4).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2 3 4) 0 5) func:sublist (0 1 2 3 4).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#sublist-4"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma178 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2 3 4) 0 10) func:sublist (0 1 2 3 4).
            } => {
                :sublist-5 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) 0 10) func:sublist (0 1 2 3 4).
        } => {
            :sublist-5 :result true.
        }}]
        skolem:lemma401
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) 0 10) func:sublist (0 1 2 3 4).
        } e:labelvars {
            ((0 1 2 3 4) 0 10) func:sublist (0 1 2 3 4).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2 3 4) 0 10) func:sublist (0 1 2 3 4).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#sublist-5"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma179 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2 3 4) 0 -2) func:sublist (0 1 2).
            } => {
                :sublist-6 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) 0 -2) func:sublist (0 1 2).
        } => {
            :sublist-6 :result true.
        }}]
        skolem:lemma402
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) 0 -2) func:sublist (0 1 2).
        } e:labelvars {
            ((0 1 2 3 4) 0 -2) func:sublist (0 1 2).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2 3 4) 0 -2) func:sublist (0 1 2).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#sublist-6"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma180 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2 3 4) 2 4) func:sublist (2 3).
            } => {
                :sublist-7 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) 2 4) func:sublist (2 3).
        } => {
            :sublist-7 :result true.
        }}]
        skolem:lemma403
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) 2 4) func:sublist (2 3).
        } e:labelvars {
            ((0 1 2 3 4) 2 4) func:sublist (2 3).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2 3 4) 2 4) func:sublist (2 3).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#sublist-7"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma181 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2 3 4) 2 -2) func:sublist (2).
            } => {
                :sublist-9 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) 2 -2) func:sublist (2).
        } => {
            :sublist-9 :result true.
        }}]
        skolem:lemma404
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) 2 -2) func:sublist (2).
        } e:labelvars {
            ((0 1 2 3 4) 2 -2) func:sublist (2).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2 3 4) 2 -2) func:sublist (2).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#sublist-9"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma182 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2 3 4) 0) func:sublist (0 1 2 3 4).
            } => {
                :sublist-9 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) 0) func:sublist (0 1 2 3 4).
        } => {
            :sublist-9 :result true.
        }}]
        skolem:lemma404
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) 0) func:sublist (0 1 2 3 4).
        } e:labelvars {
            ((0 1 2 3 4) 0) func:sublist (0 1 2 3 4).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2 3 4) 0) func:sublist (0 1 2 3 4).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#sublist-9"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma183 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2 3 4) 3) func:sublist (3 4).
            } => {
                :sublist-10 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) 3) func:sublist (3 4).
        } => {
            :sublist-10 :result true.
        }}]
        skolem:lemma405
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) 3) func:sublist (3 4).
        } e:labelvars {
            ((0 1 2 3 4) 3) func:sublist (3 4).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2 3 4) 3) func:sublist (3 4).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#sublist-10"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma184 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2 3 4) -2) func:sublist (3 4).
            } => {
                :sublist-11 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) -2) func:sublist (3 4).
        } => {
            :sublist-11 :result true.
        }}]
        skolem:lemma406
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) -2) func:sublist (3 4).
        } e:labelvars {
            ((0 1 2 3 4) -2) func:sublist (3 4).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2 3 4) -2) func:sublist (3 4).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#sublist-11"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma185 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2) 3) func:append (0 1 2 3).
            } => {
                :append-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2) 3) func:append (0 1 2 3).
        } => {
            :append-1 :result true.
        }}]
        skolem:lemma407
        [ a r:Fact; r:gives {{
            ((0 1 2) 3) func:append (0 1 2 3).
        } e:labelvars {
            ((0 1 2) 3) func:append (0 1 2 3).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2) 3) func:append (0 1 2 3).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#append-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma186 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2) 3 4) func:append (0 1 2 3 4).
            } => {
                :append-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2) 3 4) func:append (0 1 2 3 4).
        } => {
            :append-2 :result true.
        }}]
        skolem:lemma408
        [ a r:Fact; r:gives {{
            ((0 1 2) 3 4) func:append (0 1 2 3 4).
        } e:labelvars {
            ((0 1 2) 3 4) func:append (0 1 2 3 4).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2) 3 4) func:append (0 1 2 3 4).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#append-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma187 a r:Inference;
    r:gives {
        {
            {
                ((1 1) (1) (1) ((1))) func:append (1 1 (1) (1) ((1))).
            } => {
                :append-3 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((1 1) (1) (1) ((1))) func:append (1 1 (1) (1) ((1))).
        } => {
            :append-3 :result true.
        }}]
        skolem:lemma409
        [ a r:Fact; r:gives {{
            ((1 1) (1) (1) ((1))) func:append (1 1 (1) (1) ((1))).
        } e:labelvars {
            ((1 1) (1) (1) ((1))) func:append (1 1 (1) (1) ((1))).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((1 1) (1) (1) ((1))) func:append (1 1 (1) (1) ((1))).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#append-3"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma188 a r:Inference;
    r:gives {
        {
            {
                (() 1) func:append (1).
            } => {
                :append-4 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            (() 1) func:append (1).
        } => {
            :append-4 :result true.
        }}]
        skolem:lemma410
        [ a r:Fact; r:gives {{
            (() 1) func:append (1).
        } e:labelvars {
            (() 1) func:append (1).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        (() 1) func:append (1).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#append-4"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma189 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2) (3 4 5)) func:concatenate (0 1 2 3 4 5).
            } => {
                :concatenate-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2) (3 4 5)) func:concatenate (0 1 2 3 4 5).
        } => {
            :concatenate-1 :result true.
        }}]
        skolem:lemma411
        [ a r:Fact; r:gives {{
            ((0 1 2) (3 4 5)) func:concatenate (0 1 2 3 4 5).
        } e:labelvars {
            ((0 1 2) (3 4 5)) func:concatenate (0 1 2 3 4 5).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2) (3 4 5)) func:concatenate (0 1 2 3 4 5).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#concatenate-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma190 a r:Inference;
    r:gives {
        {
            {
                ((1 1) (1) (1)) func:concatenate (1 1 1 1).
            } => {
                :concatenate-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((1 1) (1) (1)) func:concatenate (1 1 1 1).
        } => {
            :concatenate-2 :result true.
        }}]
        skolem:lemma412
        [ a r:Fact; r:gives {{
            ((1 1) (1) (1)) func:concatenate (1 1 1 1).
        } e:labelvars {
            ((1 1) (1) (1)) func:concatenate (1 1 1 1).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((1 1) (1) (1)) func:concatenate (1 1 1 1).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#concatenate-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma191 a r:Inference;
    r:gives {
        {
            {
                (()) func:concatenate ().
            } => {
                :concatenate-3 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            (()) func:concatenate ().
        } => {
            :concatenate-3 :result true.
        }}]
        skolem:lemma413
        [ a r:Fact; r:gives {{
            (()) func:concatenate ().
        } e:labelvars {
            (()) func:concatenate ().
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        (()) func:concatenate ().
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#concatenate-3"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma192 a r:Inference;
    r:gives {
        {
            {
                (() (1) () (2) ((3))) func:concatenate (1 2 (3)).
            } => {
                :concatenate-4 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            (() (1) () (2) ((3))) func:concatenate (1 2 (3)).
        } => {
            :concatenate-4 :result true.
        }}]
        skolem:lemma414
        [ a r:Fact; r:gives {{
            (() (1) () (2) ((3))) func:concatenate (1 2 (3)).
        } e:labelvars {
            (() (1) () (2) ((3))) func:concatenate (1 2 (3)).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        (() (1) () (2) ((3))) func:concatenate (1 2 (3)).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#concatenate-4"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma193 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2 3 4) 0 99) func:insert-before (99 0 1 2 3 4).
            } => {
                :insert-before-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) 0 99) func:insert-before (99 0 1 2 3 4).
        } => {
            :insert-before-1 :result true.
        }}]
        skolem:lemma415
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) 0 99) func:insert-before (99 0 1 2 3 4).
        } e:labelvars {
            ((0 1 2 3 4) 0 99) func:insert-before (99 0 1 2 3 4).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2 3 4) 0 99) func:insert-before (99 0 1 2 3 4).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#insert-before-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma194 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2 3 4) 1 99) func:insert-before (0 99 1 2 3 4).
            } => {
                :insert-before-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) 1 99) func:insert-before (0 99 1 2 3 4).
        } => {
            :insert-before-2 :result true.
        }}]
        skolem:lemma416
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) 1 99) func:insert-before (0 99 1 2 3 4).
        } e:labelvars {
            ((0 1 2 3 4) 1 99) func:insert-before (0 99 1 2 3 4).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2 3 4) 1 99) func:insert-before (0 99 1 2 3 4).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#insert-before-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma195 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2 3 4) -1 99) func:insert-before (0 1 2 3 99 4).
            } => {
                :insert-before-3 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) -1 99) func:insert-before (0 1 2 3 99 4).
        } => {
            :insert-before-3 :result true.
        }}]
        skolem:lemma417
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) -1 99) func:insert-before (0 1 2 3 99 4).
        } e:labelvars {
            ((0 1 2 3 4) -1 99) func:insert-before (0 1 2 3 99 4).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2 3 4) -1 99) func:insert-before (0 1 2 3 99 4).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#insert-before-3"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma196 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2 3 4) -5 99) func:insert-before (99 0 1 2 3 4).
            } => {
                :insert-before-4 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) -5 99) func:insert-before (99 0 1 2 3 4).
        } => {
            :insert-before-4 :result true.
        }}]
        skolem:lemma418
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) -5 99) func:insert-before (99 0 1 2 3 4).
        } e:labelvars {
            ((0 1 2 3 4) -5 99) func:insert-before (99 0 1 2 3 4).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2 3 4) -5 99) func:insert-before (99 0 1 2 3 4).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#insert-before-4"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma197 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2 3 4) 0) func:remove (1 2 3 4).
            } => {
                :remove-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) 0) func:remove (1 2 3 4).
        } => {
            :remove-1 :result true.
        }}]
        skolem:lemma419
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) 0) func:remove (1 2 3 4).
        } e:labelvars {
            ((0 1 2 3 4) 0) func:remove (1 2 3 4).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2 3 4) 0) func:remove (1 2 3 4).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#remove-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma198 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2 3 4) 1) func:remove (0 2 3 4).
            } => {
                :remove-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) 1) func:remove (0 2 3 4).
        } => {
            :remove-2 :result true.
        }}]
        skolem:lemma420
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) 1) func:remove (0 2 3 4).
        } e:labelvars {
            ((0 1 2 3 4) 1) func:remove (0 2 3 4).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2 3 4) 1) func:remove (0 2 3 4).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#remove-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma199 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2 3 4) 4) func:remove (0 1 2 3).
            } => {
                :remove-3 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) 4) func:remove (0 1 2 3).
        } => {
            :remove-3 :result true.
        }}]
        skolem:lemma421
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) 4) func:remove (0 1 2 3).
        } e:labelvars {
            ((0 1 2 3 4) 4) func:remove (0 1 2 3).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2 3 4) 4) func:remove (0 1 2 3).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#remove-3"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma200 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2 3 4) -1) func:remove (0 1 2 3).
            } => {
                :remove-4 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) -1) func:remove (0 1 2 3).
        } => {
            :remove-4 :result true.
        }}]
        skolem:lemma422
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) -1) func:remove (0 1 2 3).
        } e:labelvars {
            ((0 1 2 3 4) -1) func:remove (0 1 2 3).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2 3 4) -1) func:remove (0 1 2 3).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#remove-4"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma201 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2 3 4) -5) func:remove (1 2 3 4).
            } => {
                :remove-5 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) -5) func:remove (1 2 3 4).
        } => {
            :remove-5 :result true.
        }}]
        skolem:lemma423
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) -5) func:remove (1 2 3 4).
        } e:labelvars {
            ((0 1 2 3 4) -5) func:remove (1 2 3 4).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2 3 4) -5) func:remove (1 2 3 4).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#remove-5"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma202 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2 3 4)) func:reverse (4 3 2 1 0).
            } => {
                :reverse-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4)) func:reverse (4 3 2 1 0).
        } => {
            :reverse-1 :result true.
        }}]
        skolem:lemma424
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4)) func:reverse (4 3 2 1 0).
        } e:labelvars {
            ((0 1 2 3 4)) func:reverse (4 3 2 1 0).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2 3 4)) func:reverse (4 3 2 1 0).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#reverse-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma203 a r:Inference;
    r:gives {
        {
            {
                ((1)) func:reverse (1).
            } => {
                :reverse-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((1)) func:reverse (1).
        } => {
            :reverse-2 :result true.
        }}]
        skolem:lemma425
        [ a r:Fact; r:gives {{
            ((1)) func:reverse (1).
        } e:labelvars {
            ((1)) func:reverse (1).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((1)) func:reverse (1).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#reverse-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma204 a r:Inference;
    r:gives {
        {
            {
                (()) func:reverse ().
            } => {
                :reverse-3 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            (()) func:reverse ().
        } => {
            :reverse-3 :result true.
        }}]
        skolem:lemma426
        [ a r:Fact; r:gives {{
            (()) func:reverse ().
        } e:labelvars {
            (()) func:reverse ().
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        (()) func:reverse ().
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#reverse-3"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma205 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2 3 4) 2) func:index-of (2).
            } => {
                :index-of-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) 2) func:index-of (2).
        } => {
            :index-of-1 :result true.
        }}]
        skolem:lemma427
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) 2) func:index-of (2).
        } e:labelvars {
            ((0 1 2 3 4) 2) func:index-of (2).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2 3 4) 2) func:index-of (2).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#index-of-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma206 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2 3 4 5 2 2) 2) func:index-of (2 6 7).
            } => {
                :index-of-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4 5 2 2) 2) func:index-of (2 6 7).
        } => {
            :index-of-2 :result true.
        }}]
        skolem:lemma428
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4 5 2 2) 2) func:index-of (2 6 7).
        } e:labelvars {
            ((0 1 2 3 4 5 2 2) 2) func:index-of (2 6 7).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2 3 4 5 2 2) 2) func:index-of (2 6 7).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#index-of-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma207 a r:Inference;
    r:gives {
        {
            {
                ((2 2 3 4 5 2 2) 2) func:index-of (0 1 5 6).
            } => {
                :index-of-3 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((2 2 3 4 5 2 2) 2) func:index-of (0 1 5 6).
        } => {
            :index-of-3 :result true.
        }}]
        skolem:lemma429
        [ a r:Fact; r:gives {{
            ((2 2 3 4 5 2 2) 2) func:index-of (0 1 5 6).
        } e:labelvars {
            ((2 2 3 4 5 2 2) 2) func:index-of (0 1 5 6).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((2 2 3 4 5 2 2) 2) func:index-of (0 1 5 6).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#index-of-3"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma208 a r:Inference;
    r:gives {
        {
            {
                ((2 2 3 4 5 2 2) 1) func:index-of ().
            } => {
                :index-of-4 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((2 2 3 4 5 2 2) 1) func:index-of ().
        } => {
            :index-of-4 :result true.
        }}]
        skolem:lemma430
        [ a r:Fact; r:gives {{
            ((2 2 3 4 5 2 2) 1) func:index-of ().
        } e:labelvars {
            ((2 2 3 4 5 2 2) 1) func:index-of ().
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((2 2 3 4 5 2 2) 1) func:index-of ().
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#index-of-4"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma209 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2 4) (3 4 5 6)) func:union (0 1 2 4 3 5 6).
            } => {
                :union-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2 4) (3 4 5 6)) func:union (0 1 2 4 3 5 6).
        } => {
            :union-1 :result true.
        }}]
        skolem:lemma431
        [ a r:Fact; r:gives {{
            ((0 1 2 4) (3 4 5 6)) func:union (0 1 2 4 3 5 6).
        } e:labelvars {
            ((0 1 2 4) (3 4 5 6)) func:union (0 1 2 4 3 5 6).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2 4) (3 4 5 6)) func:union (0 1 2 4 3 5 6).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#union-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma210 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2 3) (4)) func:union (0 1 2 3 4).
            } => {
                :union-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2 3) (4)) func:union (0 1 2 3 4).
        } => {
            :union-2 :result true.
        }}]
        skolem:lemma432
        [ a r:Fact; r:gives {{
            ((0 1 2 3) (4)) func:union (0 1 2 3 4).
        } e:labelvars {
            ((0 1 2 3) (4)) func:union (0 1 2 3 4).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2 3) (4)) func:union (0 1 2 3 4).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#union-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma211 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2 3) (3)) func:union (0 1 2 3).
            } => {
                :union-3 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2 3) (3)) func:union (0 1 2 3).
        } => {
            :union-3 :result true.
        }}]
        skolem:lemma433
        [ a r:Fact; r:gives {{
            ((0 1 2 3) (3)) func:union (0 1 2 3).
        } e:labelvars {
            ((0 1 2 3) (3)) func:union (0 1 2 3).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2 3) (3)) func:union (0 1 2 3).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#union-3"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma212 a r:Inference;
    r:gives {
        {
            {
                ((0 2 1 0)) func:union (0 2 1).
            } => {
                :union-4 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 2 1 0)) func:union (0 2 1).
        } => {
            :union-4 :result true.
        }}]
        skolem:lemma434
        [ a r:Fact; r:gives {{
            ((0 2 1 0)) func:union (0 2 1).
        } e:labelvars {
            ((0 2 1 0)) func:union (0 2 1).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 2 1 0)) func:union (0 2 1).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#union-4"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma213 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2 3 4)) func:distinct-values (0 1 2 3 4).
            } => {
                :distinct-values-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4)) func:distinct-values (0 1 2 3 4).
        } => {
            :distinct-values-1 :result true.
        }}]
        skolem:lemma435
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4)) func:distinct-values (0 1 2 3 4).
        } e:labelvars {
            ((0 1 2 3 4)) func:distinct-values (0 1 2 3 4).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2 3 4)) func:distinct-values (0 1 2 3 4).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#distinct-values-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma214 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2 3 4 0 4)) func:distinct-values (0 1 2 3 4).
            } => {
                :distinct-values-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4 0 4)) func:distinct-values (0 1 2 3 4).
        } => {
            :distinct-values-2 :result true.
        }}]
        skolem:lemma436
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4 0 4)) func:distinct-values (0 1 2 3 4).
        } e:labelvars {
            ((0 1 2 3 4 0 4)) func:distinct-values (0 1 2 3 4).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2 3 4 0 4)) func:distinct-values (0 1 2 3 4).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#distinct-values-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma215 a r:Inference;
    r:gives {
        {
            {
                ((3 3 3)) func:distinct-values (3).
            } => {
                :distinct-values-3 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((3 3 3)) func:distinct-values (3).
        } => {
            :distinct-values-3 :result true.
        }}]
        skolem:lemma437
        [ a r:Fact; r:gives {{
            ((3 3 3)) func:distinct-values (3).
        } e:labelvars {
            ((3 3 3)) func:distinct-values (3).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((3 3 3)) func:distinct-values (3).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#distinct-values-3"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma216 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2 3 4) (1 3)) func:intersect (1 3).
            } => {
                :intersect-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) (1 3)) func:intersect (1 3).
        } => {
            :intersect-1 :result true.
        }}]
        skolem:lemma438
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) (1 3)) func:intersect (1 3).
        } e:labelvars {
            ((0 1 2 3 4) (1 3)) func:intersect (1 3).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2 3 4) (1 3)) func:intersect (1 3).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#intersect-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma217 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2 3 4) (3 1)) func:intersect (1 3).
            } => {
                :intersect-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) (3 1)) func:intersect (1 3).
        } => {
            :intersect-2 :result true.
        }}]
        skolem:lemma439
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) (3 1)) func:intersect (1 3).
        } e:labelvars {
            ((0 1 2 3 4) (3 1)) func:intersect (1 3).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2 3 4) (3 1)) func:intersect (1 3).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#intersect-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma218 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2 3 4) ()) func:intersect ().
            } => {
                :intersect-3 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) ()) func:intersect ().
        } => {
            :intersect-3 :result true.
        }}]
        skolem:lemma440
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) ()) func:intersect ().
        } e:labelvars {
            ((0 1 2 3 4) ()) func:intersect ().
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2 3 4) ()) func:intersect ().
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#intersect-3"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma219 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2 3 4) (0 1 2 3 4 5 6)) func:intersect (0 1 2 3 4).
            } => {
                :intersect-4 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) (0 1 2 3 4 5 6)) func:intersect (0 1 2 3 4).
        } => {
            :intersect-4 :result true.
        }}]
        skolem:lemma441
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) (0 1 2 3 4 5 6)) func:intersect (0 1 2 3 4).
        } e:labelvars {
            ((0 1 2 3 4) (0 1 2 3 4 5 6)) func:intersect (0 1 2 3 4).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2 3 4) (0 1 2 3 4 5 6)) func:intersect (0 1 2 3 4).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#intersect-4"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma220 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2 3 4) (1 3)) func:except (0 2 4).
            } => {
                :except-1 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) (1 3)) func:except (0 2 4).
        } => {
            :except-1 :result true.
        }}]
        skolem:lemma442
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) (1 3)) func:except (0 2 4).
        } e:labelvars {
            ((0 1 2 3 4) (1 3)) func:except (0 2 4).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2 3 4) (1 3)) func:except (0 2 4).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#except-1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma221 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2 3 4) ()) func:except (0 1 2 3 4).
            } => {
                :except-2 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) ()) func:except (0 1 2 3 4).
        } => {
            :except-2 :result true.
        }}]
        skolem:lemma443
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) ()) func:except (0 1 2 3 4).
        } e:labelvars {
            ((0 1 2 3 4) ()) func:except (0 1 2 3 4).
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2 3 4) ()) func:except (0 1 2 3 4).
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#except-2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma222 a r:Inference;
    r:gives {
        {
            {
                ((0 1 2 3 4) (0 1 2 3 4)) func:except ().
            } => {
                :except-3 :result true.
            }.
        } a :PASS.
    };
    r:evidence (
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) (0 1 2 3 4)) func:except ().
        } => {
            :except-3 :result true.
        }}]
        skolem:lemma444
        [ a r:Fact; r:gives {{
            ((0 1 2 3 4) (0 1 2 3 4)) func:except ().
        } e:labelvars {
            ((0 1 2 3 4) (0 1 2 3 4)) func:except ().
        }}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo {
        ((0 1 2 3 4) (0 1 2 3 4)) func:except ().
    }];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://eulersharp.sourceforge.net/2007/07test#except-3"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo true];
    r:rule skolem:lemma224.

skolem:lemma223 a r:Inference;
    r:gives {
        :literal-not-identical-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("chat"@fr "chien"@fr) pred:literal-not-identical true}]
    );
    r:rule skolem:lemma445.

skolem:lemma224 a r:Extraction;
    r:gives {
        @forAll var:x_0, var:x_1, var:x_2. {
            var:x_0 => {
                var:x_1 :result var:x_2.
            }.
            var:x_1 :result var:x_2.
            var:x_0 e:labelvars var:x_0.
        } => {
            {
                var:x_0 => {
                    var:x_1 :result var:x_2.
                }.
            } a :PASS.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifQ.n3>].

skolem:lemma225 a r:Inference;
    r:gives {
        :iri-string-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {(:case "http://eulersharp.sourceforge.net/2007/07test#case") pred:iri-string true}]
    );
    r:rule skolem:lemma446.

skolem:lemma226 a r:Inference;
    r:gives {
        :numeric-add-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {(1 1) func:numeric-add 2}]
    );
    r:rule skolem:lemma447.

skolem:lemma227 a r:Inference;
    r:gives {
        :numeric-subtract-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {(5 2) func:numeric-subtract 3}]
    );
    r:rule skolem:lemma448.

skolem:lemma228 a r:Inference;
    r:gives {
        :numeric-multiply-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {(5 2) func:numeric-multiply 10}]
    );
    r:rule skolem:lemma449.

skolem:lemma229 a r:Inference;
    r:gives {
        :numeric-divide-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {(5 2) func:numeric-divide 2.5}]
    );
    r:rule skolem:lemma450.

skolem:lemma230 a r:Inference;
    r:gives {
        :numeric-integer-divide-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {(5 2) func:numeric-integer-divide 2}]
    );
    r:rule skolem:lemma451.

skolem:lemma231 a r:Inference;
    r:gives {
        :numeric-mod-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {(10 3) func:numeric-mod 1}]
    );
    r:rule skolem:lemma452.

skolem:lemma232 a r:Inference;
    r:gives {
        :numeric-mod-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {(6 -2) func:numeric-mod 0}]
    );
    r:rule skolem:lemma453.

skolem:lemma233 a r:Inference;
    r:gives {
        :numeric-mod-3 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {(4.5 1.2) func:numeric-mod 0.9000000000000004}]
    );
    r:rule skolem:lemma454.

skolem:lemma234 a r:Inference;
    r:gives {
        :numeric-mod-4 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {(123.0 6.0) func:numeric-mod 3.0}]
    );
    r:rule skolem:lemma455.

skolem:lemma235 a r:Inference;
    r:gives {
        :numeric-equal-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {(1 1.0) pred:numeric-equal true}]
    );
    r:rule skolem:lemma456.

skolem:lemma236 a r:Inference;
    r:gives {
        :numeric-less-than-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {(2.0 3) pred:numeric-less-than true}]
    );
    r:rule skolem:lemma457.

skolem:lemma237 a r:Inference;
    r:gives {
        :numeric-greater-than-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {(1.0 0) pred:numeric-greater-than true}]
    );
    r:rule skolem:lemma458.

skolem:lemma238 a r:Inference;
    r:gives {
        :numeric-not-equal-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {(1 1.01) pred:numeric-not-equal true}]
    );
    r:rule skolem:lemma459.

skolem:lemma239 a r:Inference;
    r:gives {
        :numeric-less-than-or-equal-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {(3 5.0) pred:numeric-less-than-or-equal true}]
    );
    r:rule skolem:lemma460.

skolem:lemma240 a r:Inference;
    r:gives {
        :numeric-greater-than-or-equal-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {(1.0 1) pred:numeric-greater-than-or-equal true}]
    );
    r:rule skolem:lemma461.

skolem:lemma241 a r:Inference;
    r:gives {
        :not-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {(false) func:not true}]
    );
    r:rule skolem:lemma462.

skolem:lemma242 a r:Inference;
    r:gives {
        :not-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {(true) func:not false}]
    );
    r:rule skolem:lemma463.

skolem:lemma243 a r:Inference;
    r:gives {
        :boolean-equal-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {(false false) pred:boolean-equal true}]
    );
    r:rule skolem:lemma464.

skolem:lemma244 a r:Inference;
    r:gives {
        :boolean-less-than-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {(false true) pred:boolean-less-than true}]
    );
    r:rule skolem:lemma465.

skolem:lemma245 a r:Inference;
    r:gives {
        :boolean-greater-than-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {(true false) pred:boolean-greater-than true}]
    );
    r:rule skolem:lemma466.

skolem:lemma246 a r:Inference;
    r:gives {
        :compare-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("abc" "abc") func:compare 0}]
    );
    r:rule skolem:lemma467.

skolem:lemma247 a r:Inference;
    r:gives {
        :compare-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("Straßen" "Straße") func:compare 1}]
    );
    r:rule skolem:lemma468.

skolem:lemma248 a r:Inference;
    r:gives {
        :concat-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("Ingratitude, " "thou " "marble-hearted" " fiend!") func:concat "Ingratitude, thou marble-hearted fiend!"}]
    );
    r:rule skolem:lemma469.

skolem:lemma249 a r:Inference;
    r:gives {
        :string-join-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {(("Now" "is" "the" "time" "...") " ") func:string-join "Now is the time ..."}]
    );
    r:rule skolem:lemma470.

skolem:lemma250 a r:Inference;
    r:gives {
        :string-join-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {(("Blow, " "blow, " "thou " "winter " "wind!") "") func:string-join "Blow, blow, thou winter wind!"}]
    );
    r:rule skolem:lemma471.

skolem:lemma251 a r:Inference;
    r:gives {
        :string-join-3 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {(() "separator") func:string-join ""}]
    );
    r:rule skolem:lemma472.

skolem:lemma252 a r:Inference;
    r:gives {
        :substring-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("motor car" 6) func:substring " car"}]
    );
    r:rule skolem:lemma473.

skolem:lemma253 a r:Inference;
    r:gives {
        :substring-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("metadata" 4 3) func:substring "ada"}]
    );
    r:rule skolem:lemma474.

skolem:lemma254 a r:Inference;
    r:gives {
        :substring-3 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("12345" 1.5 2.6) func:substring "234"}]
    );
    r:rule skolem:lemma475.

skolem:lemma255 a r:Inference;
    r:gives {
        :substring-4 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("12345" 0 3) func:substring "12"}]
    );
    r:rule skolem:lemma476.

skolem:lemma256 a r:Inference;
    r:gives {
        :substring-5 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("12345" 5 -3) func:substring ""}]
    );
    r:rule skolem:lemma477.

skolem:lemma257 a r:Inference;
    r:gives {
        :substring-6 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("12345" -3 5) func:substring "1"}]
    );
    r:rule skolem:lemma478.

skolem:lemma258 a r:Inference;
    r:gives {
        :string-length-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("Harp not on that string, madam; that is past.") func:string-length 45}]
    );
    r:rule skolem:lemma479.

skolem:lemma259 a r:Inference;
    r:gives {
        :string-length-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {(""@en) func:string-length 0}]
    );
    r:rule skolem:lemma480.

skolem:lemma260 a r:Inference;
    r:gives {
        :upper-case-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("abCd0") func:upper-case "ABCD0"}]
    );
    r:rule skolem:lemma481.

skolem:lemma261 a r:Inference;
    r:gives {
        :lower-case-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("ABc!D") func:lower-case "abc!d"}]
    );
    r:rule skolem:lemma482.

skolem:lemma262 a r:Inference;
    r:gives {
        :encode-for-uri-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("00/Weather/CA/Los%20Angeles#ocean") func:encode-for-uri "00%2fWeather%2fCA%2fLos%2520Angeles%23ocean"}]
    );
    r:rule skolem:lemma483.

skolem:lemma263 a r:Inference;
    r:gives {
        :encode-for-uri-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("~bébé") func:encode-for-uri "~b%c3%a9b%c3%a9"}]
    );
    r:rule skolem:lemma484.

skolem:lemma264 a r:Inference;
    r:gives {
        :encode-for-uri-3 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("100% organic") func:encode-for-uri "100%25%20organic"}]
    );
    r:rule skolem:lemma485.

skolem:lemma265 a r:Inference;
    r:gives {
        :substring-before-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("tattoo" "attoo") func:substring-before "t"}]
    );
    r:rule skolem:lemma486.

skolem:lemma266 a r:Inference;
    r:gives {
        :substring-before-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("tattoo" "tatto") func:substring-before ""}]
    );
    r:rule skolem:lemma487.

skolem:lemma267 a r:Inference;
    r:gives {
        :substring-after-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("tattoo" "tat") func:substring-after "too"}]
    );
    r:rule skolem:lemma488.

skolem:lemma268 a r:Inference;
    r:gives {
        :substring-after-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("tattoo" "tattoo") func:substring-after ""}]
    );
    r:rule skolem:lemma489.

skolem:lemma269 a r:Inference;
    r:gives {
        :contains-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("tattoo" "t") pred:contains true}]
    );
    r:rule skolem:lemma490.

skolem:lemma270 a r:Inference;
    r:gives {
        :starts-with-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("tattoo" "tat") pred:starts-with true}]
    );
    r:rule skolem:lemma491.

skolem:lemma271 a r:Inference;
    r:gives {
        :ends-with-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("tattoo" "tattoo") pred:ends-with true}]
    );
    r:rule skolem:lemma492.

skolem:lemma272 a r:Inference;
    r:gives {
        :matches-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("abracadabra" "bra") pred:matches true}]
    );
    r:rule skolem:lemma493.

skolem:lemma273 a r:Inference;
    r:gives {
        :matches-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("abracadabra" "^a.*a$") pred:matches true}]
    );
    r:rule skolem:lemma494.

skolem:lemma274 a r:Inference;
    r:gives {
        :year-from-dateTime-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:year-from-dateTime 1999}]
    );
    r:rule skolem:lemma495.

skolem:lemma275 a r:Inference;
    r:gives {
        :month-from-dateTime-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:month-from-dateTime 5}]
    );
    r:rule skolem:lemma496.

skolem:lemma276 a r:Inference;
    r:gives {
        :day-from-dateTime-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:day-from-dateTime 31}]
    );
    r:rule skolem:lemma497.

skolem:lemma277 a r:Inference;
    r:gives {
        :hours-from-dateTime-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:hours-from-dateTime 13}]
    );
    r:rule skolem:lemma498.

skolem:lemma278 a r:Inference;
    r:gives {
        :minutes-from-dateTime-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:minutes-from-dateTime 20}]
    );
    r:rule skolem:lemma499.

skolem:lemma279 a r:Inference;
    r:gives {
        :seconds-from-dateTime-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:seconds-from-dateTime 0}]
    );
    r:rule skolem:lemma500.

skolem:lemma280 a r:Inference;
    r:gives {
        :year-from-date-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("1999-05-31-05:00"^^xsd:date) func:year-from-date 1999}]
    );
    r:rule skolem:lemma501.

skolem:lemma281 a r:Inference;
    r:gives {
        :month-from-date-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("1999-05-31-05:00"^^xsd:date) func:month-from-date 5}]
    );
    r:rule skolem:lemma502.

skolem:lemma282 a r:Inference;
    r:gives {
        :day-from-date-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("1999-05-31-05:00"^^xsd:date) func:day-from-date 31}]
    );
    r:rule skolem:lemma503.

skolem:lemma283 a r:Inference;
    r:gives {
        :hours-from-time-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("13:20:00-05:00"^^xsd:time) func:hours-from-time 13}]
    );
    r:rule skolem:lemma504.

skolem:lemma284 a r:Inference;
    r:gives {
        :minutes-from-time-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("13:20:00-05:00"^^xsd:time) func:minutes-from-time 20}]
    );
    r:rule skolem:lemma505.

skolem:lemma285 a r:Inference;
    r:gives {
        :seconds-from-time-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("13:20:00-05:00"^^xsd:time) func:seconds-from-time 0}]
    );
    r:rule skolem:lemma506.

skolem:lemma286 a r:Inference;
    r:gives {
        :years-from-duration-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("P20Y15M"^^xsd:yearMonthDuration) func:years-from-duration 21}]
    );
    r:rule skolem:lemma507.

skolem:lemma287 a r:Inference;
    r:gives {
        :years-from-duration-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("-P15M"^^xsd:yearMonthDuration) func:years-from-duration -1}]
    );
    r:rule skolem:lemma508.

skolem:lemma288 a r:Inference;
    r:gives {
        :years-from-duration-3 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("-P2DT15H"^^xsd:dayTimeDuration) func:years-from-duration 0}]
    );
    r:rule skolem:lemma509.

skolem:lemma289 a r:Inference;
    r:gives {
        :months-from-duration-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("P20Y15M"^^xsd:yearMonthDuration) func:months-from-duration 3}]
    );
    r:rule skolem:lemma510.

skolem:lemma290 a r:Inference;
    r:gives {
        :months-from-duration-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("-P20Y18M"^^xsd:yearMonthDuration) func:months-from-duration -6}]
    );
    r:rule skolem:lemma511.

skolem:lemma291 a r:Inference;
    r:gives {
        :months-from-duration-3 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("-P2DT15H0M0S"^^xsd:dayTimeDuration) func:months-from-duration 0}]
    );
    r:rule skolem:lemma512.

skolem:lemma292 a r:Inference;
    r:gives {
        :days-from-duration-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("P3DT10H"^^xsd:dayTimeDuration) func:days-from-duration 3}]
    );
    r:rule skolem:lemma513.

skolem:lemma293 a r:Inference;
    r:gives {
        :days-from-duration-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("P3DT55H"^^xsd:dayTimeDuration) func:days-from-duration 5}]
    );
    r:rule skolem:lemma514.

skolem:lemma294 a r:Inference;
    r:gives {
        :days-from-duration-3 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("P3Y5M"^^xsd:yearMonthDuration) func:days-from-duration 0}]
    );
    r:rule skolem:lemma515.

skolem:lemma295 a r:Inference;
    r:gives {
        :hours-from-duration-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("P3DT10H"^^xsd:dayTimeDuration) func:hours-from-duration 10}]
    );
    r:rule skolem:lemma516.

skolem:lemma296 a r:Inference;
    r:gives {
        :hours-from-duration-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("P3DT12H32M12S"^^xsd:dayTimeDuration) func:hours-from-duration 12}]
    );
    r:rule skolem:lemma517.

skolem:lemma297 a r:Inference;
    r:gives {
        :hours-from-duration-3 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("PT123H"^^xsd:dayTimeDuration) func:hours-from-duration 3}]
    );
    r:rule skolem:lemma518.

skolem:lemma298 a r:Inference;
    r:gives {
        :hours-from-duration-4 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("-P3DT10H"^^xsd:dayTimeDuration) func:hours-from-duration -10}]
    );
    r:rule skolem:lemma519.

skolem:lemma299 a r:Inference;
    r:gives {
        :minutes-from-duration-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("P3DT10H"^^xsd:dayTimeDuration) func:minutes-from-duration 0}]
    );
    r:rule skolem:lemma520.

skolem:lemma300 a r:Inference;
    r:gives {
        :minutes-from-duration-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("-P5DT12H30M"^^xsd:dayTimeDuration) func:minutes-from-duration -30}]
    );
    r:rule skolem:lemma521.

skolem:lemma301 a r:Inference;
    r:gives {
        :seconds-from-duration-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("P3DT10H12.5S"^^xsd:dayTimeDuration) func:seconds-from-duration 12.5}]
    );
    r:rule skolem:lemma522.

skolem:lemma302 a r:Inference;
    r:gives {
        :seconds-from-duration-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("-PT256S"^^xsd:dayTimeDuration) func:seconds-from-duration -16.0}]
    );
    r:rule skolem:lemma523.

skolem:lemma303 a r:Inference;
    r:gives {
        :timezone-from-dateTime-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:timezone-from-dateTime "-PT5H"^^xsd:dayTimeDuration}]
    );
    r:rule skolem:lemma524.

skolem:lemma304 a r:Inference;
    r:gives {
        :timezone-from-dateTime-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("2000-06-12T13:20:00Z"^^xsd:dateTime) func:timezone-from-dateTime "PT0S"^^xsd:dayTimeDuration}]
    );
    r:rule skolem:lemma525.

skolem:lemma305 a r:Inference;
    r:gives {
        :timezone-from-date-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("1999-05-31-05:00"^^xsd:date) func:timezone-from-date "-PT5H"^^xsd:dayTimeDuration}]
    );
    r:rule skolem:lemma526.

skolem:lemma306 a r:Inference;
    r:gives {
        :timezone-from-date-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("2000-06-12Z"^^xsd:date) func:timezone-from-date "PT0S"^^xsd:dayTimeDuration}]
    );
    r:rule skolem:lemma527.

skolem:lemma307 a r:Inference;
    r:gives {
        :timezone-from-time-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("13:20:00-05:00"^^xsd:time) func:timezone-from-time "-PT5H"^^xsd:dayTimeDuration}]
    );
    r:rule skolem:lemma528.

skolem:lemma308 a r:Inference;
    r:gives {
        :timezone-from-time-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("13:20:00Z"^^xsd:time) func:timezone-from-time "PT0S"^^xsd:dayTimeDuration}]
    );
    r:rule skolem:lemma529.

skolem:lemma309 a r:Inference;
    r:gives {
        :subtract-dateTimes-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("2000-10-30T06:12:00-05:00"^^xsd:dateTime "1999-11-28T09:00:00Z"^^xsd:dateTime) func:subtract-dateTimes "P337DT2H12M"^^xsd:dayTimeDuration}]
    );
    r:rule skolem:lemma530.

skolem:lemma310 a r:Inference;
    r:gives {
        :subtract-dates-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("2000-10-30Z"^^xsd:date "1999-11-28Z"^^xsd:date) func:subtract-dates "P337D"^^xsd:dayTimeDuration}]
    );
    r:rule skolem:lemma531.

skolem:lemma311 a r:Inference;
    r:gives {
        :subtract-times-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("11:12:00Z"^^xsd:time "04:00:00-05:00"^^xsd:time) func:subtract-times "PT2H12M"^^xsd:dayTimeDuration}]
    );
    r:rule skolem:lemma532.

skolem:lemma312 a r:Inference;
    r:gives {
        :subtract-times-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("11:00:00-05:00"^^xsd:time "21:30:00+05:30"^^xsd:time) func:subtract-times "PT0S"^^xsd:dayTimeDuration}]
    );
    r:rule skolem:lemma533.

skolem:lemma313 a r:Inference;
    r:gives {
        :subtract-times-3 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("17:00:00-06:00"^^xsd:time "08:00:00+09:00"^^xsd:time) func:subtract-times "P1D"^^xsd:dayTimeDuration}]
    );
    r:rule skolem:lemma534.

skolem:lemma314 a r:Inference;
    r:gives {
        :subtract-times-4 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("24:00:00"^^xsd:time "23:59:59"^^xsd:time) func:subtract-times "-PT23H59M59S"^^xsd:dayTimeDuration}]
    );
    r:rule skolem:lemma535.

skolem:lemma315 a r:Inference;
    r:gives {
        :add-yearMonthDurations-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("P2Y11M"^^xsd:yearMonthDuration "P3Y3M"^^xsd:yearMonthDuration) func:add-yearMonthDurations "P6Y2M"^^xsd:yearMonthDuration}]
    );
    r:rule skolem:lemma536.

skolem:lemma316 a r:Inference;
    r:gives {
        :subtract-yearMonthDurations-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("P2Y11M"^^xsd:yearMonthDuration "P3Y3M"^^xsd:yearMonthDuration) func:subtract-yearMonthDurations "-P4M"^^xsd:yearMonthDuration}]
    );
    r:rule skolem:lemma537.

skolem:lemma317 a r:Inference;
    r:gives {
        :multiply-yearMonthDuration-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("P2Y11M"^^xsd:yearMonthDuration 2.3) func:multiply-yearMonthDuration "P6Y9M"^^xsd:yearMonthDuration}]
    );
    r:rule skolem:lemma538.

skolem:lemma318 a r:Inference;
    r:gives {
        :divide-yearMonthDuration-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("P2Y11M"^^xsd:yearMonthDuration 1.5) func:divide-yearMonthDuration "P1Y11M"^^xsd:yearMonthDuration}]
    );
    r:rule skolem:lemma539.

skolem:lemma319 a r:Inference;
    r:gives {
        :divide-yearMonthDuration-by-yearMonthDuration-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("P3Y4M"^^xsd:yearMonthDuration "-P1Y4M"^^xsd:yearMonthDuration) func:divide-yearMonthDuration-by-yearMonthDuration -2.5}]
    );
    r:rule skolem:lemma540.

skolem:lemma320 a r:Inference;
    r:gives {
        :add-dayTimeDurations-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("P2DT12H5M"^^xsd:dayTimeDuration "P5DT12H"^^xsd:dayTimeDuration) func:add-dayTimeDurations "P8DT5M"^^xsd:dayTimeDuration}]
    );
    r:rule skolem:lemma541.

skolem:lemma321 a r:Inference;
    r:gives {
        :subtract-dayTimeDurations-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("P2DT12H"^^xsd:dayTimeDuration "P1DT10H30M"^^xsd:dayTimeDuration) func:subtract-dayTimeDurations "P1DT1H30M"^^xsd:dayTimeDuration}]
    );
    r:rule skolem:lemma542.

skolem:lemma322 a r:Inference;
    r:gives {
        :multiply-dayTimeDuration-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("PT2H10M"^^xsd:dayTimeDuration 2.1) func:multiply-dayTimeDuration "PT4H33M"^^xsd:dayTimeDuration}]
    );
    r:rule skolem:lemma543.

skolem:lemma323 a r:Inference;
    r:gives {
        :divide-dayTimeDuration-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("P1DT2H30M10.5S"^^xsd:dayTimeDuration 1.5) func:divide-dayTimeDuration "PT17H40M7S"^^xsd:dayTimeDuration}]
    );
    r:rule skolem:lemma544.

skolem:lemma324 a r:Inference;
    r:gives {
        :divide-dayTimeDuration-by-dayTimeDuration-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("PT4H33M"^^xsd:dayTimeDuration "PT2H10M"^^xsd:dayTimeDuration) func:divide-dayTimeDuration-by-dayTimeDuration 2.1}]
    );
    r:rule skolem:lemma545.

skolem:lemma325 a r:Inference;
    r:gives {
        :add-yearMonthDuration-to-dateTime-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("2000-10-30T11:12:00Z"^^xsd:dateTime "P1Y2M"^^xsd:yearMonthDuration) func:add-yearMonthDuration-to-dateTime "2001-12-30T11:12:00Z"^^xsd:dateTime}]
    );
    r:rule skolem:lemma546.

skolem:lemma326 a r:Inference;
    r:gives {
        :add-yearMonthDuration-to-date-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("2000-10-30Z"^^xsd:date "P1Y2M"^^xsd:yearMonthDuration) func:add-yearMonthDuration-to-date "2001-12-30Z"^^xsd:date}]
    );
    r:rule skolem:lemma547.

skolem:lemma327 a r:Inference;
    r:gives {
        :add-dayTimeDuration-to-dateTime-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("2000-10-30T11:12:00Z"^^xsd:dateTime "P3DT1H15M"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-dateTime "2000-11-02T12:27:00Z"^^xsd:dateTime}]
    );
    r:rule skolem:lemma548.

skolem:lemma328 a r:Inference;
    r:gives {
        :add-dayTimeDuration-to-date-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("2004-10-30Z"^^xsd:date "P2DT2H30M0S"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-date "2004-11-01Z"^^xsd:date}]
    );
    r:rule skolem:lemma549.

skolem:lemma329 a r:Inference;
    r:gives {
        :add-dayTimeDuration-to-time-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("11:12:00Z"^^xsd:time "P3DT1H15M"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-time "12:27:00Z"^^xsd:time}]
    );
    r:rule skolem:lemma550.

skolem:lemma330 a r:Inference;
    r:gives {
        :subtract-yearMonthDuration-from-dateTime-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("2000-10-30T11:12:00Z"^^xsd:dateTime "P1Y2M"^^xsd:yearMonthDuration) func:subtract-yearMonthDuration-from-dateTime "1999-08-30T11:12:00Z"^^xsd:dateTime}]
    );
    r:rule skolem:lemma551.

skolem:lemma331 a r:Inference;
    r:gives {
        :subtract-yearMonthDuration-from-date-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("2000-10-30Z"^^xsd:date "P1Y2M"^^xsd:yearMonthDuration) func:subtract-yearMonthDuration-from-date "1999-08-30Z"^^xsd:date}]
    );
    r:rule skolem:lemma552.

skolem:lemma332 a r:Inference;
    r:gives {
        :subtract-dayTimeDuration-from-dateTime-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("2000-10-30T11:12:00Z"^^xsd:dateTime "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-dateTime "2000-10-27T09:57:00Z"^^xsd:dateTime}]
    );
    r:rule skolem:lemma553.

skolem:lemma333 a r:Inference;
    r:gives {
        :subtract-dayTimeDuration-from-date-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("2000-10-30Z"^^xsd:date "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-date "2000-10-26Z"^^xsd:date}]
    );
    r:rule skolem:lemma554.

skolem:lemma334 a r:Inference;
    r:gives {
        :subtract-dayTimeDuration-from-time-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("11:12:00Z"^^xsd:time "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-time "09:57:00Z"^^xsd:time}]
    );
    r:rule skolem:lemma555.

skolem:lemma335 a r:Inference;
    r:gives {
        :subtract-dayTimeDuration-from-time-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("08:20:00-05:00"^^xsd:time "P23DT10H10M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-time "22:10:00-05:00"^^xsd:time}]
    );
    r:rule skolem:lemma556.

skolem:lemma336 a r:Inference;
    r:gives {
        :dateTime-equal-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-equal true}]
    );
    r:rule skolem:lemma557.

skolem:lemma337 a r:Inference;
    r:gives {
        :dateTime-equal-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T23:00:00+06:00"^^xsd:dateTime) pred:dateTime-equal true}]
    );
    r:rule skolem:lemma558.

skolem:lemma338 a r:Inference;
    r:gives {
        :dateTime-equal-3 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T17:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal false}]
    );
    r:rule skolem:lemma559.

skolem:lemma339 a r:Inference;
    r:gives {
        :dateTime-equal-4 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T12:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal true}]
    );
    r:rule skolem:lemma560.

skolem:lemma340 a r:Inference;
    r:gives {
        :dateTime-equal-5 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("2002-04-02T23:00:00-04:00"^^xsd:dateTime "2002-04-03T02:00:00-01:00"^^xsd:dateTime) pred:dateTime-equal true}]
    );
    r:rule skolem:lemma561.

skolem:lemma341 a r:Inference;
    r:gives {
        :dateTime-equal-6 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("1999-12-31T24:00:00-05:00"^^xsd:dateTime "2000-01-01T00:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal true}]
    );
    r:rule skolem:lemma562.

skolem:lemma342 a r:Inference;
    r:gives {
        :dateTime-equal-7 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("2005-04-04T24:00:00-05:00"^^xsd:dateTime "2005-04-04T00:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal false}]
    );
    r:rule skolem:lemma563.

skolem:lemma343 a r:Inference;
    r:gives {
        :dateTime-less-than-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2010-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-less-than true}]
    );
    r:rule skolem:lemma564.

skolem:lemma344 a r:Inference;
    r:gives {
        :dateTime-greater-than-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("2010-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-greater-than true}]
    );
    r:rule skolem:lemma565.

skolem:lemma345 a r:Inference;
    r:gives {
        :date-equal-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-equal false}]
    );
    r:rule skolem:lemma566.

skolem:lemma346 a r:Inference;
    r:gives {
        :date-equal-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-equal true}]
    );
    r:rule skolem:lemma567.

skolem:lemma347 a r:Inference;
    r:gives {
        :date-less-than-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("2004-12-25Z"^^xsd:date "2004-12-25-05:00"^^xsd:date) pred:date-less-than true}]
    );
    r:rule skolem:lemma568.

skolem:lemma348 a r:Inference;
    r:gives {
        :date-less-than-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-less-than false}]
    );
    r:rule skolem:lemma569.

skolem:lemma349 a r:Inference;
    r:gives {
        :date-greater-than-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-greater-than true}]
    );
    r:rule skolem:lemma570.

skolem:lemma350 a r:Inference;
    r:gives {
        :date-greater-than-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-greater-than false}]
    );
    r:rule skolem:lemma571.

skolem:lemma351 a r:Inference;
    r:gives {
        :time-equal-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-equal false}]
    );
    r:rule skolem:lemma572.

skolem:lemma352 a r:Inference;
    r:gives {
        :time-equal-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("21:30:00+10:30"^^xsd:time "06:00:00-05:00"^^xsd:time) pred:time-equal true}]
    );
    r:rule skolem:lemma573.

skolem:lemma353 a r:Inference;
    r:gives {
        :time-equal-3 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("24:00:00+01:00"^^xsd:time "00:00:00+01:00"^^xsd:time) pred:time-equal true}]
    );
    r:rule skolem:lemma574.

skolem:lemma354 a r:Inference;
    r:gives {
        :time-less-than-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("12:00:00-05:00"^^xsd:time "23:00:00+06:00"^^xsd:time) pred:time-less-than false}]
    );
    r:rule skolem:lemma575.

skolem:lemma355 a r:Inference;
    r:gives {
        :time-less-than-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("11:00:00-05:00"^^xsd:time "17:00:00Z"^^xsd:time) pred:time-less-than true}]
    );
    r:rule skolem:lemma576.

skolem:lemma356 a r:Inference;
    r:gives {
        :time-less-than-3 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("23:59:59-05:00"^^xsd:time "24:00:00-05:00"^^xsd:time) pred:time-less-than false}]
    );
    r:rule skolem:lemma577.

skolem:lemma357 a r:Inference;
    r:gives {
        :time-greater-than-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-greater-than false}]
    );
    r:rule skolem:lemma578.

skolem:lemma358 a r:Inference;
    r:gives {
        :duration-equal-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("P1Y"^^xsd:duration "P12M"^^xsd:duration) pred:duration-equal true}]
    );
    r:rule skolem:lemma579.

skolem:lemma359 a r:Inference;
    r:gives {
        :duration-equal-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("PT24H"^^xsd:duration "P1D"^^xsd:duration) pred:duration-equal true}]
    );
    r:rule skolem:lemma580.

skolem:lemma360 a r:Inference;
    r:gives {
        :duration-equal-3 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("P1Y"^^xsd:duration "P365D"^^xsd:duration) pred:duration-equal false}]
    );
    r:rule skolem:lemma581.

skolem:lemma361 a r:Inference;
    r:gives {
        :duration-equal-4 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("P2Y0M0DT0H0M0S"^^xsd:duration "P24M"^^xsd:duration) pred:duration-equal true}]
    );
    r:rule skolem:lemma582.

skolem:lemma362 a r:Inference;
    r:gives {
        :dayTimeDuration-less-than-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-less-than true}]
    );
    r:rule skolem:lemma583.

skolem:lemma363 a r:Inference;
    r:gives {
        :dayTimeDuration-greater-than-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-greater-than false}]
    );
    r:rule skolem:lemma584.

skolem:lemma364 a r:Inference;
    r:gives {
        :yearMonthDuration-less-than-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-less-than true}]
    );
    r:rule skolem:lemma585.

skolem:lemma365 a r:Inference;
    r:gives {
        :yearMonthDuration-greater-than-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-greater-than false}]
    );
    r:rule skolem:lemma586.

skolem:lemma366 a r:Inference;
    r:gives {
        :dateTime-not-equal-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-not-equal false}]
    );
    r:rule skolem:lemma587.

skolem:lemma367 a r:Inference;
    r:gives {
        :dateTime-less-than-or-equal-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-less-than-or-equal true}]
    );
    r:rule skolem:lemma588.

skolem:lemma368 a r:Inference;
    r:gives {
        :dateTime-greater-than-or-equal-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("2010-04-02T12:00:00-01:00"^^xsd:dateTime "2010-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-greater-than-or-equal true}]
    );
    r:rule skolem:lemma589.

skolem:lemma369 a r:Inference;
    r:gives {
        :date-not-equal-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-not-equal true}]
    );
    r:rule skolem:lemma590.

skolem:lemma370 a r:Inference;
    r:gives {
        :date-less-than-or-equal-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-less-than-or-equal false}]
    );
    r:rule skolem:lemma591.

skolem:lemma371 a r:Inference;
    r:gives {
        :date-greater-than-or-equal-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-greater-than-or-equal true}]
    );
    r:rule skolem:lemma592.

skolem:lemma372 a r:Inference;
    r:gives {
        :time-not-equal-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-not-equal true}]
    );
    r:rule skolem:lemma593.

skolem:lemma373 a r:Inference;
    r:gives {
        :time-less-than-or-equal-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-less-than-or-equal true}]
    );
    r:rule skolem:lemma594.

skolem:lemma374 a r:Inference;
    r:gives {
        :time-greater-than-or-equal-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-greater-than-or-equal false}]
    );
    r:rule skolem:lemma595.

skolem:lemma375 a r:Inference;
    r:gives {
        :duration-not-equal-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("P1Y"^^xsd:duration "P12M"^^xsd:duration) pred:duration-not-equal false}]
    );
    r:rule skolem:lemma596.

skolem:lemma376 a r:Inference;
    r:gives {
        :dayTimeDuration-less-than-or-equal-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-less-than-or-equal true}]
    );
    r:rule skolem:lemma597.

skolem:lemma377 a r:Inference;
    r:gives {
        :dayTimeDuration-greater-than-or-equal-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-greater-than-or-equal false}]
    );
    r:rule skolem:lemma598.

skolem:lemma378 a r:Inference;
    r:gives {
        :yearMonthDuration-less-than-or-equal-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-less-than-or-equal true}]
    );
    r:rule skolem:lemma599.

skolem:lemma379 a r:Inference;
    r:gives {
        :yearMonthDuration-greater-than-or-equal-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-greater-than-or-equal false}]
    );
    r:rule skolem:lemma600.

skolem:lemma380 a r:Inference;
    r:gives {
        :PlainLiteral-from-string-lang-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("Family Guy") func:PlainLiteral-from-string-lang "Family Guy"}]
    );
    r:rule skolem:lemma601.

skolem:lemma381 a r:Inference;
    r:gives {
        :PlainLiteral-from-string-lang-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("Family Guy" "EN") func:PlainLiteral-from-string-lang "Family Guy"@en}]
    );
    r:rule skolem:lemma602.

skolem:lemma382 a r:Inference;
    r:gives {
        :string-from-PlainLiteral-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("Family Guy") func:string-from-PlainLiteral "Family Guy"}]
    );
    r:rule skolem:lemma603.

skolem:lemma383 a r:Inference;
    r:gives {
        :string-from-PlainLiteral-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("Family Guy"@en) func:string-from-PlainLiteral "Family Guy"}]
    );
    r:rule skolem:lemma604.

skolem:lemma384 a r:Inference;
    r:gives {
        :lang-from-PlainLiteral-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("Family Guy") func:lang-from-PlainLiteral ""}]
    );
    r:rule skolem:lemma605.

skolem:lemma385 a r:Inference;
    r:gives {
        :lang-from-PlainLiteral-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("Family Guy"@en) func:lang-from-PlainLiteral "en"}]
    );
    r:rule skolem:lemma606.

skolem:lemma386 a r:Inference;
    r:gives {
        :PlainLiteral-compare-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("Family Guy" "Mother") func:PlainLiteral-compare -1}]
    );
    r:rule skolem:lemma607.

skolem:lemma387 a r:Inference;
    r:gives {
        :PlainLiteral-compare-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("Family Guy"@en "Brother"@en) func:PlainLiteral-compare 1}]
    );
    r:rule skolem:lemma608.

skolem:lemma388 a r:Inference;
    r:gives {
        :PlainLiteral-length-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("Family Guy") func:PlainLiteral-length 10}]
    );
    r:rule skolem:lemma609.

skolem:lemma389 a r:Inference;
    r:gives {
        :PlainLiteral-length-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("Family Guy"@en) func:PlainLiteral-length 10}]
    );
    r:rule skolem:lemma610.

skolem:lemma390 a r:Inference;
    r:gives {
        :matches-language-range-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("Family Guy"@en "en") pred:matches-language-range true}]
    );
    r:rule skolem:lemma611.

skolem:lemma391 a r:Inference;
    r:gives {
        :matches-language-range-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {("Family Guy"@en-us "en-*") pred:matches-language-range true}]
    );
    r:rule skolem:lemma612.

skolem:lemma392 a r:Inference;
    r:gives {
        :is-list-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((:a :b :c :d)) pred:is-list true}]
    );
    r:rule skolem:lemma613.

skolem:lemma393 a r:Inference;
    r:gives {
        :list-contains-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((:a :b :c :d) :b) pred:list-contains true}]
    );
    r:rule skolem:lemma614.

skolem:lemma394 a r:Inference;
    r:gives {
        :make-list-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {(:a :b :c :d) func:make-list (:a :b :c :d)}]
    );
    r:rule skolem:lemma615.

skolem:lemma395 a r:Inference;
    r:gives {
        :count-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((:a :b :c :d)) func:count 4}]
    );
    r:rule skolem:lemma616.

skolem:lemma396 a r:Inference;
    r:gives {
        :get-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((:a :b :c :d) 3) func:get :d}]
    );
    r:rule skolem:lemma617.

skolem:lemma397 a r:Inference;
    r:gives {
        :sublist-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2 3 4) 0 0) func:sublist ()}]
    );
    r:rule skolem:lemma618.

skolem:lemma398 a r:Inference;
    r:gives {
        :sublist-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2 3 4) 0 1) func:sublist (0)}]
    );
    r:rule skolem:lemma619.

skolem:lemma399 a r:Inference;
    r:gives {
        :sublist-3 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2 3 4) 0 4) func:sublist (0 1 2 3)}]
    );
    r:rule skolem:lemma620.

skolem:lemma400 a r:Inference;
    r:gives {
        :sublist-4 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2 3 4) 0 5) func:sublist (0 1 2 3 4)}]
    );
    r:rule skolem:lemma621.

skolem:lemma401 a r:Inference;
    r:gives {
        :sublist-5 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2 3 4) 0 10) func:sublist (0 1 2 3 4)}]
    );
    r:rule skolem:lemma622.

skolem:lemma402 a r:Inference;
    r:gives {
        :sublist-6 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2 3 4) 0 -2) func:sublist (0 1 2)}]
    );
    r:rule skolem:lemma623.

skolem:lemma403 a r:Inference;
    r:gives {
        :sublist-7 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2 3 4) 2 4) func:sublist (2 3)}]
    );
    r:rule skolem:lemma624.

skolem:lemma404 a r:Inference;
    r:gives {
        :sublist-9 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2 3 4) 2 -2) func:sublist (2)}]
    );
    r:rule skolem:lemma625.

skolem:lemma405 a r:Inference;
    r:gives {
        :sublist-10 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2 3 4) 3) func:sublist (3 4)}]
    );
    r:rule skolem:lemma626.

skolem:lemma406 a r:Inference;
    r:gives {
        :sublist-11 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2 3 4) -2) func:sublist (3 4)}]
    );
    r:rule skolem:lemma627.

skolem:lemma407 a r:Inference;
    r:gives {
        :append-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2) 3) func:append (0 1 2 3)}]
    );
    r:rule skolem:lemma628.

skolem:lemma408 a r:Inference;
    r:gives {
        :append-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2) 3 4) func:append (0 1 2 3 4)}]
    );
    r:rule skolem:lemma629.

skolem:lemma409 a r:Inference;
    r:gives {
        :append-3 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((1 1) (1) (1) ((1))) func:append (1 1 (1) (1) ((1)))}]
    );
    r:rule skolem:lemma630.

skolem:lemma410 a r:Inference;
    r:gives {
        :append-4 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {(() 1) func:append (1)}]
    );
    r:rule skolem:lemma631.

skolem:lemma411 a r:Inference;
    r:gives {
        :concatenate-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2) (3 4 5)) func:concatenate (0 1 2 3 4 5)}]
    );
    r:rule skolem:lemma632.

skolem:lemma412 a r:Inference;
    r:gives {
        :concatenate-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((1 1) (1) (1)) func:concatenate (1 1 1 1)}]
    );
    r:rule skolem:lemma633.

skolem:lemma413 a r:Inference;
    r:gives {
        :concatenate-3 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {(()) func:concatenate ()}]
    );
    r:rule skolem:lemma634.

skolem:lemma414 a r:Inference;
    r:gives {
        :concatenate-4 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {(() (1) () (2) ((3))) func:concatenate (1 2 (3))}]
    );
    r:rule skolem:lemma635.

skolem:lemma415 a r:Inference;
    r:gives {
        :insert-before-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2 3 4) 0 99) func:insert-before (99 0 1 2 3 4)}]
    );
    r:rule skolem:lemma636.

skolem:lemma416 a r:Inference;
    r:gives {
        :insert-before-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2 3 4) 1 99) func:insert-before (0 99 1 2 3 4)}]
    );
    r:rule skolem:lemma637.

skolem:lemma417 a r:Inference;
    r:gives {
        :insert-before-3 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2 3 4) -1 99) func:insert-before (0 1 2 3 99 4)}]
    );
    r:rule skolem:lemma638.

skolem:lemma418 a r:Inference;
    r:gives {
        :insert-before-4 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2 3 4) -5 99) func:insert-before (99 0 1 2 3 4)}]
    );
    r:rule skolem:lemma639.

skolem:lemma419 a r:Inference;
    r:gives {
        :remove-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2 3 4) 0) func:remove (1 2 3 4)}]
    );
    r:rule skolem:lemma640.

skolem:lemma420 a r:Inference;
    r:gives {
        :remove-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2 3 4) 1) func:remove (0 2 3 4)}]
    );
    r:rule skolem:lemma641.

skolem:lemma421 a r:Inference;
    r:gives {
        :remove-3 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2 3 4) 4) func:remove (0 1 2 3)}]
    );
    r:rule skolem:lemma642.

skolem:lemma422 a r:Inference;
    r:gives {
        :remove-4 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2 3 4) -1) func:remove (0 1 2 3)}]
    );
    r:rule skolem:lemma643.

skolem:lemma423 a r:Inference;
    r:gives {
        :remove-5 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2 3 4) -5) func:remove (1 2 3 4)}]
    );
    r:rule skolem:lemma644.

skolem:lemma424 a r:Inference;
    r:gives {
        :reverse-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2 3 4)) func:reverse (4 3 2 1 0)}]
    );
    r:rule skolem:lemma645.

skolem:lemma425 a r:Inference;
    r:gives {
        :reverse-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((1)) func:reverse (1)}]
    );
    r:rule skolem:lemma646.

skolem:lemma426 a r:Inference;
    r:gives {
        :reverse-3 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {(()) func:reverse ()}]
    );
    r:rule skolem:lemma647.

skolem:lemma427 a r:Inference;
    r:gives {
        :index-of-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2 3 4) 2) func:index-of (2)}]
    );
    r:rule skolem:lemma648.

skolem:lemma428 a r:Inference;
    r:gives {
        :index-of-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2 3 4 5 2 2) 2) func:index-of (2 6 7)}]
    );
    r:rule skolem:lemma649.

skolem:lemma429 a r:Inference;
    r:gives {
        :index-of-3 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((2 2 3 4 5 2 2) 2) func:index-of (0 1 5 6)}]
    );
    r:rule skolem:lemma650.

skolem:lemma430 a r:Inference;
    r:gives {
        :index-of-4 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((2 2 3 4 5 2 2) 1) func:index-of ()}]
    );
    r:rule skolem:lemma651.

skolem:lemma431 a r:Inference;
    r:gives {
        :union-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2 4) (3 4 5 6)) func:union (0 1 2 4 3 5 6)}]
    );
    r:rule skolem:lemma652.

skolem:lemma432 a r:Inference;
    r:gives {
        :union-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2 3) (4)) func:union (0 1 2 3 4)}]
    );
    r:rule skolem:lemma653.

skolem:lemma433 a r:Inference;
    r:gives {
        :union-3 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2 3) (3)) func:union (0 1 2 3)}]
    );
    r:rule skolem:lemma654.

skolem:lemma434 a r:Inference;
    r:gives {
        :union-4 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 2 1 0)) func:union (0 2 1)}]
    );
    r:rule skolem:lemma655.

skolem:lemma435 a r:Inference;
    r:gives {
        :distinct-values-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2 3 4)) func:distinct-values (0 1 2 3 4)}]
    );
    r:rule skolem:lemma656.

skolem:lemma436 a r:Inference;
    r:gives {
        :distinct-values-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2 3 4 0 4)) func:distinct-values (0 1 2 3 4)}]
    );
    r:rule skolem:lemma657.

skolem:lemma437 a r:Inference;
    r:gives {
        :distinct-values-3 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((3 3 3)) func:distinct-values (3)}]
    );
    r:rule skolem:lemma658.

skolem:lemma438 a r:Inference;
    r:gives {
        :intersect-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2 3 4) (1 3)) func:intersect (1 3)}]
    );
    r:rule skolem:lemma659.

skolem:lemma439 a r:Inference;
    r:gives {
        :intersect-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2 3 4) (3 1)) func:intersect (1 3)}]
    );
    r:rule skolem:lemma660.

skolem:lemma440 a r:Inference;
    r:gives {
        :intersect-3 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2 3 4) ()) func:intersect ()}]
    );
    r:rule skolem:lemma661.

skolem:lemma441 a r:Inference;
    r:gives {
        :intersect-4 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2 3 4) (0 1 2 3 4 5 6)) func:intersect (0 1 2 3 4)}]
    );
    r:rule skolem:lemma662.

skolem:lemma442 a r:Inference;
    r:gives {
        :except-1 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2 3 4) (1 3)) func:except (0 2 4)}]
    );
    r:rule skolem:lemma663.

skolem:lemma443 a r:Inference;
    r:gives {
        :except-2 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2 3 4) ()) func:except (0 1 2 3 4)}]
    );
    r:rule skolem:lemma664.

skolem:lemma444 a r:Inference;
    r:gives {
        :except-3 :result true.
    };
    r:evidence (
        [ a r:Fact; r:gives {((0 1 2 3 4) (0 1 2 3 4)) func:except ()}]
    );
    r:rule skolem:lemma665.

skolem:lemma445 a r:Extraction;
    r:gives {
        {
            ("chat"@fr "chien"@fr) pred:literal-not-identical true.
        } => {
            :literal-not-identical-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma446 a r:Extraction;
    r:gives {
        {
            (:case "http://eulersharp.sourceforge.net/2007/07test#case") pred:iri-string true.
        } => {
            :iri-string-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma447 a r:Extraction;
    r:gives {
        {
            (1 1) func:numeric-add 2.
        } => {
            :numeric-add-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma448 a r:Extraction;
    r:gives {
        {
            (5 2) func:numeric-subtract 3.
        } => {
            :numeric-subtract-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma449 a r:Extraction;
    r:gives {
        {
            (5 2) func:numeric-multiply 10.
        } => {
            :numeric-multiply-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma450 a r:Extraction;
    r:gives {
        {
            (5 2) func:numeric-divide 2.5.
        } => {
            :numeric-divide-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma451 a r:Extraction;
    r:gives {
        {
            (5 2) func:numeric-integer-divide 2.
        } => {
            :numeric-integer-divide-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma452 a r:Extraction;
    r:gives {
        {
            (10 3) func:numeric-mod 1.
        } => {
            :numeric-mod-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma453 a r:Extraction;
    r:gives {
        {
            (6 -2) func:numeric-mod 0.
        } => {
            :numeric-mod-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma454 a r:Extraction;
    r:gives {
        {
            (4.5 1.2) func:numeric-mod 0.9000000000000004.
        } => {
            :numeric-mod-3 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma455 a r:Extraction;
    r:gives {
        {
            (123.0 6.0) func:numeric-mod 3.0.
        } => {
            :numeric-mod-4 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma456 a r:Extraction;
    r:gives {
        {
            (1 1.0) pred:numeric-equal true.
        } => {
            :numeric-equal-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma457 a r:Extraction;
    r:gives {
        {
            (2.0 3) pred:numeric-less-than true.
        } => {
            :numeric-less-than-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma458 a r:Extraction;
    r:gives {
        {
            (1.0 0) pred:numeric-greater-than true.
        } => {
            :numeric-greater-than-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma459 a r:Extraction;
    r:gives {
        {
            (1 1.01) pred:numeric-not-equal true.
        } => {
            :numeric-not-equal-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma460 a r:Extraction;
    r:gives {
        {
            (3 5.0) pred:numeric-less-than-or-equal true.
        } => {
            :numeric-less-than-or-equal-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma461 a r:Extraction;
    r:gives {
        {
            (1.0 1) pred:numeric-greater-than-or-equal true.
        } => {
            :numeric-greater-than-or-equal-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma462 a r:Extraction;
    r:gives {
        {
            (false) func:not true.
        } => {
            :not-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma463 a r:Extraction;
    r:gives {
        {
            (true) func:not false.
        } => {
            :not-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma464 a r:Extraction;
    r:gives {
        {
            (false false) pred:boolean-equal true.
        } => {
            :boolean-equal-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma465 a r:Extraction;
    r:gives {
        {
            (false true) pred:boolean-less-than true.
        } => {
            :boolean-less-than-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma466 a r:Extraction;
    r:gives {
        {
            (true false) pred:boolean-greater-than true.
        } => {
            :boolean-greater-than-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma467 a r:Extraction;
    r:gives {
        {
            ("abc" "abc") func:compare 0.
        } => {
            :compare-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma468 a r:Extraction;
    r:gives {
        {
            ("Straßen" "Straße") func:compare 1.
        } => {
            :compare-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma469 a r:Extraction;
    r:gives {
        {
            ("Ingratitude, " "thou " "marble-hearted" " fiend!") func:concat "Ingratitude, thou marble-hearted fiend!".
        } => {
            :concat-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma470 a r:Extraction;
    r:gives {
        {
            (("Now" "is" "the" "time" "...") " ") func:string-join "Now is the time ...".
        } => {
            :string-join-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma471 a r:Extraction;
    r:gives {
        {
            (("Blow, " "blow, " "thou " "winter " "wind!") "") func:string-join "Blow, blow, thou winter wind!".
        } => {
            :string-join-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma472 a r:Extraction;
    r:gives {
        {
            (() "separator") func:string-join "".
        } => {
            :string-join-3 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma473 a r:Extraction;
    r:gives {
        {
            ("motor car" 6) func:substring " car".
        } => {
            :substring-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma474 a r:Extraction;
    r:gives {
        {
            ("metadata" 4 3) func:substring "ada".
        } => {
            :substring-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma475 a r:Extraction;
    r:gives {
        {
            ("12345" 1.5 2.6) func:substring "234".
        } => {
            :substring-3 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma476 a r:Extraction;
    r:gives {
        {
            ("12345" 0 3) func:substring "12".
        } => {
            :substring-4 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma477 a r:Extraction;
    r:gives {
        {
            ("12345" 5 -3) func:substring "".
        } => {
            :substring-5 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma478 a r:Extraction;
    r:gives {
        {
            ("12345" -3 5) func:substring "1".
        } => {
            :substring-6 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma479 a r:Extraction;
    r:gives {
        {
            ("Harp not on that string, madam; that is past.") func:string-length 45.
        } => {
            :string-length-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma480 a r:Extraction;
    r:gives {
        {
            (""@en) func:string-length 0.
        } => {
            :string-length-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma481 a r:Extraction;
    r:gives {
        {
            ("abCd0") func:upper-case "ABCD0".
        } => {
            :upper-case-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma482 a r:Extraction;
    r:gives {
        {
            ("ABc!D") func:lower-case "abc!d".
        } => {
            :lower-case-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma483 a r:Extraction;
    r:gives {
        {
            ("00/Weather/CA/Los%20Angeles#ocean") func:encode-for-uri "00%2fWeather%2fCA%2fLos%2520Angeles%23ocean".
        } => {
            :encode-for-uri-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma484 a r:Extraction;
    r:gives {
        {
            ("~bébé") func:encode-for-uri "~b%c3%a9b%c3%a9".
        } => {
            :encode-for-uri-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma485 a r:Extraction;
    r:gives {
        {
            ("100% organic") func:encode-for-uri "100%25%20organic".
        } => {
            :encode-for-uri-3 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma486 a r:Extraction;
    r:gives {
        {
            ("tattoo" "attoo") func:substring-before "t".
        } => {
            :substring-before-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma487 a r:Extraction;
    r:gives {
        {
            ("tattoo" "tatto") func:substring-before "".
        } => {
            :substring-before-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma488 a r:Extraction;
    r:gives {
        {
            ("tattoo" "tat") func:substring-after "too".
        } => {
            :substring-after-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma489 a r:Extraction;
    r:gives {
        {
            ("tattoo" "tattoo") func:substring-after "".
        } => {
            :substring-after-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma490 a r:Extraction;
    r:gives {
        {
            ("tattoo" "t") pred:contains true.
        } => {
            :contains-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma491 a r:Extraction;
    r:gives {
        {
            ("tattoo" "tat") pred:starts-with true.
        } => {
            :starts-with-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma492 a r:Extraction;
    r:gives {
        {
            ("tattoo" "tattoo") pred:ends-with true.
        } => {
            :ends-with-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma493 a r:Extraction;
    r:gives {
        {
            ("abracadabra" "bra") pred:matches true.
        } => {
            :matches-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma494 a r:Extraction;
    r:gives {
        {
            ("abracadabra" "^a.*a$") pred:matches true.
        } => {
            :matches-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma495 a r:Extraction;
    r:gives {
        {
            ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:year-from-dateTime 1999.
        } => {
            :year-from-dateTime-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma496 a r:Extraction;
    r:gives {
        {
            ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:month-from-dateTime 5.
        } => {
            :month-from-dateTime-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma497 a r:Extraction;
    r:gives {
        {
            ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:day-from-dateTime 31.
        } => {
            :day-from-dateTime-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma498 a r:Extraction;
    r:gives {
        {
            ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:hours-from-dateTime 13.
        } => {
            :hours-from-dateTime-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma499 a r:Extraction;
    r:gives {
        {
            ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:minutes-from-dateTime 20.
        } => {
            :minutes-from-dateTime-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma500 a r:Extraction;
    r:gives {
        {
            ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:seconds-from-dateTime 0.
        } => {
            :seconds-from-dateTime-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma501 a r:Extraction;
    r:gives {
        {
            ("1999-05-31-05:00"^^xsd:date) func:year-from-date 1999.
        } => {
            :year-from-date-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma502 a r:Extraction;
    r:gives {
        {
            ("1999-05-31-05:00"^^xsd:date) func:month-from-date 5.
        } => {
            :month-from-date-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma503 a r:Extraction;
    r:gives {
        {
            ("1999-05-31-05:00"^^xsd:date) func:day-from-date 31.
        } => {
            :day-from-date-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma504 a r:Extraction;
    r:gives {
        {
            ("13:20:00-05:00"^^xsd:time) func:hours-from-time 13.
        } => {
            :hours-from-time-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma505 a r:Extraction;
    r:gives {
        {
            ("13:20:00-05:00"^^xsd:time) func:minutes-from-time 20.
        } => {
            :minutes-from-time-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma506 a r:Extraction;
    r:gives {
        {
            ("13:20:00-05:00"^^xsd:time) func:seconds-from-time 0.
        } => {
            :seconds-from-time-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma507 a r:Extraction;
    r:gives {
        {
            ("P20Y15M"^^xsd:yearMonthDuration) func:years-from-duration 21.
        } => {
            :years-from-duration-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma508 a r:Extraction;
    r:gives {
        {
            ("-P15M"^^xsd:yearMonthDuration) func:years-from-duration -1.
        } => {
            :years-from-duration-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma509 a r:Extraction;
    r:gives {
        {
            ("-P2DT15H"^^xsd:dayTimeDuration) func:years-from-duration 0.
        } => {
            :years-from-duration-3 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma510 a r:Extraction;
    r:gives {
        {
            ("P20Y15M"^^xsd:yearMonthDuration) func:months-from-duration 3.
        } => {
            :months-from-duration-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma511 a r:Extraction;
    r:gives {
        {
            ("-P20Y18M"^^xsd:yearMonthDuration) func:months-from-duration -6.
        } => {
            :months-from-duration-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma512 a r:Extraction;
    r:gives {
        {
            ("-P2DT15H0M0S"^^xsd:dayTimeDuration) func:months-from-duration 0.
        } => {
            :months-from-duration-3 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma513 a r:Extraction;
    r:gives {
        {
            ("P3DT10H"^^xsd:dayTimeDuration) func:days-from-duration 3.
        } => {
            :days-from-duration-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma514 a r:Extraction;
    r:gives {
        {
            ("P3DT55H"^^xsd:dayTimeDuration) func:days-from-duration 5.
        } => {
            :days-from-duration-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma515 a r:Extraction;
    r:gives {
        {
            ("P3Y5M"^^xsd:yearMonthDuration) func:days-from-duration 0.
        } => {
            :days-from-duration-3 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma516 a r:Extraction;
    r:gives {
        {
            ("P3DT10H"^^xsd:dayTimeDuration) func:hours-from-duration 10.
        } => {
            :hours-from-duration-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma517 a r:Extraction;
    r:gives {
        {
            ("P3DT12H32M12S"^^xsd:dayTimeDuration) func:hours-from-duration 12.
        } => {
            :hours-from-duration-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma518 a r:Extraction;
    r:gives {
        {
            ("PT123H"^^xsd:dayTimeDuration) func:hours-from-duration 3.
        } => {
            :hours-from-duration-3 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma519 a r:Extraction;
    r:gives {
        {
            ("-P3DT10H"^^xsd:dayTimeDuration) func:hours-from-duration -10.
        } => {
            :hours-from-duration-4 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma520 a r:Extraction;
    r:gives {
        {
            ("P3DT10H"^^xsd:dayTimeDuration) func:minutes-from-duration 0.
        } => {
            :minutes-from-duration-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma521 a r:Extraction;
    r:gives {
        {
            ("-P5DT12H30M"^^xsd:dayTimeDuration) func:minutes-from-duration -30.
        } => {
            :minutes-from-duration-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma522 a r:Extraction;
    r:gives {
        {
            ("P3DT10H12.5S"^^xsd:dayTimeDuration) func:seconds-from-duration 12.5.
        } => {
            :seconds-from-duration-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma523 a r:Extraction;
    r:gives {
        {
            ("-PT256S"^^xsd:dayTimeDuration) func:seconds-from-duration -16.0.
        } => {
            :seconds-from-duration-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma524 a r:Extraction;
    r:gives {
        {
            ("1999-05-31T13:20:00-05:00"^^xsd:dateTime) func:timezone-from-dateTime "-PT5H"^^xsd:dayTimeDuration.
        } => {
            :timezone-from-dateTime-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma525 a r:Extraction;
    r:gives {
        {
            ("2000-06-12T13:20:00Z"^^xsd:dateTime) func:timezone-from-dateTime "PT0S"^^xsd:dayTimeDuration.
        } => {
            :timezone-from-dateTime-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma526 a r:Extraction;
    r:gives {
        {
            ("1999-05-31-05:00"^^xsd:date) func:timezone-from-date "-PT5H"^^xsd:dayTimeDuration.
        } => {
            :timezone-from-date-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma527 a r:Extraction;
    r:gives {
        {
            ("2000-06-12Z"^^xsd:date) func:timezone-from-date "PT0S"^^xsd:dayTimeDuration.
        } => {
            :timezone-from-date-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma528 a r:Extraction;
    r:gives {
        {
            ("13:20:00-05:00"^^xsd:time) func:timezone-from-time "-PT5H"^^xsd:dayTimeDuration.
        } => {
            :timezone-from-time-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma529 a r:Extraction;
    r:gives {
        {
            ("13:20:00Z"^^xsd:time) func:timezone-from-time "PT0S"^^xsd:dayTimeDuration.
        } => {
            :timezone-from-time-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma530 a r:Extraction;
    r:gives {
        {
            ("2000-10-30T06:12:00-05:00"^^xsd:dateTime "1999-11-28T09:00:00Z"^^xsd:dateTime) func:subtract-dateTimes "P337DT2H12M"^^xsd:dayTimeDuration.
        } => {
            :subtract-dateTimes-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma531 a r:Extraction;
    r:gives {
        {
            ("2000-10-30Z"^^xsd:date "1999-11-28Z"^^xsd:date) func:subtract-dates "P337D"^^xsd:dayTimeDuration.
        } => {
            :subtract-dates-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma532 a r:Extraction;
    r:gives {
        {
            ("11:12:00Z"^^xsd:time "04:00:00-05:00"^^xsd:time) func:subtract-times "PT2H12M"^^xsd:dayTimeDuration.
        } => {
            :subtract-times-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma533 a r:Extraction;
    r:gives {
        {
            ("11:00:00-05:00"^^xsd:time "21:30:00+05:30"^^xsd:time) func:subtract-times "PT0S"^^xsd:dayTimeDuration.
        } => {
            :subtract-times-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma534 a r:Extraction;
    r:gives {
        {
            ("17:00:00-06:00"^^xsd:time "08:00:00+09:00"^^xsd:time) func:subtract-times "P1D"^^xsd:dayTimeDuration.
        } => {
            :subtract-times-3 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma535 a r:Extraction;
    r:gives {
        {
            ("24:00:00"^^xsd:time "23:59:59"^^xsd:time) func:subtract-times "-PT23H59M59S"^^xsd:dayTimeDuration.
        } => {
            :subtract-times-4 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma536 a r:Extraction;
    r:gives {
        {
            ("P2Y11M"^^xsd:yearMonthDuration "P3Y3M"^^xsd:yearMonthDuration) func:add-yearMonthDurations "P6Y2M"^^xsd:yearMonthDuration.
        } => {
            :add-yearMonthDurations-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma537 a r:Extraction;
    r:gives {
        {
            ("P2Y11M"^^xsd:yearMonthDuration "P3Y3M"^^xsd:yearMonthDuration) func:subtract-yearMonthDurations "-P4M"^^xsd:yearMonthDuration.
        } => {
            :subtract-yearMonthDurations-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma538 a r:Extraction;
    r:gives {
        {
            ("P2Y11M"^^xsd:yearMonthDuration 2.3) func:multiply-yearMonthDuration "P6Y9M"^^xsd:yearMonthDuration.
        } => {
            :multiply-yearMonthDuration-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma539 a r:Extraction;
    r:gives {
        {
            ("P2Y11M"^^xsd:yearMonthDuration 1.5) func:divide-yearMonthDuration "P1Y11M"^^xsd:yearMonthDuration.
        } => {
            :divide-yearMonthDuration-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma540 a r:Extraction;
    r:gives {
        {
            ("P3Y4M"^^xsd:yearMonthDuration "-P1Y4M"^^xsd:yearMonthDuration) func:divide-yearMonthDuration-by-yearMonthDuration -2.5.
        } => {
            :divide-yearMonthDuration-by-yearMonthDuration-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma541 a r:Extraction;
    r:gives {
        {
            ("P2DT12H5M"^^xsd:dayTimeDuration "P5DT12H"^^xsd:dayTimeDuration) func:add-dayTimeDurations "P8DT5M"^^xsd:dayTimeDuration.
        } => {
            :add-dayTimeDurations-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma542 a r:Extraction;
    r:gives {
        {
            ("P2DT12H"^^xsd:dayTimeDuration "P1DT10H30M"^^xsd:dayTimeDuration) func:subtract-dayTimeDurations "P1DT1H30M"^^xsd:dayTimeDuration.
        } => {
            :subtract-dayTimeDurations-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma543 a r:Extraction;
    r:gives {
        {
            ("PT2H10M"^^xsd:dayTimeDuration 2.1) func:multiply-dayTimeDuration "PT4H33M"^^xsd:dayTimeDuration.
        } => {
            :multiply-dayTimeDuration-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma544 a r:Extraction;
    r:gives {
        {
            ("P1DT2H30M10.5S"^^xsd:dayTimeDuration 1.5) func:divide-dayTimeDuration "PT17H40M7S"^^xsd:dayTimeDuration.
        } => {
            :divide-dayTimeDuration-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma545 a r:Extraction;
    r:gives {
        {
            ("PT4H33M"^^xsd:dayTimeDuration "PT2H10M"^^xsd:dayTimeDuration) func:divide-dayTimeDuration-by-dayTimeDuration 2.1.
        } => {
            :divide-dayTimeDuration-by-dayTimeDuration-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma546 a r:Extraction;
    r:gives {
        {
            ("2000-10-30T11:12:00Z"^^xsd:dateTime "P1Y2M"^^xsd:yearMonthDuration) func:add-yearMonthDuration-to-dateTime "2001-12-30T11:12:00Z"^^xsd:dateTime.
        } => {
            :add-yearMonthDuration-to-dateTime-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma547 a r:Extraction;
    r:gives {
        {
            ("2000-10-30Z"^^xsd:date "P1Y2M"^^xsd:yearMonthDuration) func:add-yearMonthDuration-to-date "2001-12-30Z"^^xsd:date.
        } => {
            :add-yearMonthDuration-to-date-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma548 a r:Extraction;
    r:gives {
        {
            ("2000-10-30T11:12:00Z"^^xsd:dateTime "P3DT1H15M"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-dateTime "2000-11-02T12:27:00Z"^^xsd:dateTime.
        } => {
            :add-dayTimeDuration-to-dateTime-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma549 a r:Extraction;
    r:gives {
        {
            ("2004-10-30Z"^^xsd:date "P2DT2H30M0S"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-date "2004-11-01Z"^^xsd:date.
        } => {
            :add-dayTimeDuration-to-date-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma550 a r:Extraction;
    r:gives {
        {
            ("11:12:00Z"^^xsd:time "P3DT1H15M"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-time "12:27:00Z"^^xsd:time.
        } => {
            :add-dayTimeDuration-to-time-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma551 a r:Extraction;
    r:gives {
        {
            ("2000-10-30T11:12:00Z"^^xsd:dateTime "P1Y2M"^^xsd:yearMonthDuration) func:subtract-yearMonthDuration-from-dateTime "1999-08-30T11:12:00Z"^^xsd:dateTime.
        } => {
            :subtract-yearMonthDuration-from-dateTime-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma552 a r:Extraction;
    r:gives {
        {
            ("2000-10-30Z"^^xsd:date "P1Y2M"^^xsd:yearMonthDuration) func:subtract-yearMonthDuration-from-date "1999-08-30Z"^^xsd:date.
        } => {
            :subtract-yearMonthDuration-from-date-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma553 a r:Extraction;
    r:gives {
        {
            ("2000-10-30T11:12:00Z"^^xsd:dateTime "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-dateTime "2000-10-27T09:57:00Z"^^xsd:dateTime.
        } => {
            :subtract-dayTimeDuration-from-dateTime-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma554 a r:Extraction;
    r:gives {
        {
            ("2000-10-30Z"^^xsd:date "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-date "2000-10-26Z"^^xsd:date.
        } => {
            :subtract-dayTimeDuration-from-date-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma555 a r:Extraction;
    r:gives {
        {
            ("11:12:00Z"^^xsd:time "P3DT1H15M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-time "09:57:00Z"^^xsd:time.
        } => {
            :subtract-dayTimeDuration-from-time-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma556 a r:Extraction;
    r:gives {
        {
            ("08:20:00-05:00"^^xsd:time "P23DT10H10M"^^xsd:dayTimeDuration) func:subtract-dayTimeDuration-from-time "22:10:00-05:00"^^xsd:time.
        } => {
            :subtract-dayTimeDuration-from-time-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma557 a r:Extraction;
    r:gives {
        {
            ("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-equal true.
        } => {
            :dateTime-equal-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma558 a r:Extraction;
    r:gives {
        {
            ("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T23:00:00+06:00"^^xsd:dateTime) pred:dateTime-equal true.
        } => {
            :dateTime-equal-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma559 a r:Extraction;
    r:gives {
        {
            ("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T17:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal false.
        } => {
            :dateTime-equal-3 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma560 a r:Extraction;
    r:gives {
        {
            ("2002-04-02T12:00:00-05:00"^^xsd:dateTime "2002-04-02T12:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal true.
        } => {
            :dateTime-equal-4 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma561 a r:Extraction;
    r:gives {
        {
            ("2002-04-02T23:00:00-04:00"^^xsd:dateTime "2002-04-03T02:00:00-01:00"^^xsd:dateTime) pred:dateTime-equal true.
        } => {
            :dateTime-equal-5 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma562 a r:Extraction;
    r:gives {
        {
            ("1999-12-31T24:00:00-05:00"^^xsd:dateTime "2000-01-01T00:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal true.
        } => {
            :dateTime-equal-6 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma563 a r:Extraction;
    r:gives {
        {
            ("2005-04-04T24:00:00-05:00"^^xsd:dateTime "2005-04-04T00:00:00-05:00"^^xsd:dateTime) pred:dateTime-equal false.
        } => {
            :dateTime-equal-7 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma564 a r:Extraction;
    r:gives {
        {
            ("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2010-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-less-than true.
        } => {
            :dateTime-less-than-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma565 a r:Extraction;
    r:gives {
        {
            ("2010-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-greater-than true.
        } => {
            :dateTime-greater-than-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma566 a r:Extraction;
    r:gives {
        {
            ("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-equal false.
        } => {
            :date-equal-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma567 a r:Extraction;
    r:gives {
        {
            ("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-equal true.
        } => {
            :date-equal-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma568 a r:Extraction;
    r:gives {
        {
            ("2004-12-25Z"^^xsd:date "2004-12-25-05:00"^^xsd:date) pred:date-less-than true.
        } => {
            :date-less-than-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma569 a r:Extraction;
    r:gives {
        {
            ("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-less-than false.
        } => {
            :date-less-than-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma570 a r:Extraction;
    r:gives {
        {
            ("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-greater-than true.
        } => {
            :date-greater-than-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma571 a r:Extraction;
    r:gives {
        {
            ("2004-12-25-12:00"^^xsd:date "2004-12-26+12:00"^^xsd:date) pred:date-greater-than false.
        } => {
            :date-greater-than-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma572 a r:Extraction;
    r:gives {
        {
            ("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-equal false.
        } => {
            :time-equal-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma573 a r:Extraction;
    r:gives {
        {
            ("21:30:00+10:30"^^xsd:time "06:00:00-05:00"^^xsd:time) pred:time-equal true.
        } => {
            :time-equal-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma574 a r:Extraction;
    r:gives {
        {
            ("24:00:00+01:00"^^xsd:time "00:00:00+01:00"^^xsd:time) pred:time-equal true.
        } => {
            :time-equal-3 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma575 a r:Extraction;
    r:gives {
        {
            ("12:00:00-05:00"^^xsd:time "23:00:00+06:00"^^xsd:time) pred:time-less-than false.
        } => {
            :time-less-than-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma576 a r:Extraction;
    r:gives {
        {
            ("11:00:00-05:00"^^xsd:time "17:00:00Z"^^xsd:time) pred:time-less-than true.
        } => {
            :time-less-than-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma577 a r:Extraction;
    r:gives {
        {
            ("23:59:59-05:00"^^xsd:time "24:00:00-05:00"^^xsd:time) pred:time-less-than false.
        } => {
            :time-less-than-3 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma578 a r:Extraction;
    r:gives {
        {
            ("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-greater-than false.
        } => {
            :time-greater-than-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma579 a r:Extraction;
    r:gives {
        {
            ("P1Y"^^xsd:duration "P12M"^^xsd:duration) pred:duration-equal true.
        } => {
            :duration-equal-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma580 a r:Extraction;
    r:gives {
        {
            ("PT24H"^^xsd:duration "P1D"^^xsd:duration) pred:duration-equal true.
        } => {
            :duration-equal-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma581 a r:Extraction;
    r:gives {
        {
            ("P1Y"^^xsd:duration "P365D"^^xsd:duration) pred:duration-equal false.
        } => {
            :duration-equal-3 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma582 a r:Extraction;
    r:gives {
        {
            ("P2Y0M0DT0H0M0S"^^xsd:duration "P24M"^^xsd:duration) pred:duration-equal true.
        } => {
            :duration-equal-4 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma583 a r:Extraction;
    r:gives {
        {
            ("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-less-than true.
        } => {
            :dayTimeDuration-less-than-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma584 a r:Extraction;
    r:gives {
        {
            ("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-greater-than false.
        } => {
            :dayTimeDuration-greater-than-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma585 a r:Extraction;
    r:gives {
        {
            ("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-less-than true.
        } => {
            :yearMonthDuration-less-than-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma586 a r:Extraction;
    r:gives {
        {
            ("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-greater-than false.
        } => {
            :yearMonthDuration-greater-than-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma587 a r:Extraction;
    r:gives {
        {
            ("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-not-equal false.
        } => {
            :dateTime-not-equal-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma588 a r:Extraction;
    r:gives {
        {
            ("2002-04-02T12:00:00-01:00"^^xsd:dateTime "2002-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-less-than-or-equal true.
        } => {
            :dateTime-less-than-or-equal-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma589 a r:Extraction;
    r:gives {
        {
            ("2010-04-02T12:00:00-01:00"^^xsd:dateTime "2010-04-02T17:00:00+04:00"^^xsd:dateTime) pred:dateTime-greater-than-or-equal true.
        } => {
            :dateTime-greater-than-or-equal-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma590 a r:Extraction;
    r:gives {
        {
            ("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-not-equal true.
        } => {
            :date-not-equal-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma591 a r:Extraction;
    r:gives {
        {
            ("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-less-than-or-equal false.
        } => {
            :date-less-than-or-equal-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma592 a r:Extraction;
    r:gives {
        {
            ("2004-12-25Z"^^xsd:date "2004-12-25+07:00"^^xsd:date) pred:date-greater-than-or-equal true.
        } => {
            :date-greater-than-or-equal-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma593 a r:Extraction;
    r:gives {
        {
            ("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-not-equal true.
        } => {
            :time-not-equal-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma594 a r:Extraction;
    r:gives {
        {
            ("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-less-than-or-equal true.
        } => {
            :time-less-than-or-equal-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma595 a r:Extraction;
    r:gives {
        {
            ("08:00:00+09:00"^^xsd:time "17:00:00-06:00"^^xsd:time) pred:time-greater-than-or-equal false.
        } => {
            :time-greater-than-or-equal-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma596 a r:Extraction;
    r:gives {
        {
            ("P1Y"^^xsd:duration "P12M"^^xsd:duration) pred:duration-not-equal false.
        } => {
            :duration-not-equal-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma597 a r:Extraction;
    r:gives {
        {
            ("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-less-than-or-equal true.
        } => {
            :dayTimeDuration-less-than-or-equal-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma598 a r:Extraction;
    r:gives {
        {
            ("P1DT1M"^^xsd:dayTimeDuration "P3DT1H15M"^^xsd:dayTimeDuration) pred:dayTimeDuration-greater-than-or-equal false.
        } => {
            :dayTimeDuration-greater-than-or-equal-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma599 a r:Extraction;
    r:gives {
        {
            ("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-less-than-or-equal true.
        } => {
            :yearMonthDuration-less-than-or-equal-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma600 a r:Extraction;
    r:gives {
        {
            ("P1Y1M"^^xsd:yearMonthDuration "P3Y"^^xsd:yearMonthDuration) pred:yearMonthDuration-greater-than-or-equal false.
        } => {
            :yearMonthDuration-greater-than-or-equal-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma601 a r:Extraction;
    r:gives {
        {
            ("Family Guy") func:PlainLiteral-from-string-lang "Family Guy".
        } => {
            :PlainLiteral-from-string-lang-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma602 a r:Extraction;
    r:gives {
        {
            ("Family Guy" "EN") func:PlainLiteral-from-string-lang "Family Guy"@en.
        } => {
            :PlainLiteral-from-string-lang-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma603 a r:Extraction;
    r:gives {
        {
            ("Family Guy") func:string-from-PlainLiteral "Family Guy".
        } => {
            :string-from-PlainLiteral-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma604 a r:Extraction;
    r:gives {
        {
            ("Family Guy"@en) func:string-from-PlainLiteral "Family Guy".
        } => {
            :string-from-PlainLiteral-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma605 a r:Extraction;
    r:gives {
        {
            ("Family Guy") func:lang-from-PlainLiteral "".
        } => {
            :lang-from-PlainLiteral-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma606 a r:Extraction;
    r:gives {
        {
            ("Family Guy"@en) func:lang-from-PlainLiteral "en".
        } => {
            :lang-from-PlainLiteral-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma607 a r:Extraction;
    r:gives {
        {
            ("Family Guy" "Mother") func:PlainLiteral-compare -1.
        } => {
            :PlainLiteral-compare-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma608 a r:Extraction;
    r:gives {
        {
            ("Family Guy"@en "Brother"@en) func:PlainLiteral-compare 1.
        } => {
            :PlainLiteral-compare-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma609 a r:Extraction;
    r:gives {
        {
            ("Family Guy") func:PlainLiteral-length 10.
        } => {
            :PlainLiteral-length-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma610 a r:Extraction;
    r:gives {
        {
            ("Family Guy"@en) func:PlainLiteral-length 10.
        } => {
            :PlainLiteral-length-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma611 a r:Extraction;
    r:gives {
        {
            ("Family Guy"@en "en") pred:matches-language-range true.
        } => {
            :matches-language-range-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma612 a r:Extraction;
    r:gives {
        {
            ("Family Guy"@en-us "en-*") pred:matches-language-range true.
        } => {
            :matches-language-range-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma613 a r:Extraction;
    r:gives {
        {
            ((:a :b :c :d)) pred:is-list true.
        } => {
            :is-list-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma614 a r:Extraction;
    r:gives {
        {
            ((:a :b :c :d) :b) pred:list-contains true.
        } => {
            :list-contains-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma615 a r:Extraction;
    r:gives {
        {
            (:a :b :c :d) func:make-list (:a :b :c :d).
        } => {
            :make-list-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma616 a r:Extraction;
    r:gives {
        {
            ((:a :b :c :d)) func:count 4.
        } => {
            :count-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma617 a r:Extraction;
    r:gives {
        {
            ((:a :b :c :d) 3) func:get :d.
        } => {
            :get-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma618 a r:Extraction;
    r:gives {
        {
            ((0 1 2 3 4) 0 0) func:sublist ().
        } => {
            :sublist-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma619 a r:Extraction;
    r:gives {
        {
            ((0 1 2 3 4) 0 1) func:sublist (0).
        } => {
            :sublist-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma620 a r:Extraction;
    r:gives {
        {
            ((0 1 2 3 4) 0 4) func:sublist (0 1 2 3).
        } => {
            :sublist-3 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma621 a r:Extraction;
    r:gives {
        {
            ((0 1 2 3 4) 0 5) func:sublist (0 1 2 3 4).
        } => {
            :sublist-4 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma622 a r:Extraction;
    r:gives {
        {
            ((0 1 2 3 4) 0 10) func:sublist (0 1 2 3 4).
        } => {
            :sublist-5 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma623 a r:Extraction;
    r:gives {
        {
            ((0 1 2 3 4) 0 -2) func:sublist (0 1 2).
        } => {
            :sublist-6 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma624 a r:Extraction;
    r:gives {
        {
            ((0 1 2 3 4) 2 4) func:sublist (2 3).
        } => {
            :sublist-7 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma625 a r:Extraction;
    r:gives {
        {
            ((0 1 2 3 4) 2 -2) func:sublist (2).
        } => {
            :sublist-9 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma626 a r:Extraction;
    r:gives {
        {
            ((0 1 2 3 4) 3) func:sublist (3 4).
        } => {
            :sublist-10 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma627 a r:Extraction;
    r:gives {
        {
            ((0 1 2 3 4) -2) func:sublist (3 4).
        } => {
            :sublist-11 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma628 a r:Extraction;
    r:gives {
        {
            ((0 1 2) 3) func:append (0 1 2 3).
        } => {
            :append-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma629 a r:Extraction;
    r:gives {
        {
            ((0 1 2) 3 4) func:append (0 1 2 3 4).
        } => {
            :append-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma630 a r:Extraction;
    r:gives {
        {
            ((1 1) (1) (1) ((1))) func:append (1 1 (1) (1) ((1))).
        } => {
            :append-3 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma631 a r:Extraction;
    r:gives {
        {
            (() 1) func:append (1).
        } => {
            :append-4 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma632 a r:Extraction;
    r:gives {
        {
            ((0 1 2) (3 4 5)) func:concatenate (0 1 2 3 4 5).
        } => {
            :concatenate-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma633 a r:Extraction;
    r:gives {
        {
            ((1 1) (1) (1)) func:concatenate (1 1 1 1).
        } => {
            :concatenate-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma634 a r:Extraction;
    r:gives {
        {
            (()) func:concatenate ().
        } => {
            :concatenate-3 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma635 a r:Extraction;
    r:gives {
        {
            (() (1) () (2) ((3))) func:concatenate (1 2 (3)).
        } => {
            :concatenate-4 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma636 a r:Extraction;
    r:gives {
        {
            ((0 1 2 3 4) 0 99) func:insert-before (99 0 1 2 3 4).
        } => {
            :insert-before-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma637 a r:Extraction;
    r:gives {
        {
            ((0 1 2 3 4) 1 99) func:insert-before (0 99 1 2 3 4).
        } => {
            :insert-before-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma638 a r:Extraction;
    r:gives {
        {
            ((0 1 2 3 4) -1 99) func:insert-before (0 1 2 3 99 4).
        } => {
            :insert-before-3 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma639 a r:Extraction;
    r:gives {
        {
            ((0 1 2 3 4) -5 99) func:insert-before (99 0 1 2 3 4).
        } => {
            :insert-before-4 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma640 a r:Extraction;
    r:gives {
        {
            ((0 1 2 3 4) 0) func:remove (1 2 3 4).
        } => {
            :remove-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma641 a r:Extraction;
    r:gives {
        {
            ((0 1 2 3 4) 1) func:remove (0 2 3 4).
        } => {
            :remove-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma642 a r:Extraction;
    r:gives {
        {
            ((0 1 2 3 4) 4) func:remove (0 1 2 3).
        } => {
            :remove-3 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma643 a r:Extraction;
    r:gives {
        {
            ((0 1 2 3 4) -1) func:remove (0 1 2 3).
        } => {
            :remove-4 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma644 a r:Extraction;
    r:gives {
        {
            ((0 1 2 3 4) -5) func:remove (1 2 3 4).
        } => {
            :remove-5 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma645 a r:Extraction;
    r:gives {
        {
            ((0 1 2 3 4)) func:reverse (4 3 2 1 0).
        } => {
            :reverse-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma646 a r:Extraction;
    r:gives {
        {
            ((1)) func:reverse (1).
        } => {
            :reverse-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma647 a r:Extraction;
    r:gives {
        {
            (()) func:reverse ().
        } => {
            :reverse-3 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma648 a r:Extraction;
    r:gives {
        {
            ((0 1 2 3 4) 2) func:index-of (2).
        } => {
            :index-of-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma649 a r:Extraction;
    r:gives {
        {
            ((0 1 2 3 4 5 2 2) 2) func:index-of (2 6 7).
        } => {
            :index-of-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma650 a r:Extraction;
    r:gives {
        {
            ((2 2 3 4 5 2 2) 2) func:index-of (0 1 5 6).
        } => {
            :index-of-3 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma651 a r:Extraction;
    r:gives {
        {
            ((2 2 3 4 5 2 2) 1) func:index-of ().
        } => {
            :index-of-4 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma652 a r:Extraction;
    r:gives {
        {
            ((0 1 2 4) (3 4 5 6)) func:union (0 1 2 4 3 5 6).
        } => {
            :union-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma653 a r:Extraction;
    r:gives {
        {
            ((0 1 2 3) (4)) func:union (0 1 2 3 4).
        } => {
            :union-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma654 a r:Extraction;
    r:gives {
        {
            ((0 1 2 3) (3)) func:union (0 1 2 3).
        } => {
            :union-3 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma655 a r:Extraction;
    r:gives {
        {
            ((0 2 1 0)) func:union (0 2 1).
        } => {
            :union-4 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma656 a r:Extraction;
    r:gives {
        {
            ((0 1 2 3 4)) func:distinct-values (0 1 2 3 4).
        } => {
            :distinct-values-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma657 a r:Extraction;
    r:gives {
        {
            ((0 1 2 3 4 0 4)) func:distinct-values (0 1 2 3 4).
        } => {
            :distinct-values-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma658 a r:Extraction;
    r:gives {
        {
            ((3 3 3)) func:distinct-values (3).
        } => {
            :distinct-values-3 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma659 a r:Extraction;
    r:gives {
        {
            ((0 1 2 3 4) (1 3)) func:intersect (1 3).
        } => {
            :intersect-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma660 a r:Extraction;
    r:gives {
        {
            ((0 1 2 3 4) (3 1)) func:intersect (1 3).
        } => {
            :intersect-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma661 a r:Extraction;
    r:gives {
        {
            ((0 1 2 3 4) ()) func:intersect ().
        } => {
            :intersect-3 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma662 a r:Extraction;
    r:gives {
        {
            ((0 1 2 3 4) (0 1 2 3 4 5 6)) func:intersect (0 1 2 3 4).
        } => {
            :intersect-4 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma663 a r:Extraction;
    r:gives {
        {
            ((0 1 2 3 4) (1 3)) func:except (0 2 4).
        } => {
            :except-1 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma664 a r:Extraction;
    r:gives {
        {
            ((0 1 2 3 4) ()) func:except (0 1 2 3 4).
        } => {
            :except-2 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].

skolem:lemma665 a r:Extraction;
    r:gives {
        {
            ((0 1 2 3 4) (0 1 2 3 4)) func:except ().
        } => {
            :except-3 :result true.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/rif/rifP.n3>].


@prefix skolem: <http://eyereasoner.github.io/.well-known/genid/8b98b360-9a70-4845-b52c-c675af60ad01#>.
@prefix r: <http://www.w3.org/2000/10/swap/reason#>.
@prefix : <http://www.agfa.com/w3c/euler/case001#>.
@prefix fl: <http://eulersharp.sourceforge.net/2003/03swap/fl-rules#>.
@prefix owl: <http://www.w3.org/2002/07/owl#>.
@prefix n3: <http://www.w3.org/2004/06/rei#>.
@prefix var: <http://eyereasoner.github.io/var#>.
@prefix math: <http://www.w3.org/2000/10/swap/math#>.
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>.
@prefix fcm: <http://eulersharp.sourceforge.net/2006/02swap/fcm-plugin#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.

skolem:proof a r:Proof, r:Conjunction;
    r:component skolem:lemma1;
    r:component skolem:lemma2;
    r:component skolem:lemma3;
    r:component skolem:lemma4;
    r:component skolem:lemma5;
    r:component skolem:lemma6;
    r:component skolem:lemma7;
    r:component skolem:lemma8;
    r:gives {
        (:Ann :ChildAge) fl:pi 0.4167000000000005 .
        (:Ann :AdultAge) fl:pi 0.5832999999999995 .
        (:Ann owl:Thing) fl:pi 1.0 .
        (:Ann owl:Nothing) fl:pi 0.0 .
        (:Ann :NormalIntraocularPressure) fl:pi 0.42055693693538665 .
        (:Ann :IncreasedIntraocularPressure) fl:pi 0.5762688313443307 .
        (:Ann :NonNormalIntraocularPressure) fl:pi 0.5794430630646134 .
        (:Ann :NonIncreasedIntraocularPressure) fl:pi 0.4237311686556693 .
    }.

skolem:lemma1 a r:Inference;
    r:gives {
        (:Ann :ChildAge) fl:pi 0.4167000000000005 .
    };
    r:evidence (
        skolem:lemma9
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo 0.4167000000000005];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#Ann"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#ChildAge"]];
    r:rule skolem:lemma10.

skolem:lemma2 a r:Inference;
    r:gives {
        (:Ann :AdultAge) fl:pi 0.5832999999999995 .
    };
    r:evidence (
        skolem:lemma11
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo 0.5832999999999995];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#Ann"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#AdultAge"]];
    r:rule skolem:lemma10.

skolem:lemma3 a r:Inference;
    r:gives {
        (:Ann owl:Thing) fl:pi 1.0 .
    };
    r:evidence (
        skolem:lemma12
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo 1.0];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#Ann"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://www.w3.org/2002/07/owl#Thing"]];
    r:rule skolem:lemma10.

skolem:lemma4 a r:Inference;
    r:gives {
        (:Ann owl:Nothing) fl:pi 0.0 .
    };
    r:evidence (
        skolem:lemma13
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo 0.0];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#Ann"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://www.w3.org/2002/07/owl#Nothing"]];
    r:rule skolem:lemma10.

skolem:lemma5 a r:Inference;
    r:gives {
        (:Ann :NormalIntraocularPressure) fl:pi 0.42055693693538665 .
    };
    r:evidence (
        skolem:lemma14
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo 0.42055693693538665];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#Ann"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#NormalIntraocularPressure"]];
    r:rule skolem:lemma10.

skolem:lemma6 a r:Inference;
    r:gives {
        (:Ann :IncreasedIntraocularPressure) fl:pi 0.5762688313443307 .
    };
    r:evidence (
        skolem:lemma15
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo 0.5762688313443307];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#Ann"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#IncreasedIntraocularPressure"]];
    r:rule skolem:lemma10.

skolem:lemma7 a r:Inference;
    r:gives {
        (:Ann :NonNormalIntraocularPressure) fl:pi 0.5794430630646134 .
    };
    r:evidence (
        skolem:lemma16
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo 0.5794430630646134];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#Ann"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#NonNormalIntraocularPressure"]];
    r:rule skolem:lemma10.

skolem:lemma8 a r:Inference;
    r:gives {
        (:Ann :NonIncreasedIntraocularPressure) fl:pi 0.4237311686556693 .
    };
    r:evidence (
        skolem:lemma17
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo 0.4237311686556693];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#Ann"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#NonIncreasedIntraocularPressure"]];
    r:rule skolem:lemma10.

skolem:lemma9 a r:Inference;
    r:gives {
        (:Ann :ChildAge) fl:pi 0.4167000000000005 .
    };
    r:evidence (
        skolem:lemma18
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_3"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_4"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_3"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_5"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_4"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_6"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_5"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_8"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_7"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_7"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_6"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_9"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_8"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_10"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_9"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_11"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_10"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_12"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_11"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_13"]; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#Ann"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_14"]; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#ChildAge"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_15"]; r:boundTo 0.4167000000000005];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_16"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_12"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_17"]; r:boundTo 0.4167000000000005];
    r:rule skolem:lemma19.

skolem:lemma10 a r:Extraction;
    r:gives {
        @forAll var:x_0, var:x_1, var:x_2. {
            (var:x_0 var:x_1) fl:pi var:x_2.
        } => {
            (var:x_0 var:x_1) fl:pi var:x_2.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/fcm/example003Q.n3>].

skolem:lemma11 a r:Inference;
    r:gives {
        (:Ann :AdultAge) fl:pi 0.5832999999999995 .
    };
    r:evidence (
        skolem:lemma20
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_3"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_4"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_3"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_5"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_4"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_6"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_5"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_8"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_7"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_7"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_6"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_9"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_8"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_10"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_9"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_11"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_10"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_12"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_11"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_13"]; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#Ann"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_14"]; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#AdultAge"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_15"]; r:boundTo 0.5832999999999995];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_16"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_12"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_17"]; r:boundTo 0.5832999999999995];
    r:rule skolem:lemma19.

skolem:lemma12 a r:Inference;
    r:gives {
        (:Ann owl:Thing) fl:pi 1.0 .
    };
    r:evidence (
        skolem:lemma21
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_3"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_4"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_3"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_5"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_4"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_6"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_5"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_8"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_7"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_7"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_6"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_9"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_8"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_10"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_9"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_11"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_10"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_12"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_11"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_13"]; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#Ann"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_14"]; r:boundTo [ n3:uri "http://www.w3.org/2002/07/owl#Thing"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_15"]; r:boundTo 1.0];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_16"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_12"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_17"]; r:boundTo 1.0];
    r:rule skolem:lemma19.

skolem:lemma13 a r:Inference;
    r:gives {
        (:Ann owl:Nothing) fl:pi 0.0 .
    };
    r:evidence (
        skolem:lemma22
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_3"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_4"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_3"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_5"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_4"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_6"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_5"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_8"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_7"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_7"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_6"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_9"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_8"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_10"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_9"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_11"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_10"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_12"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_11"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_13"]; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#Ann"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_14"]; r:boundTo [ n3:uri "http://www.w3.org/2002/07/owl#Nothing"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_15"]; r:boundTo 0.0];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_16"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_12"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_17"]; r:boundTo 0.0];
    r:rule skolem:lemma19.

skolem:lemma14 a r:Inference;
    r:gives {
        (:Ann :NormalIntraocularPressure) fl:pi 0.42055693693538665 .
    };
    r:evidence (
        skolem:lemma23
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_3"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_4"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_3"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_5"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_4"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_6"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_5"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_8"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_7"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_7"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_6"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_9"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_8"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_10"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_9"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_11"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_10"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_12"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_11"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_13"]; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#Ann"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_14"]; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#NormalIntraocularPressure"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_15"]; r:boundTo 0.42055693693538665];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_16"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_12"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_17"]; r:boundTo 0.42055693693538665];
    r:rule skolem:lemma19.

skolem:lemma15 a r:Inference;
    r:gives {
        (:Ann :IncreasedIntraocularPressure) fl:pi 0.5762688313443307 .
    };
    r:evidence (
        skolem:lemma24
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1)];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_3"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_4"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_3"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_5"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_4"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_6"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_5"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_8"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_7"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_7"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_6"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_9"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_8"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_10"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_9"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_11"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_10"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_12"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_11"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_13"]; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#Ann"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_14"]; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#IncreasedIntraocularPressure"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_15"]; r:boundTo 0.5762688313443307];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_16"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_12"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_17"]; r:boundTo 0.5762688313443307];
    r:rule skolem:lemma19.

skolem:lemma16 a r:Inference;
    r:gives {
        (:Ann :NonNormalIntraocularPressure) fl:pi 0.5794430630646134 .
    };
    r:evidence (
        skolem:lemma25
        skolem:lemma14
        [ a r:Fact; r:gives {(1.0 0.42055693693538665) math:difference 0.5794430630646134}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#NonNormalIntraocularPressure"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#NormalIntraocularPressure"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_3"]; r:boundTo 0.42055693693538665];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#Ann"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_4"]; r:boundTo 0.5794430630646134];
    r:rule skolem:lemma26.

skolem:lemma17 a r:Inference;
    r:gives {
        (:Ann :NonIncreasedIntraocularPressure) fl:pi 0.4237311686556693 .
    };
    r:evidence (
        skolem:lemma27
        skolem:lemma15
        [ a r:Fact; r:gives {(1.0 0.5762688313443307) math:difference 0.4237311686556693}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#NonIncreasedIntraocularPressure"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#IncreasedIntraocularPressure"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_3"]; r:boundTo 0.5762688313443307];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo [ n3:uri "http://www.agfa.com/w3c/euler/case001#Ann"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_4"]; r:boundTo 0.4237311686556693];
    r:rule skolem:lemma26.

skolem:lemma18 a r:Inference;
    r:gives {
        ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:call {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    ("forall" {
                        (_:sk_0 _:sk_1) fl:mu _:sk_2.
                    } {
                        ("if_then_else" {
                            (_:sk_0) fcm:fm true.
                        } true {
                            ("assertz" {
                                (_:sk_0) fcm:fm true.
                            }) e:derive true.
                        }) e:derive true.
                        ("assertz" {
                            _:sk_0 fcm:pi (_:sk_1 _:sk_2).
                        }) e:derive true.
                    }) e:derive true.
                    ("forall" {
                        (_:sk_0 _:sk_1) fl:sigma _:sk_3.
                    } {
                        ("if_then_else" {
                            (_:sk_0) fcm:fs true.
                        } true {
                            ("assertz" {
                                (_:sk_0) fcm:fs true.
                            }) e:derive true.
                        }) e:derive true.
                        ("if_then_else" {
                            (_:sk_1) fcm:fs true.
                        } true {
                            ("assertz" {
                                (_:sk_1) fcm:fs true.
                            }) e:derive true.
                        }) e:derive true.
                    }) e:derive true.
                    ("between" 1 20 _:sk_4) e:derive true.
                    (_:sk_0) fcm:fm true.
                    (_:sk_1) fcm:fs true.
                    ("findall" _:sk_5 {
                        (_:sk_6 _:sk_1) fl:sigma _:sk_7.
                        _:sk_0 fcm:pi (_:sk_6 _:sk_8).
                        ("(2*_M-1)*(2*_W-1)" _:sk_8 _:sk_7) e:calculate _:sk_5.
                    } _:sk_9) e:derive true.
                    ("if_then_else" {
                        _:sk_9 log:equalTo ().
                    } true {
                        _:sk_9 math:sum _:sk_10.
                        ("1/(1+exp(-_S))" _:sk_10) e:calculate _:sk_2.
                        ("retractall" {
                            _:sk_0 fcm:pi (_:sk_1 _:sk_11).
                        }) e:derive true.
                        ("assertz" {
                            _:sk_0 fcm:pi (_:sk_1 _:sk_2).
                        }) e:derive true.
                    }) e:derive true.
                    ("fail") e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            :Ann fcm:pi (:ChildAge 0.4167000000000005).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {
                    (:Ann :ChildAge) fl:pi _:sk_12.
                }.
            } {
                0.4167000000000005 log:equalTo _:sk_12.
            } {
                0.4167000000000005 log:equalTo 0.4167000000000005.
            }) e:derive true.
        }.
    };
    r:evidence (
        [ a r:Fact; r:gives {("if_then_else" {
            ("nb_getval" "fnet" "done") e:derive true.
        } true {
            (";" {
                ("forall" {
                    (_:sk_0 _:sk_1) fl:mu _:sk_2.
                } {
                    ("if_then_else" {
                        (_:sk_0) fcm:fm true.
                    } true {
                        ("assertz" {
                            (_:sk_0) fcm:fm true.
                        }) e:derive true.
                    }) e:derive true.
                    ("assertz" {
                        _:sk_0 fcm:pi (_:sk_1 _:sk_2).
                    }) e:derive true.
                }) e:derive true.
                ("forall" {
                    (_:sk_0 _:sk_1) fl:sigma _:sk_3.
                } {
                    ("if_then_else" {
                        (_:sk_0) fcm:fs true.
                    } true {
                        ("assertz" {
                            (_:sk_0) fcm:fs true.
                        }) e:derive true.
                    }) e:derive true.
                    ("if_then_else" {
                        (_:sk_1) fcm:fs true.
                    } true {
                        ("assertz" {
                            (_:sk_1) fcm:fs true.
                        }) e:derive true.
                    }) e:derive true.
                }) e:derive true.
                ("between" 1 20 _:sk_4) e:derive true.
                (_:sk_0) fcm:fm true.
                (_:sk_1) fcm:fs true.
                ("findall" _:sk_5 {
                    (_:sk_6 _:sk_1) fl:sigma _:sk_7.
                    _:sk_0 fcm:pi (_:sk_6 _:sk_8).
                    ("(2*_M-1)*(2*_W-1)" _:sk_8 _:sk_7) e:calculate _:sk_5.
                } _:sk_9) e:derive true.
                ("if_then_else" {
                    _:sk_9 log:equalTo ().
                } true {
                    _:sk_9 math:sum _:sk_10.
                    ("1/(1+exp(-_S))" _:sk_10) e:calculate _:sk_2.
                    ("retractall" {
                        _:sk_0 fcm:pi (_:sk_1 _:sk_11).
                    }) e:derive true.
                    ("assertz" {
                        _:sk_0 fcm:pi (_:sk_1 _:sk_2).
                    }) e:derive true.
                }) e:derive true.
                ("fail") e:derive true.
            } {
                ("nb_setval" "fnet" "done") e:derive true.
            }) e:derive true.
        }) e:derive true}]
        [ a r:Fact; r:gives {:Ann fcm:pi (:ChildAge 0.4167000000000005)}]
        [ a r:Fact; r:gives {("if_then_else" {
            ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {
                (:Ann :ChildAge) fl:pi _:sk_12.
            }.
        } {
            0.4167000000000005 log:equalTo _:sk_12.
        } {
            0.4167000000000005 log:equalTo 0.4167000000000005.
        }) e:derive true}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_3"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_3"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_4"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_4"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_5"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_5"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_7"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_7"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_6"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_6"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_8"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_8"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_9"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_9"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_10"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_10"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_11"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_11"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_12"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_12"]];
    r:rule [ a r:DerivedRule; r:gives {
        {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    ("forall" {
                        (var:x_0 var:x_1) fl:mu var:x_2.
                    } {
                        ("if_then_else" {
                            (var:x_0) fcm:fm true.
                        } true {
                            ("assertz" {
                                (var:x_0) fcm:fm true.
                            }) e:derive true.
                        }) e:derive true.
                        ("assertz" {
                            var:x_0 fcm:pi (var:x_1 var:x_2).
                        }) e:derive true.
                    }) e:derive true.
                    ("forall" {
                        (var:x_0 var:x_1) fl:sigma var:x_3.
                    } {
                        ("if_then_else" {
                            (var:x_0) fcm:fs true.
                        } true {
                            ("assertz" {
                                (var:x_0) fcm:fs true.
                            }) e:derive true.
                        }) e:derive true.
                        ("if_then_else" {
                            (var:x_1) fcm:fs true.
                        } true {
                            ("assertz" {
                                (var:x_1) fcm:fs true.
                            }) e:derive true.
                        }) e:derive true.
                    }) e:derive true.
                    ("between" 1 20 var:x_4) e:derive true.
                    (var:x_0) fcm:fm true.
                    (var:x_1) fcm:fs true.
                    ("findall" var:x_5 {
                        (var:x_6 var:x_1) fl:sigma var:x_7.
                        var:x_0 fcm:pi (var:x_6 var:x_8).
                        ("(2*_M-1)*(2*_W-1)" var:x_8 var:x_7) e:calculate var:x_5.
                    } var:x_9) e:derive true.
                    ("if_then_else" {
                        var:x_9 log:equalTo ().
                    } true {
                        var:x_9 math:sum var:x_10.
                        ("1/(1+exp(-_S))" var:x_10) e:calculate var:x_2.
                        ("retractall" {
                            var:x_0 fcm:pi (var:x_1 var:x_11).
                        }) e:derive true.
                        ("assertz" {
                            var:x_0 fcm:pi (var:x_1 var:x_2).
                        }) e:derive true.
                    }) e:derive true.
                    ("fail") e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            :Ann fcm:pi (:ChildAge 0.4167000000000005).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {
                    (:Ann :ChildAge) fl:pi var:x_12.
                }.
            } {
                0.4167000000000005 log:equalTo var:x_12.
            } {
                0.4167000000000005 log:equalTo 0.4167000000000005.
            }) e:derive true.
        } => {
            ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:call {
                ("if_then_else" {
                    ("nb_getval" "fnet" "done") e:derive true.
                } true {
                    (";" {
                        ("forall" {
                            (var:x_0 var:x_1) fl:mu var:x_2.
                        } {
                            ("if_then_else" {
                                (var:x_0) fcm:fm true.
                            } true {
                                ("assertz" {
                                    (var:x_0) fcm:fm true.
                                }) e:derive true.
                            }) e:derive true.
                            ("assertz" {
                                var:x_0 fcm:pi (var:x_1 var:x_2).
                            }) e:derive true.
                        }) e:derive true.
                        ("forall" {
                            (var:x_0 var:x_1) fl:sigma var:x_3.
                        } {
                            ("if_then_else" {
                                (var:x_0) fcm:fs true.
                            } true {
                                ("assertz" {
                                    (var:x_0) fcm:fs true.
                                }) e:derive true.
                            }) e:derive true.
                            ("if_then_else" {
                                (var:x_1) fcm:fs true.
                            } true {
                                ("assertz" {
                                    (var:x_1) fcm:fs true.
                                }) e:derive true.
                            }) e:derive true.
                        }) e:derive true.
                        ("between" 1 20 var:x_4) e:derive true.
                        (var:x_0) fcm:fm true.
                        (var:x_1) fcm:fs true.
                        ("findall" var:x_5 {
                            (var:x_6 var:x_1) fl:sigma var:x_7.
                            var:x_0 fcm:pi (var:x_6 var:x_8).
                            ("(2*_M-1)*(2*_W-1)" var:x_8 var:x_7) e:calculate var:x_5.
                        } var:x_9) e:derive true.
                        ("if_then_else" {
                            var:x_9 log:equalTo ().
                        } true {
                            var:x_9 math:sum var:x_10.
                            ("1/(1+exp(-_S))" var:x_10) e:calculate var:x_2.
                            ("retractall" {
                                var:x_0 fcm:pi (var:x_1 var:x_11).
                            }) e:derive true.
                            ("assertz" {
                                var:x_0 fcm:pi (var:x_1 var:x_2).
                            }) e:derive true.
                        }) e:derive true.
                        ("fail") e:derive true.
                    } {
                        ("nb_setval" "fnet" "done") e:derive true.
                    }) e:derive true.
                }) e:derive true.
                :Ann fcm:pi (:ChildAge 0.4167000000000005).
                ("if_then_else" {
                    ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {
                        (:Ann :ChildAge) fl:pi var:x_12.
                    }.
                } {
                    0.4167000000000005 log:equalTo var:x_12.
                } {
                    0.4167000000000005 log:equalTo 0.4167000000000005.
                }) e:derive true.
            }.
        }.
    }].

skolem:lemma19 a r:Extraction;
    r:gives {
        @forAll var:x_0, var:x_1, var:x_2, var:x_3, var:x_4, var:x_5, var:x_6, var:x_7, var:x_8, var:x_9, var:x_10, var:x_11, var:x_12, var:x_13, var:x_14, var:x_15, var:x_16, var:x_17. {
            (var:x_13 var:x_14) fl:pi var:x_17.
        } <= {
            var:x_0 e:call {
                ("if_then_else" {
                    ("nb_getval" "fnet" "done") e:derive true.
                } true {
                    (";" {
                        ("forall" {
                            (var:x_1 var:x_2) fl:mu var:x_3.
                        } {
                            ("if_then_else" {
                                (var:x_1) fcm:fm true.
                            } true {
                                ("assertz" {
                                    (var:x_1) fcm:fm true.
                                }) e:derive true.
                            }) e:derive true.
                            ("assertz" {
                                var:x_1 fcm:pi (var:x_2 var:x_3).
                            }) e:derive true.
                        }) e:derive true.
                        ("forall" {
                            (var:x_1 var:x_2) fl:sigma var:x_4.
                        } {
                            ("if_then_else" {
                                (var:x_1) fcm:fs true.
                            } true {
                                ("assertz" {
                                    (var:x_1) fcm:fs true.
                                }) e:derive true.
                            }) e:derive true.
                            ("if_then_else" {
                                (var:x_2) fcm:fs true.
                            } true {
                                ("assertz" {
                                    (var:x_2) fcm:fs true.
                                }) e:derive true.
                            }) e:derive true.
                        }) e:derive true.
                        ("between" 1 20 var:x_5) e:derive true.
                        (var:x_1) fcm:fm true.
                        (var:x_2) fcm:fs true.
                        ("findall" var:x_6 {
                            (var:x_7 var:x_2) fl:sigma var:x_8.
                            var:x_1 fcm:pi (var:x_7 var:x_9).
                            ("(2*_M-1)*(2*_W-1)" var:x_9 var:x_8) e:calculate var:x_6.
                        } var:x_10) e:derive true.
                        ("if_then_else" {
                            var:x_10 log:equalTo ().
                        } true {
                            var:x_10 math:sum var:x_11.
                            ("1/(1+exp(-_S))" var:x_11) e:calculate var:x_3.
                            ("retractall" {
                                var:x_1 fcm:pi (var:x_2 var:x_12).
                            }) e:derive true.
                            ("assertz" {
                                var:x_1 fcm:pi (var:x_2 var:x_3).
                            }) e:derive true.
                        }) e:derive true.
                        ("fail") e:derive true.
                    } {
                        ("nb_setval" "fnet" "done") e:derive true.
                    }) e:derive true.
                }) e:derive true.
                var:x_13 fcm:pi (var:x_14 var:x_15).
                ("if_then_else" {
                    var:x_0 e:closure {
                        (var:x_13 var:x_14) fl:pi var:x_16.
                    }.
                } {
                    var:x_17 log:equalTo var:x_16.
                } {
                    var:x_17 log:equalTo var:x_15.
                }) e:derive true.
            }.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3>].

skolem:lemma20 a r:Inference;
    r:gives {
        ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:call {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    ("forall" {
                        (_:sk_0 _:sk_1) fl:mu _:sk_2.
                    } {
                        ("if_then_else" {
                            (_:sk_0) fcm:fm true.
                        } true {
                            ("assertz" {
                                (_:sk_0) fcm:fm true.
                            }) e:derive true.
                        }) e:derive true.
                        ("assertz" {
                            _:sk_0 fcm:pi (_:sk_1 _:sk_2).
                        }) e:derive true.
                    }) e:derive true.
                    ("forall" {
                        (_:sk_0 _:sk_1) fl:sigma _:sk_3.
                    } {
                        ("if_then_else" {
                            (_:sk_0) fcm:fs true.
                        } true {
                            ("assertz" {
                                (_:sk_0) fcm:fs true.
                            }) e:derive true.
                        }) e:derive true.
                        ("if_then_else" {
                            (_:sk_1) fcm:fs true.
                        } true {
                            ("assertz" {
                                (_:sk_1) fcm:fs true.
                            }) e:derive true.
                        }) e:derive true.
                    }) e:derive true.
                    ("between" 1 20 _:sk_4) e:derive true.
                    (_:sk_0) fcm:fm true.
                    (_:sk_1) fcm:fs true.
                    ("findall" _:sk_5 {
                        (_:sk_6 _:sk_1) fl:sigma _:sk_7.
                        _:sk_0 fcm:pi (_:sk_6 _:sk_8).
                        ("(2*_M-1)*(2*_W-1)" _:sk_8 _:sk_7) e:calculate _:sk_5.
                    } _:sk_9) e:derive true.
                    ("if_then_else" {
                        _:sk_9 log:equalTo ().
                    } true {
                        _:sk_9 math:sum _:sk_10.
                        ("1/(1+exp(-_S))" _:sk_10) e:calculate _:sk_2.
                        ("retractall" {
                            _:sk_0 fcm:pi (_:sk_1 _:sk_11).
                        }) e:derive true.
                        ("assertz" {
                            _:sk_0 fcm:pi (_:sk_1 _:sk_2).
                        }) e:derive true.
                    }) e:derive true.
                    ("fail") e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            :Ann fcm:pi (:AdultAge 0.5832999999999995).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {
                    (:Ann :AdultAge) fl:pi _:sk_12.
                }.
            } {
                0.5832999999999995 log:equalTo _:sk_12.
            } {
                0.5832999999999995 log:equalTo 0.5832999999999995.
            }) e:derive true.
        }.
    };
    r:evidence (
        [ a r:Fact; r:gives {("if_then_else" {
            ("nb_getval" "fnet" "done") e:derive true.
        } true {
            (";" {
                ("forall" {
                    (_:sk_0 _:sk_1) fl:mu _:sk_2.
                } {
                    ("if_then_else" {
                        (_:sk_0) fcm:fm true.
                    } true {
                        ("assertz" {
                            (_:sk_0) fcm:fm true.
                        }) e:derive true.
                    }) e:derive true.
                    ("assertz" {
                        _:sk_0 fcm:pi (_:sk_1 _:sk_2).
                    }) e:derive true.
                }) e:derive true.
                ("forall" {
                    (_:sk_0 _:sk_1) fl:sigma _:sk_3.
                } {
                    ("if_then_else" {
                        (_:sk_0) fcm:fs true.
                    } true {
                        ("assertz" {
                            (_:sk_0) fcm:fs true.
                        }) e:derive true.
                    }) e:derive true.
                    ("if_then_else" {
                        (_:sk_1) fcm:fs true.
                    } true {
                        ("assertz" {
                            (_:sk_1) fcm:fs true.
                        }) e:derive true.
                    }) e:derive true.
                }) e:derive true.
                ("between" 1 20 _:sk_4) e:derive true.
                (_:sk_0) fcm:fm true.
                (_:sk_1) fcm:fs true.
                ("findall" _:sk_5 {
                    (_:sk_6 _:sk_1) fl:sigma _:sk_7.
                    _:sk_0 fcm:pi (_:sk_6 _:sk_8).
                    ("(2*_M-1)*(2*_W-1)" _:sk_8 _:sk_7) e:calculate _:sk_5.
                } _:sk_9) e:derive true.
                ("if_then_else" {
                    _:sk_9 log:equalTo ().
                } true {
                    _:sk_9 math:sum _:sk_10.
                    ("1/(1+exp(-_S))" _:sk_10) e:calculate _:sk_2.
                    ("retractall" {
                        _:sk_0 fcm:pi (_:sk_1 _:sk_11).
                    }) e:derive true.
                    ("assertz" {
                        _:sk_0 fcm:pi (_:sk_1 _:sk_2).
                    }) e:derive true.
                }) e:derive true.
                ("fail") e:derive true.
            } {
                ("nb_setval" "fnet" "done") e:derive true.
            }) e:derive true.
        }) e:derive true}]
        [ a r:Fact; r:gives {:Ann fcm:pi (:AdultAge 0.5832999999999995)}]
        [ a r:Fact; r:gives {("if_then_else" {
            ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {
                (:Ann :AdultAge) fl:pi _:sk_12.
            }.
        } {
            0.5832999999999995 log:equalTo _:sk_12.
        } {
            0.5832999999999995 log:equalTo 0.5832999999999995.
        }) e:derive true}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_3"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_3"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_4"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_4"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_5"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_5"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_7"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_7"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_6"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_6"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_8"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_8"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_9"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_9"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_10"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_10"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_11"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_11"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_12"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_12"]];
    r:rule [ a r:DerivedRule; r:gives {
        {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    ("forall" {
                        (var:x_0 var:x_1) fl:mu var:x_2.
                    } {
                        ("if_then_else" {
                            (var:x_0) fcm:fm true.
                        } true {
                            ("assertz" {
                                (var:x_0) fcm:fm true.
                            }) e:derive true.
                        }) e:derive true.
                        ("assertz" {
                            var:x_0 fcm:pi (var:x_1 var:x_2).
                        }) e:derive true.
                    }) e:derive true.
                    ("forall" {
                        (var:x_0 var:x_1) fl:sigma var:x_3.
                    } {
                        ("if_then_else" {
                            (var:x_0) fcm:fs true.
                        } true {
                            ("assertz" {
                                (var:x_0) fcm:fs true.
                            }) e:derive true.
                        }) e:derive true.
                        ("if_then_else" {
                            (var:x_1) fcm:fs true.
                        } true {
                            ("assertz" {
                                (var:x_1) fcm:fs true.
                            }) e:derive true.
                        }) e:derive true.
                    }) e:derive true.
                    ("between" 1 20 var:x_4) e:derive true.
                    (var:x_0) fcm:fm true.
                    (var:x_1) fcm:fs true.
                    ("findall" var:x_5 {
                        (var:x_6 var:x_1) fl:sigma var:x_7.
                        var:x_0 fcm:pi (var:x_6 var:x_8).
                        ("(2*_M-1)*(2*_W-1)" var:x_8 var:x_7) e:calculate var:x_5.
                    } var:x_9) e:derive true.
                    ("if_then_else" {
                        var:x_9 log:equalTo ().
                    } true {
                        var:x_9 math:sum var:x_10.
                        ("1/(1+exp(-_S))" var:x_10) e:calculate var:x_2.
                        ("retractall" {
                            var:x_0 fcm:pi (var:x_1 var:x_11).
                        }) e:derive true.
                        ("assertz" {
                            var:x_0 fcm:pi (var:x_1 var:x_2).
                        }) e:derive true.
                    }) e:derive true.
                    ("fail") e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            :Ann fcm:pi (:AdultAge 0.5832999999999995).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {
                    (:Ann :AdultAge) fl:pi var:x_12.
                }.
            } {
                0.5832999999999995 log:equalTo var:x_12.
            } {
                0.5832999999999995 log:equalTo 0.5832999999999995.
            }) e:derive true.
        } => {
            ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:call {
                ("if_then_else" {
                    ("nb_getval" "fnet" "done") e:derive true.
                } true {
                    (";" {
                        ("forall" {
                            (var:x_0 var:x_1) fl:mu var:x_2.
                        } {
                            ("if_then_else" {
                                (var:x_0) fcm:fm true.
                            } true {
                                ("assertz" {
                                    (var:x_0) fcm:fm true.
                                }) e:derive true.
                            }) e:derive true.
                            ("assertz" {
                                var:x_0 fcm:pi (var:x_1 var:x_2).
                            }) e:derive true.
                        }) e:derive true.
                        ("forall" {
                            (var:x_0 var:x_1) fl:sigma var:x_3.
                        } {
                            ("if_then_else" {
                                (var:x_0) fcm:fs true.
                            } true {
                                ("assertz" {
                                    (var:x_0) fcm:fs true.
                                }) e:derive true.
                            }) e:derive true.
                            ("if_then_else" {
                                (var:x_1) fcm:fs true.
                            } true {
                                ("assertz" {
                                    (var:x_1) fcm:fs true.
                                }) e:derive true.
                            }) e:derive true.
                        }) e:derive true.
                        ("between" 1 20 var:x_4) e:derive true.
                        (var:x_0) fcm:fm true.
                        (var:x_1) fcm:fs true.
                        ("findall" var:x_5 {
                            (var:x_6 var:x_1) fl:sigma var:x_7.
                            var:x_0 fcm:pi (var:x_6 var:x_8).
                            ("(2*_M-1)*(2*_W-1)" var:x_8 var:x_7) e:calculate var:x_5.
                        } var:x_9) e:derive true.
                        ("if_then_else" {
                            var:x_9 log:equalTo ().
                        } true {
                            var:x_9 math:sum var:x_10.
                            ("1/(1+exp(-_S))" var:x_10) e:calculate var:x_2.
                            ("retractall" {
                                var:x_0 fcm:pi (var:x_1 var:x_11).
                            }) e:derive true.
                            ("assertz" {
                                var:x_0 fcm:pi (var:x_1 var:x_2).
                            }) e:derive true.
                        }) e:derive true.
                        ("fail") e:derive true.
                    } {
                        ("nb_setval" "fnet" "done") e:derive true.
                    }) e:derive true.
                }) e:derive true.
                :Ann fcm:pi (:AdultAge 0.5832999999999995).
                ("if_then_else" {
                    ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {
                        (:Ann :AdultAge) fl:pi var:x_12.
                    }.
                } {
                    0.5832999999999995 log:equalTo var:x_12.
                } {
                    0.5832999999999995 log:equalTo 0.5832999999999995.
                }) e:derive true.
            }.
        }.
    }].

skolem:lemma21 a r:Inference;
    r:gives {
        ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:call {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    ("forall" {
                        (_:sk_0 _:sk_1) fl:mu _:sk_2.
                    } {
                        ("if_then_else" {
                            (_:sk_0) fcm:fm true.
                        } true {
                            ("assertz" {
                                (_:sk_0) fcm:fm true.
                            }) e:derive true.
                        }) e:derive true.
                        ("assertz" {
                            _:sk_0 fcm:pi (_:sk_1 _:sk_2).
                        }) e:derive true.
                    }) e:derive true.
                    ("forall" {
                        (_:sk_0 _:sk_1) fl:sigma _:sk_3.
                    } {
                        ("if_then_else" {
                            (_:sk_0) fcm:fs true.
                        } true {
                            ("assertz" {
                                (_:sk_0) fcm:fs true.
                            }) e:derive true.
                        }) e:derive true.
                        ("if_then_else" {
                            (_:sk_1) fcm:fs true.
                        } true {
                            ("assertz" {
                                (_:sk_1) fcm:fs true.
                            }) e:derive true.
                        }) e:derive true.
                    }) e:derive true.
                    ("between" 1 20 _:sk_4) e:derive true.
                    (_:sk_0) fcm:fm true.
                    (_:sk_1) fcm:fs true.
                    ("findall" _:sk_5 {
                        (_:sk_6 _:sk_1) fl:sigma _:sk_7.
                        _:sk_0 fcm:pi (_:sk_6 _:sk_8).
                        ("(2*_M-1)*(2*_W-1)" _:sk_8 _:sk_7) e:calculate _:sk_5.
                    } _:sk_9) e:derive true.
                    ("if_then_else" {
                        _:sk_9 log:equalTo ().
                    } true {
                        _:sk_9 math:sum _:sk_10.
                        ("1/(1+exp(-_S))" _:sk_10) e:calculate _:sk_2.
                        ("retractall" {
                            _:sk_0 fcm:pi (_:sk_1 _:sk_11).
                        }) e:derive true.
                        ("assertz" {
                            _:sk_0 fcm:pi (_:sk_1 _:sk_2).
                        }) e:derive true.
                    }) e:derive true.
                    ("fail") e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            :Ann fcm:pi (owl:Thing 1.0).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {
                    (:Ann owl:Thing) fl:pi _:sk_12.
                }.
            } {
                1.0 log:equalTo _:sk_12.
            } {
                1.0 log:equalTo 1.0.
            }) e:derive true.
        }.
    };
    r:evidence (
        [ a r:Fact; r:gives {("if_then_else" {
            ("nb_getval" "fnet" "done") e:derive true.
        } true {
            (";" {
                ("forall" {
                    (_:sk_0 _:sk_1) fl:mu _:sk_2.
                } {
                    ("if_then_else" {
                        (_:sk_0) fcm:fm true.
                    } true {
                        ("assertz" {
                            (_:sk_0) fcm:fm true.
                        }) e:derive true.
                    }) e:derive true.
                    ("assertz" {
                        _:sk_0 fcm:pi (_:sk_1 _:sk_2).
                    }) e:derive true.
                }) e:derive true.
                ("forall" {
                    (_:sk_0 _:sk_1) fl:sigma _:sk_3.
                } {
                    ("if_then_else" {
                        (_:sk_0) fcm:fs true.
                    } true {
                        ("assertz" {
                            (_:sk_0) fcm:fs true.
                        }) e:derive true.
                    }) e:derive true.
                    ("if_then_else" {
                        (_:sk_1) fcm:fs true.
                    } true {
                        ("assertz" {
                            (_:sk_1) fcm:fs true.
                        }) e:derive true.
                    }) e:derive true.
                }) e:derive true.
                ("between" 1 20 _:sk_4) e:derive true.
                (_:sk_0) fcm:fm true.
                (_:sk_1) fcm:fs true.
                ("findall" _:sk_5 {
                    (_:sk_6 _:sk_1) fl:sigma _:sk_7.
                    _:sk_0 fcm:pi (_:sk_6 _:sk_8).
                    ("(2*_M-1)*(2*_W-1)" _:sk_8 _:sk_7) e:calculate _:sk_5.
                } _:sk_9) e:derive true.
                ("if_then_else" {
                    _:sk_9 log:equalTo ().
                } true {
                    _:sk_9 math:sum _:sk_10.
                    ("1/(1+exp(-_S))" _:sk_10) e:calculate _:sk_2.
                    ("retractall" {
                        _:sk_0 fcm:pi (_:sk_1 _:sk_11).
                    }) e:derive true.
                    ("assertz" {
                        _:sk_0 fcm:pi (_:sk_1 _:sk_2).
                    }) e:derive true.
                }) e:derive true.
                ("fail") e:derive true.
            } {
                ("nb_setval" "fnet" "done") e:derive true.
            }) e:derive true.
        }) e:derive true}]
        [ a r:Fact; r:gives {:Ann fcm:pi (owl:Thing 1.0)}]
        [ a r:Fact; r:gives {("if_then_else" {
            ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {
                (:Ann owl:Thing) fl:pi _:sk_12.
            }.
        } {
            1.0 log:equalTo _:sk_12.
        } {
            1.0 log:equalTo 1.0.
        }) e:derive true}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_3"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_3"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_4"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_4"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_5"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_5"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_7"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_7"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_6"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_6"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_8"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_8"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_9"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_9"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_10"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_10"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_11"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_11"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_12"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_12"]];
    r:rule [ a r:DerivedRule; r:gives {
        {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    ("forall" {
                        (var:x_0 var:x_1) fl:mu var:x_2.
                    } {
                        ("if_then_else" {
                            (var:x_0) fcm:fm true.
                        } true {
                            ("assertz" {
                                (var:x_0) fcm:fm true.
                            }) e:derive true.
                        }) e:derive true.
                        ("assertz" {
                            var:x_0 fcm:pi (var:x_1 var:x_2).
                        }) e:derive true.
                    }) e:derive true.
                    ("forall" {
                        (var:x_0 var:x_1) fl:sigma var:x_3.
                    } {
                        ("if_then_else" {
                            (var:x_0) fcm:fs true.
                        } true {
                            ("assertz" {
                                (var:x_0) fcm:fs true.
                            }) e:derive true.
                        }) e:derive true.
                        ("if_then_else" {
                            (var:x_1) fcm:fs true.
                        } true {
                            ("assertz" {
                                (var:x_1) fcm:fs true.
                            }) e:derive true.
                        }) e:derive true.
                    }) e:derive true.
                    ("between" 1 20 var:x_4) e:derive true.
                    (var:x_0) fcm:fm true.
                    (var:x_1) fcm:fs true.
                    ("findall" var:x_5 {
                        (var:x_6 var:x_1) fl:sigma var:x_7.
                        var:x_0 fcm:pi (var:x_6 var:x_8).
                        ("(2*_M-1)*(2*_W-1)" var:x_8 var:x_7) e:calculate var:x_5.
                    } var:x_9) e:derive true.
                    ("if_then_else" {
                        var:x_9 log:equalTo ().
                    } true {
                        var:x_9 math:sum var:x_10.
                        ("1/(1+exp(-_S))" var:x_10) e:calculate var:x_2.
                        ("retractall" {
                            var:x_0 fcm:pi (var:x_1 var:x_11).
                        }) e:derive true.
                        ("assertz" {
                            var:x_0 fcm:pi (var:x_1 var:x_2).
                        }) e:derive true.
                    }) e:derive true.
                    ("fail") e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            :Ann fcm:pi (owl:Thing 1.0).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {
                    (:Ann owl:Thing) fl:pi var:x_12.
                }.
            } {
                1.0 log:equalTo var:x_12.
            } {
                1.0 log:equalTo 1.0.
            }) e:derive true.
        } => {
            ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:call {
                ("if_then_else" {
                    ("nb_getval" "fnet" "done") e:derive true.
                } true {
                    (";" {
                        ("forall" {
                            (var:x_0 var:x_1) fl:mu var:x_2.
                        } {
                            ("if_then_else" {
                                (var:x_0) fcm:fm true.
                            } true {
                                ("assertz" {
                                    (var:x_0) fcm:fm true.
                                }) e:derive true.
                            }) e:derive true.
                            ("assertz" {
                                var:x_0 fcm:pi (var:x_1 var:x_2).
                            }) e:derive true.
                        }) e:derive true.
                        ("forall" {
                            (var:x_0 var:x_1) fl:sigma var:x_3.
                        } {
                            ("if_then_else" {
                                (var:x_0) fcm:fs true.
                            } true {
                                ("assertz" {
                                    (var:x_0) fcm:fs true.
                                }) e:derive true.
                            }) e:derive true.
                            ("if_then_else" {
                                (var:x_1) fcm:fs true.
                            } true {
                                ("assertz" {
                                    (var:x_1) fcm:fs true.
                                }) e:derive true.
                            }) e:derive true.
                        }) e:derive true.
                        ("between" 1 20 var:x_4) e:derive true.
                        (var:x_0) fcm:fm true.
                        (var:x_1) fcm:fs true.
                        ("findall" var:x_5 {
                            (var:x_6 var:x_1) fl:sigma var:x_7.
                            var:x_0 fcm:pi (var:x_6 var:x_8).
                            ("(2*_M-1)*(2*_W-1)" var:x_8 var:x_7) e:calculate var:x_5.
                        } var:x_9) e:derive true.
                        ("if_then_else" {
                            var:x_9 log:equalTo ().
                        } true {
                            var:x_9 math:sum var:x_10.
                            ("1/(1+exp(-_S))" var:x_10) e:calculate var:x_2.
                            ("retractall" {
                                var:x_0 fcm:pi (var:x_1 var:x_11).
                            }) e:derive true.
                            ("assertz" {
                                var:x_0 fcm:pi (var:x_1 var:x_2).
                            }) e:derive true.
                        }) e:derive true.
                        ("fail") e:derive true.
                    } {
                        ("nb_setval" "fnet" "done") e:derive true.
                    }) e:derive true.
                }) e:derive true.
                :Ann fcm:pi (owl:Thing 1.0).
                ("if_then_else" {
                    ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {
                        (:Ann owl:Thing) fl:pi var:x_12.
                    }.
                } {
                    1.0 log:equalTo var:x_12.
                } {
                    1.0 log:equalTo 1.0.
                }) e:derive true.
            }.
        }.
    }].

skolem:lemma22 a r:Inference;
    r:gives {
        ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:call {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    ("forall" {
                        (_:sk_0 _:sk_1) fl:mu _:sk_2.
                    } {
                        ("if_then_else" {
                            (_:sk_0) fcm:fm true.
                        } true {
                            ("assertz" {
                                (_:sk_0) fcm:fm true.
                            }) e:derive true.
                        }) e:derive true.
                        ("assertz" {
                            _:sk_0 fcm:pi (_:sk_1 _:sk_2).
                        }) e:derive true.
                    }) e:derive true.
                    ("forall" {
                        (_:sk_0 _:sk_1) fl:sigma _:sk_3.
                    } {
                        ("if_then_else" {
                            (_:sk_0) fcm:fs true.
                        } true {
                            ("assertz" {
                                (_:sk_0) fcm:fs true.
                            }) e:derive true.
                        }) e:derive true.
                        ("if_then_else" {
                            (_:sk_1) fcm:fs true.
                        } true {
                            ("assertz" {
                                (_:sk_1) fcm:fs true.
                            }) e:derive true.
                        }) e:derive true.
                    }) e:derive true.
                    ("between" 1 20 _:sk_4) e:derive true.
                    (_:sk_0) fcm:fm true.
                    (_:sk_1) fcm:fs true.
                    ("findall" _:sk_5 {
                        (_:sk_6 _:sk_1) fl:sigma _:sk_7.
                        _:sk_0 fcm:pi (_:sk_6 _:sk_8).
                        ("(2*_M-1)*(2*_W-1)" _:sk_8 _:sk_7) e:calculate _:sk_5.
                    } _:sk_9) e:derive true.
                    ("if_then_else" {
                        _:sk_9 log:equalTo ().
                    } true {
                        _:sk_9 math:sum _:sk_10.
                        ("1/(1+exp(-_S))" _:sk_10) e:calculate _:sk_2.
                        ("retractall" {
                            _:sk_0 fcm:pi (_:sk_1 _:sk_11).
                        }) e:derive true.
                        ("assertz" {
                            _:sk_0 fcm:pi (_:sk_1 _:sk_2).
                        }) e:derive true.
                    }) e:derive true.
                    ("fail") e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            :Ann fcm:pi (owl:Nothing 0.0).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {
                    (:Ann owl:Nothing) fl:pi _:sk_12.
                }.
            } {
                0.0 log:equalTo _:sk_12.
            } {
                0.0 log:equalTo 0.0.
            }) e:derive true.
        }.
    };
    r:evidence (
        [ a r:Fact; r:gives {("if_then_else" {
            ("nb_getval" "fnet" "done") e:derive true.
        } true {
            (";" {
                ("forall" {
                    (_:sk_0 _:sk_1) fl:mu _:sk_2.
                } {
                    ("if_then_else" {
                        (_:sk_0) fcm:fm true.
                    } true {
                        ("assertz" {
                            (_:sk_0) fcm:fm true.
                        }) e:derive true.
                    }) e:derive true.
                    ("assertz" {
                        _:sk_0 fcm:pi (_:sk_1 _:sk_2).
                    }) e:derive true.
                }) e:derive true.
                ("forall" {
                    (_:sk_0 _:sk_1) fl:sigma _:sk_3.
                } {
                    ("if_then_else" {
                        (_:sk_0) fcm:fs true.
                    } true {
                        ("assertz" {
                            (_:sk_0) fcm:fs true.
                        }) e:derive true.
                    }) e:derive true.
                    ("if_then_else" {
                        (_:sk_1) fcm:fs true.
                    } true {
                        ("assertz" {
                            (_:sk_1) fcm:fs true.
                        }) e:derive true.
                    }) e:derive true.
                }) e:derive true.
                ("between" 1 20 _:sk_4) e:derive true.
                (_:sk_0) fcm:fm true.
                (_:sk_1) fcm:fs true.
                ("findall" _:sk_5 {
                    (_:sk_6 _:sk_1) fl:sigma _:sk_7.
                    _:sk_0 fcm:pi (_:sk_6 _:sk_8).
                    ("(2*_M-1)*(2*_W-1)" _:sk_8 _:sk_7) e:calculate _:sk_5.
                } _:sk_9) e:derive true.
                ("if_then_else" {
                    _:sk_9 log:equalTo ().
                } true {
                    _:sk_9 math:sum _:sk_10.
                    ("1/(1+exp(-_S))" _:sk_10) e:calculate _:sk_2.
                    ("retractall" {
                        _:sk_0 fcm:pi (_:sk_1 _:sk_11).
                    }) e:derive true.
                    ("assertz" {
                        _:sk_0 fcm:pi (_:sk_1 _:sk_2).
                    }) e:derive true.
                }) e:derive true.
                ("fail") e:derive true.
            } {
                ("nb_setval" "fnet" "done") e:derive true.
            }) e:derive true.
        }) e:derive true}]
        [ a r:Fact; r:gives {:Ann fcm:pi (owl:Nothing 0.0)}]
        [ a r:Fact; r:gives {("if_then_else" {
            ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {
                (:Ann owl:Nothing) fl:pi _:sk_12.
            }.
        } {
            0.0 log:equalTo _:sk_12.
        } {
            0.0 log:equalTo 0.0.
        }) e:derive true}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_3"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_3"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_4"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_4"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_5"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_5"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_7"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_7"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_6"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_6"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_8"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_8"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_9"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_9"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_10"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_10"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_11"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_11"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_12"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_12"]];
    r:rule [ a r:DerivedRule; r:gives {
        {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    ("forall" {
                        (var:x_0 var:x_1) fl:mu var:x_2.
                    } {
                        ("if_then_else" {
                            (var:x_0) fcm:fm true.
                        } true {
                            ("assertz" {
                                (var:x_0) fcm:fm true.
                            }) e:derive true.
                        }) e:derive true.
                        ("assertz" {
                            var:x_0 fcm:pi (var:x_1 var:x_2).
                        }) e:derive true.
                    }) e:derive true.
                    ("forall" {
                        (var:x_0 var:x_1) fl:sigma var:x_3.
                    } {
                        ("if_then_else" {
                            (var:x_0) fcm:fs true.
                        } true {
                            ("assertz" {
                                (var:x_0) fcm:fs true.
                            }) e:derive true.
                        }) e:derive true.
                        ("if_then_else" {
                            (var:x_1) fcm:fs true.
                        } true {
                            ("assertz" {
                                (var:x_1) fcm:fs true.
                            }) e:derive true.
                        }) e:derive true.
                    }) e:derive true.
                    ("between" 1 20 var:x_4) e:derive true.
                    (var:x_0) fcm:fm true.
                    (var:x_1) fcm:fs true.
                    ("findall" var:x_5 {
                        (var:x_6 var:x_1) fl:sigma var:x_7.
                        var:x_0 fcm:pi (var:x_6 var:x_8).
                        ("(2*_M-1)*(2*_W-1)" var:x_8 var:x_7) e:calculate var:x_5.
                    } var:x_9) e:derive true.
                    ("if_then_else" {
                        var:x_9 log:equalTo ().
                    } true {
                        var:x_9 math:sum var:x_10.
                        ("1/(1+exp(-_S))" var:x_10) e:calculate var:x_2.
                        ("retractall" {
                            var:x_0 fcm:pi (var:x_1 var:x_11).
                        }) e:derive true.
                        ("assertz" {
                            var:x_0 fcm:pi (var:x_1 var:x_2).
                        }) e:derive true.
                    }) e:derive true.
                    ("fail") e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            :Ann fcm:pi (owl:Nothing 0.0).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {
                    (:Ann owl:Nothing) fl:pi var:x_12.
                }.
            } {
                0.0 log:equalTo var:x_12.
            } {
                0.0 log:equalTo 0.0.
            }) e:derive true.
        } => {
            ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:call {
                ("if_then_else" {
                    ("nb_getval" "fnet" "done") e:derive true.
                } true {
                    (";" {
                        ("forall" {
                            (var:x_0 var:x_1) fl:mu var:x_2.
                        } {
                            ("if_then_else" {
                                (var:x_0) fcm:fm true.
                            } true {
                                ("assertz" {
                                    (var:x_0) fcm:fm true.
                                }) e:derive true.
                            }) e:derive true.
                            ("assertz" {
                                var:x_0 fcm:pi (var:x_1 var:x_2).
                            }) e:derive true.
                        }) e:derive true.
                        ("forall" {
                            (var:x_0 var:x_1) fl:sigma var:x_3.
                        } {
                            ("if_then_else" {
                                (var:x_0) fcm:fs true.
                            } true {
                                ("assertz" {
                                    (var:x_0) fcm:fs true.
                                }) e:derive true.
                            }) e:derive true.
                            ("if_then_else" {
                                (var:x_1) fcm:fs true.
                            } true {
                                ("assertz" {
                                    (var:x_1) fcm:fs true.
                                }) e:derive true.
                            }) e:derive true.
                        }) e:derive true.
                        ("between" 1 20 var:x_4) e:derive true.
                        (var:x_0) fcm:fm true.
                        (var:x_1) fcm:fs true.
                        ("findall" var:x_5 {
                            (var:x_6 var:x_1) fl:sigma var:x_7.
                            var:x_0 fcm:pi (var:x_6 var:x_8).
                            ("(2*_M-1)*(2*_W-1)" var:x_8 var:x_7) e:calculate var:x_5.
                        } var:x_9) e:derive true.
                        ("if_then_else" {
                            var:x_9 log:equalTo ().
                        } true {
                            var:x_9 math:sum var:x_10.
                            ("1/(1+exp(-_S))" var:x_10) e:calculate var:x_2.
                            ("retractall" {
                                var:x_0 fcm:pi (var:x_1 var:x_11).
                            }) e:derive true.
                            ("assertz" {
                                var:x_0 fcm:pi (var:x_1 var:x_2).
                            }) e:derive true.
                        }) e:derive true.
                        ("fail") e:derive true.
                    } {
                        ("nb_setval" "fnet" "done") e:derive true.
                    }) e:derive true.
                }) e:derive true.
                :Ann fcm:pi (owl:Nothing 0.0).
                ("if_then_else" {
                    ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {
                        (:Ann owl:Nothing) fl:pi var:x_12.
                    }.
                } {
                    0.0 log:equalTo var:x_12.
                } {
                    0.0 log:equalTo 0.0.
                }) e:derive true.
            }.
        }.
    }].

skolem:lemma23 a r:Inference;
    r:gives {
        ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:call {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    ("forall" {
                        (_:sk_0 _:sk_1) fl:mu _:sk_2.
                    } {
                        ("if_then_else" {
                            (_:sk_0) fcm:fm true.
                        } true {
                            ("assertz" {
                                (_:sk_0) fcm:fm true.
                            }) e:derive true.
                        }) e:derive true.
                        ("assertz" {
                            _:sk_0 fcm:pi (_:sk_1 _:sk_2).
                        }) e:derive true.
                    }) e:derive true.
                    ("forall" {
                        (_:sk_0 _:sk_1) fl:sigma _:sk_3.
                    } {
                        ("if_then_else" {
                            (_:sk_0) fcm:fs true.
                        } true {
                            ("assertz" {
                                (_:sk_0) fcm:fs true.
                            }) e:derive true.
                        }) e:derive true.
                        ("if_then_else" {
                            (_:sk_1) fcm:fs true.
                        } true {
                            ("assertz" {
                                (_:sk_1) fcm:fs true.
                            }) e:derive true.
                        }) e:derive true.
                    }) e:derive true.
                    ("between" 1 20 _:sk_4) e:derive true.
                    (_:sk_0) fcm:fm true.
                    (_:sk_1) fcm:fs true.
                    ("findall" _:sk_5 {
                        (_:sk_6 _:sk_1) fl:sigma _:sk_7.
                        _:sk_0 fcm:pi (_:sk_6 _:sk_8).
                        ("(2*_M-1)*(2*_W-1)" _:sk_8 _:sk_7) e:calculate _:sk_5.
                    } _:sk_9) e:derive true.
                    ("if_then_else" {
                        _:sk_9 log:equalTo ().
                    } true {
                        _:sk_9 math:sum _:sk_10.
                        ("1/(1+exp(-_S))" _:sk_10) e:calculate _:sk_2.
                        ("retractall" {
                            _:sk_0 fcm:pi (_:sk_1 _:sk_11).
                        }) e:derive true.
                        ("assertz" {
                            _:sk_0 fcm:pi (_:sk_1 _:sk_2).
                        }) e:derive true.
                    }) e:derive true.
                    ("fail") e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            :Ann fcm:pi (:NormalIntraocularPressure 0.42055693693538665).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {
                    (:Ann :NormalIntraocularPressure) fl:pi _:sk_12.
                }.
            } {
                0.42055693693538665 log:equalTo _:sk_12.
            } {
                0.42055693693538665 log:equalTo 0.42055693693538665.
            }) e:derive true.
        }.
    };
    r:evidence (
        [ a r:Fact; r:gives {("if_then_else" {
            ("nb_getval" "fnet" "done") e:derive true.
        } true {
            (";" {
                ("forall" {
                    (_:sk_0 _:sk_1) fl:mu _:sk_2.
                } {
                    ("if_then_else" {
                        (_:sk_0) fcm:fm true.
                    } true {
                        ("assertz" {
                            (_:sk_0) fcm:fm true.
                        }) e:derive true.
                    }) e:derive true.
                    ("assertz" {
                        _:sk_0 fcm:pi (_:sk_1 _:sk_2).
                    }) e:derive true.
                }) e:derive true.
                ("forall" {
                    (_:sk_0 _:sk_1) fl:sigma _:sk_3.
                } {
                    ("if_then_else" {
                        (_:sk_0) fcm:fs true.
                    } true {
                        ("assertz" {
                            (_:sk_0) fcm:fs true.
                        }) e:derive true.
                    }) e:derive true.
                    ("if_then_else" {
                        (_:sk_1) fcm:fs true.
                    } true {
                        ("assertz" {
                            (_:sk_1) fcm:fs true.
                        }) e:derive true.
                    }) e:derive true.
                }) e:derive true.
                ("between" 1 20 _:sk_4) e:derive true.
                (_:sk_0) fcm:fm true.
                (_:sk_1) fcm:fs true.
                ("findall" _:sk_5 {
                    (_:sk_6 _:sk_1) fl:sigma _:sk_7.
                    _:sk_0 fcm:pi (_:sk_6 _:sk_8).
                    ("(2*_M-1)*(2*_W-1)" _:sk_8 _:sk_7) e:calculate _:sk_5.
                } _:sk_9) e:derive true.
                ("if_then_else" {
                    _:sk_9 log:equalTo ().
                } true {
                    _:sk_9 math:sum _:sk_10.
                    ("1/(1+exp(-_S))" _:sk_10) e:calculate _:sk_2.
                    ("retractall" {
                        _:sk_0 fcm:pi (_:sk_1 _:sk_11).
                    }) e:derive true.
                    ("assertz" {
                        _:sk_0 fcm:pi (_:sk_1 _:sk_2).
                    }) e:derive true.
                }) e:derive true.
                ("fail") e:derive true.
            } {
                ("nb_setval" "fnet" "done") e:derive true.
            }) e:derive true.
        }) e:derive true}]
        [ a r:Fact; r:gives {:Ann fcm:pi (:NormalIntraocularPressure 0.42055693693538665)}]
        [ a r:Fact; r:gives {("if_then_else" {
            ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {
                (:Ann :NormalIntraocularPressure) fl:pi _:sk_12.
            }.
        } {
            0.42055693693538665 log:equalTo _:sk_12.
        } {
            0.42055693693538665 log:equalTo 0.42055693693538665.
        }) e:derive true}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_3"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_3"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_4"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_4"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_5"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_5"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_7"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_7"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_6"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_6"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_8"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_8"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_9"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_9"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_10"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_10"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_11"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_11"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_12"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_12"]];
    r:rule [ a r:DerivedRule; r:gives {
        {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    ("forall" {
                        (var:x_0 var:x_1) fl:mu var:x_2.
                    } {
                        ("if_then_else" {
                            (var:x_0) fcm:fm true.
                        } true {
                            ("assertz" {
                                (var:x_0) fcm:fm true.
                            }) e:derive true.
                        }) e:derive true.
                        ("assertz" {
                            var:x_0 fcm:pi (var:x_1 var:x_2).
                        }) e:derive true.
                    }) e:derive true.
                    ("forall" {
                        (var:x_0 var:x_1) fl:sigma var:x_3.
                    } {
                        ("if_then_else" {
                            (var:x_0) fcm:fs true.
                        } true {
                            ("assertz" {
                                (var:x_0) fcm:fs true.
                            }) e:derive true.
                        }) e:derive true.
                        ("if_then_else" {
                            (var:x_1) fcm:fs true.
                        } true {
                            ("assertz" {
                                (var:x_1) fcm:fs true.
                            }) e:derive true.
                        }) e:derive true.
                    }) e:derive true.
                    ("between" 1 20 var:x_4) e:derive true.
                    (var:x_0) fcm:fm true.
                    (var:x_1) fcm:fs true.
                    ("findall" var:x_5 {
                        (var:x_6 var:x_1) fl:sigma var:x_7.
                        var:x_0 fcm:pi (var:x_6 var:x_8).
                        ("(2*_M-1)*(2*_W-1)" var:x_8 var:x_7) e:calculate var:x_5.
                    } var:x_9) e:derive true.
                    ("if_then_else" {
                        var:x_9 log:equalTo ().
                    } true {
                        var:x_9 math:sum var:x_10.
                        ("1/(1+exp(-_S))" var:x_10) e:calculate var:x_2.
                        ("retractall" {
                            var:x_0 fcm:pi (var:x_1 var:x_11).
                        }) e:derive true.
                        ("assertz" {
                            var:x_0 fcm:pi (var:x_1 var:x_2).
                        }) e:derive true.
                    }) e:derive true.
                    ("fail") e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            :Ann fcm:pi (:NormalIntraocularPressure 0.42055693693538665).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {
                    (:Ann :NormalIntraocularPressure) fl:pi var:x_12.
                }.
            } {
                0.42055693693538665 log:equalTo var:x_12.
            } {
                0.42055693693538665 log:equalTo 0.42055693693538665.
            }) e:derive true.
        } => {
            ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:call {
                ("if_then_else" {
                    ("nb_getval" "fnet" "done") e:derive true.
                } true {
                    (";" {
                        ("forall" {
                            (var:x_0 var:x_1) fl:mu var:x_2.
                        } {
                            ("if_then_else" {
                                (var:x_0) fcm:fm true.
                            } true {
                                ("assertz" {
                                    (var:x_0) fcm:fm true.
                                }) e:derive true.
                            }) e:derive true.
                            ("assertz" {
                                var:x_0 fcm:pi (var:x_1 var:x_2).
                            }) e:derive true.
                        }) e:derive true.
                        ("forall" {
                            (var:x_0 var:x_1) fl:sigma var:x_3.
                        } {
                            ("if_then_else" {
                                (var:x_0) fcm:fs true.
                            } true {
                                ("assertz" {
                                    (var:x_0) fcm:fs true.
                                }) e:derive true.
                            }) e:derive true.
                            ("if_then_else" {
                                (var:x_1) fcm:fs true.
                            } true {
                                ("assertz" {
                                    (var:x_1) fcm:fs true.
                                }) e:derive true.
                            }) e:derive true.
                        }) e:derive true.
                        ("between" 1 20 var:x_4) e:derive true.
                        (var:x_0) fcm:fm true.
                        (var:x_1) fcm:fs true.
                        ("findall" var:x_5 {
                            (var:x_6 var:x_1) fl:sigma var:x_7.
                            var:x_0 fcm:pi (var:x_6 var:x_8).
                            ("(2*_M-1)*(2*_W-1)" var:x_8 var:x_7) e:calculate var:x_5.
                        } var:x_9) e:derive true.
                        ("if_then_else" {
                            var:x_9 log:equalTo ().
                        } true {
                            var:x_9 math:sum var:x_10.
                            ("1/(1+exp(-_S))" var:x_10) e:calculate var:x_2.
                            ("retractall" {
                                var:x_0 fcm:pi (var:x_1 var:x_11).
                            }) e:derive true.
                            ("assertz" {
                                var:x_0 fcm:pi (var:x_1 var:x_2).
                            }) e:derive true.
                        }) e:derive true.
                        ("fail") e:derive true.
                    } {
                        ("nb_setval" "fnet" "done") e:derive true.
                    }) e:derive true.
                }) e:derive true.
                :Ann fcm:pi (:NormalIntraocularPressure 0.42055693693538665).
                ("if_then_else" {
                    ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {
                        (:Ann :NormalIntraocularPressure) fl:pi var:x_12.
                    }.
                } {
                    0.42055693693538665 log:equalTo var:x_12.
                } {
                    0.42055693693538665 log:equalTo 0.42055693693538665.
                }) e:derive true.
            }.
        }.
    }].

skolem:lemma24 a r:Inference;
    r:gives {
        ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:call {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    ("forall" {
                        (_:sk_0 _:sk_1) fl:mu _:sk_2.
                    } {
                        ("if_then_else" {
                            (_:sk_0) fcm:fm true.
                        } true {
                            ("assertz" {
                                (_:sk_0) fcm:fm true.
                            }) e:derive true.
                        }) e:derive true.
                        ("assertz" {
                            _:sk_0 fcm:pi (_:sk_1 _:sk_2).
                        }) e:derive true.
                    }) e:derive true.
                    ("forall" {
                        (_:sk_0 _:sk_1) fl:sigma _:sk_3.
                    } {
                        ("if_then_else" {
                            (_:sk_0) fcm:fs true.
                        } true {
                            ("assertz" {
                                (_:sk_0) fcm:fs true.
                            }) e:derive true.
                        }) e:derive true.
                        ("if_then_else" {
                            (_:sk_1) fcm:fs true.
                        } true {
                            ("assertz" {
                                (_:sk_1) fcm:fs true.
                            }) e:derive true.
                        }) e:derive true.
                    }) e:derive true.
                    ("between" 1 20 _:sk_4) e:derive true.
                    (_:sk_0) fcm:fm true.
                    (_:sk_1) fcm:fs true.
                    ("findall" _:sk_5 {
                        (_:sk_6 _:sk_1) fl:sigma _:sk_7.
                        _:sk_0 fcm:pi (_:sk_6 _:sk_8).
                        ("(2*_M-1)*(2*_W-1)" _:sk_8 _:sk_7) e:calculate _:sk_5.
                    } _:sk_9) e:derive true.
                    ("if_then_else" {
                        _:sk_9 log:equalTo ().
                    } true {
                        _:sk_9 math:sum _:sk_10.
                        ("1/(1+exp(-_S))" _:sk_10) e:calculate _:sk_2.
                        ("retractall" {
                            _:sk_0 fcm:pi (_:sk_1 _:sk_11).
                        }) e:derive true.
                        ("assertz" {
                            _:sk_0 fcm:pi (_:sk_1 _:sk_2).
                        }) e:derive true.
                    }) e:derive true.
                    ("fail") e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            :Ann fcm:pi (:IncreasedIntraocularPressure 0.5762688313443307).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {
                    (:Ann :IncreasedIntraocularPressure) fl:pi _:sk_12.
                }.
            } {
                0.5762688313443307 log:equalTo _:sk_12.
            } {
                0.5762688313443307 log:equalTo 0.5762688313443307.
            }) e:derive true.
        }.
    };
    r:evidence (
        [ a r:Fact; r:gives {("if_then_else" {
            ("nb_getval" "fnet" "done") e:derive true.
        } true {
            (";" {
                ("forall" {
                    (_:sk_0 _:sk_1) fl:mu _:sk_2.
                } {
                    ("if_then_else" {
                        (_:sk_0) fcm:fm true.
                    } true {
                        ("assertz" {
                            (_:sk_0) fcm:fm true.
                        }) e:derive true.
                    }) e:derive true.
                    ("assertz" {
                        _:sk_0 fcm:pi (_:sk_1 _:sk_2).
                    }) e:derive true.
                }) e:derive true.
                ("forall" {
                    (_:sk_0 _:sk_1) fl:sigma _:sk_3.
                } {
                    ("if_then_else" {
                        (_:sk_0) fcm:fs true.
                    } true {
                        ("assertz" {
                            (_:sk_0) fcm:fs true.
                        }) e:derive true.
                    }) e:derive true.
                    ("if_then_else" {
                        (_:sk_1) fcm:fs true.
                    } true {
                        ("assertz" {
                            (_:sk_1) fcm:fs true.
                        }) e:derive true.
                    }) e:derive true.
                }) e:derive true.
                ("between" 1 20 _:sk_4) e:derive true.
                (_:sk_0) fcm:fm true.
                (_:sk_1) fcm:fs true.
                ("findall" _:sk_5 {
                    (_:sk_6 _:sk_1) fl:sigma _:sk_7.
                    _:sk_0 fcm:pi (_:sk_6 _:sk_8).
                    ("(2*_M-1)*(2*_W-1)" _:sk_8 _:sk_7) e:calculate _:sk_5.
                } _:sk_9) e:derive true.
                ("if_then_else" {
                    _:sk_9 log:equalTo ().
                } true {
                    _:sk_9 math:sum _:sk_10.
                    ("1/(1+exp(-_S))" _:sk_10) e:calculate _:sk_2.
                    ("retractall" {
                        _:sk_0 fcm:pi (_:sk_1 _:sk_11).
                    }) e:derive true.
                    ("assertz" {
                        _:sk_0 fcm:pi (_:sk_1 _:sk_2).
                    }) e:derive true.
                }) e:derive true.
                ("fail") e:derive true.
            } {
                ("nb_setval" "fnet" "done") e:derive true.
            }) e:derive true.
        }) e:derive true}]
        [ a r:Fact; r:gives {:Ann fcm:pi (:IncreasedIntraocularPressure 0.5762688313443307)}]
        [ a r:Fact; r:gives {("if_then_else" {
            ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {
                (:Ann :IncreasedIntraocularPressure) fl:pi _:sk_12.
            }.
        } {
            0.5762688313443307 log:equalTo _:sk_12.
        } {
            0.5762688313443307 log:equalTo 0.5762688313443307.
        }) e:derive true}]
    );
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_2"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_2"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_0"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_0"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_1"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_1"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_3"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_3"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_4"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_4"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_5"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_5"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_7"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_7"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_6"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_6"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_8"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_8"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_9"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_9"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_10"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_10"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_11"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_11"]];
    r:binding [ r:variable [ n3:uri "http://eyereasoner.github.io/var#x_12"]; r:boundTo [ a r:Existential; n3:nodeId "_:sk_12"]];
    r:rule [ a r:DerivedRule; r:gives {
        {
            ("if_then_else" {
                ("nb_getval" "fnet" "done") e:derive true.
            } true {
                (";" {
                    ("forall" {
                        (var:x_0 var:x_1) fl:mu var:x_2.
                    } {
                        ("if_then_else" {
                            (var:x_0) fcm:fm true.
                        } true {
                            ("assertz" {
                                (var:x_0) fcm:fm true.
                            }) e:derive true.
                        }) e:derive true.
                        ("assertz" {
                            var:x_0 fcm:pi (var:x_1 var:x_2).
                        }) e:derive true.
                    }) e:derive true.
                    ("forall" {
                        (var:x_0 var:x_1) fl:sigma var:x_3.
                    } {
                        ("if_then_else" {
                            (var:x_0) fcm:fs true.
                        } true {
                            ("assertz" {
                                (var:x_0) fcm:fs true.
                            }) e:derive true.
                        }) e:derive true.
                        ("if_then_else" {
                            (var:x_1) fcm:fs true.
                        } true {
                            ("assertz" {
                                (var:x_1) fcm:fs true.
                            }) e:derive true.
                        }) e:derive true.
                    }) e:derive true.
                    ("between" 1 20 var:x_4) e:derive true.
                    (var:x_0) fcm:fm true.
                    (var:x_1) fcm:fs true.
                    ("findall" var:x_5 {
                        (var:x_6 var:x_1) fl:sigma var:x_7.
                        var:x_0 fcm:pi (var:x_6 var:x_8).
                        ("(2*_M-1)*(2*_W-1)" var:x_8 var:x_7) e:calculate var:x_5.
                    } var:x_9) e:derive true.
                    ("if_then_else" {
                        var:x_9 log:equalTo ().
                    } true {
                        var:x_9 math:sum var:x_10.
                        ("1/(1+exp(-_S))" var:x_10) e:calculate var:x_2.
                        ("retractall" {
                            var:x_0 fcm:pi (var:x_1 var:x_11).
                        }) e:derive true.
                        ("assertz" {
                            var:x_0 fcm:pi (var:x_1 var:x_2).
                        }) e:derive true.
                    }) e:derive true.
                    ("fail") e:derive true.
                } {
                    ("nb_setval" "fnet" "done") e:derive true.
                }) e:derive true.
            }) e:derive true.
            :Ann fcm:pi (:IncreasedIntraocularPressure 0.5762688313443307).
            ("if_then_else" {
                ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {
                    (:Ann :IncreasedIntraocularPressure) fl:pi var:x_12.
                }.
            } {
                0.5762688313443307 log:equalTo var:x_12.
            } {
                0.5762688313443307 log:equalTo 0.5762688313443307.
            }) e:derive true.
        } => {
            ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:call {
                ("if_then_else" {
                    ("nb_getval" "fnet" "done") e:derive true.
                } true {
                    (";" {
                        ("forall" {
                            (var:x_0 var:x_1) fl:mu var:x_2.
                        } {
                            ("if_then_else" {
                                (var:x_0) fcm:fm true.
                            } true {
                                ("assertz" {
                                    (var:x_0) fcm:fm true.
                                }) e:derive true.
                            }) e:derive true.
                            ("assertz" {
                                var:x_0 fcm:pi (var:x_1 var:x_2).
                            }) e:derive true.
                        }) e:derive true.
                        ("forall" {
                            (var:x_0 var:x_1) fl:sigma var:x_3.
                        } {
                            ("if_then_else" {
                                (var:x_0) fcm:fs true.
                            } true {
                                ("assertz" {
                                    (var:x_0) fcm:fs true.
                                }) e:derive true.
                            }) e:derive true.
                            ("if_then_else" {
                                (var:x_1) fcm:fs true.
                            } true {
                                ("assertz" {
                                    (var:x_1) fcm:fs true.
                                }) e:derive true.
                            }) e:derive true.
                        }) e:derive true.
                        ("between" 1 20 var:x_4) e:derive true.
                        (var:x_0) fcm:fm true.
                        (var:x_1) fcm:fs true.
                        ("findall" var:x_5 {
                            (var:x_6 var:x_1) fl:sigma var:x_7.
                            var:x_0 fcm:pi (var:x_6 var:x_8).
                            ("(2*_M-1)*(2*_W-1)" var:x_8 var:x_7) e:calculate var:x_5.
                        } var:x_9) e:derive true.
                        ("if_then_else" {
                            var:x_9 log:equalTo ().
                        } true {
                            var:x_9 math:sum var:x_10.
                            ("1/(1+exp(-_S))" var:x_10) e:calculate var:x_2.
                            ("retractall" {
                                var:x_0 fcm:pi (var:x_1 var:x_11).
                            }) e:derive true.
                            ("assertz" {
                                var:x_0 fcm:pi (var:x_1 var:x_2).
                            }) e:derive true.
                        }) e:derive true.
                        ("fail") e:derive true.
                    } {
                        ("nb_setval" "fnet" "done") e:derive true.
                    }) e:derive true.
                }) e:derive true.
                :Ann fcm:pi (:IncreasedIntraocularPressure 0.5762688313443307).
                ("if_then_else" {
                    ((<http://eyereasoner.github.io/eye/reasoning/fcm/fcm-plugin.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example001P.n3> <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>) 1) e:closure {
                        (:Ann :IncreasedIntraocularPressure) fl:pi var:x_12.
                    }.
                } {
                    0.5762688313443307 log:equalTo var:x_12.
                } {
                    0.5762688313443307 log:equalTo 0.5762688313443307.
                }) e:derive true.
            }.
        }.
    }].

skolem:lemma25 a r:Extraction;
    r:gives {
        :NonNormalIntraocularPressure owl:complementOf :NormalIntraocularPressure.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>].

skolem:lemma26 a r:Extraction;
    r:gives {
        @forAll var:x_0, var:x_1, var:x_2, var:x_3, var:x_4. {
            var:x_0 owl:complementOf var:x_1.
            (var:x_2 var:x_1) fl:pi var:x_3.
            (1.0 var:x_3) math:difference var:x_4.
        } => {
            (var:x_2 var:x_0) fl:pi var:x_4.
        }.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/fcm/fl-rules.n3>].

skolem:lemma27 a r:Extraction;
    r:gives {
        :NonIncreasedIntraocularPressure owl:complementOf :IncreasedIntraocularPressure.
    };
    r:because [ a r:Parsing; r:source <http://eyereasoner.github.io/eye/reasoning/fcm/example002P.n3>].

